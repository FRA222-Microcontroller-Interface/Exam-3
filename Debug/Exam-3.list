
Exam-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b1c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005cf4  08005cf4  00015cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d34  08005d34  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d3c  08005d3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000010  08005d54  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08005d54  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012818  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002505  00000000  00000000  0003289b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00034da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd1  00000000  00000000  00035cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fbc  00000000  00000000  00036891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000134e3  00000000  00000000  0005b84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eae09  00000000  00000000  0006ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f34  00000000  00000000  00159b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0015da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005cdc 	.word	0x08005cdc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005cdc 	.word	0x08005cdc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fcbd 	bl	8000e96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f824 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f968 	bl	80007f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f934 	bl	8000790 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f8aa 	bl	8000680 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 800052c:	f000 f8f2 	bl	8000714 <MX_SPI3_Init>
  MX_I2C1_Init();
 8000530:	f000 f866 	bl	8000600 <MX_I2C1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MCP4922_SendData(ch,dAC);
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <main+0x48>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <main+0x4c>)
 800053a:	8812      	ldrh	r2, [r2, #0]
 800053c:	4611      	mov	r1, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f9ee 	bl	8000920 <MCP4922_SendData>
	  EEPROMWriteExample();
 8000544:	f000 fa2c 	bl	80009a0 <EEPROMWriteExample>
	  EEPROMReadExample(eepromDataReadBack, 4);
 8000548:	2104      	movs	r1, #4
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x50>)
 800054c:	f000 fa4c 	bl	80009e8 <EEPROMReadExample>
      HAL_Delay(1000);
 8000550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000554:	f000 fd10 	bl	8000f78 <HAL_Delay>
	  MCP4922_SendData(ch,dAC);
 8000558:	e7ec      	b.n	8000534 <main+0x20>
 800055a:	bf00      	nop
 800055c:	2000023a 	.word	0x2000023a
 8000560:	20000238 	.word	0x20000238
 8000564:	20000240 	.word	0x20000240

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	2238      	movs	r2, #56	; 0x38
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 fb84 	bl	8005c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800058a:	2000      	movs	r0, #0
 800058c:	f003 f844 	bl	8003618 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2340      	movs	r3, #64	; 0x40
 800059c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005a6:	2304      	movs	r3, #4
 80005a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005aa:	2355      	movs	r3, #85	; 0x55
 80005ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0318 	add.w	r3, r7, #24
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 f8de 	bl	8003780 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ca:	f000 fa33 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fbdc 	bl	8003da4 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005f2:	f000 fa1f 	bl	8000a34 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_I2C1_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_I2C1_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_I2C1_Init+0x74>)
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <MX_I2C1_Init+0x7c>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_I2C1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_I2C1_Init+0x74>)
 8000618:	2201      	movs	r2, #1
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_I2C1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_I2C1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_I2C1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <MX_I2C1_Init+0x74>)
 800063c:	f001 f9b9 	bl	80019b2 <HAL_I2C_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000646:	f000 f9f5 	bl	8000a34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064a:	2100      	movs	r1, #0
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <MX_I2C1_Init+0x74>)
 800064e:	f002 ff4b 	bl	80034e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000658:	f000 f9ec 	bl	8000a34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800065c:	2100      	movs	r1, #0
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_I2C1_Init+0x74>)
 8000660:	f002 ff8d 	bl	800357e <HAL_I2CEx_ConfigDigitalFilter>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800066a:	f000 f9e3 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000002c 	.word	0x2000002c
 8000678:	40005400 	.word	0x40005400
 800067c:	30a0a7fb 	.word	0x30a0a7fb

08000680 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 8000686:	4a22      	ldr	r2, [pc, #136]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 8000688:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006c2:	4812      	ldr	r0, [pc, #72]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 80006c4:	f004 fc70 	bl	8004fa8 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f9b1 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 80006d6:	f005 fa0b 	bl	8005af0 <HAL_UARTEx_SetTxFifoThreshold>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006e0:	f000 f9a8 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4809      	ldr	r0, [pc, #36]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 80006e8:	f005 fa40 	bl	8005b6c <HAL_UARTEx_SetRxFifoThreshold>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006f2:	f000 f99f 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_LPUART1_UART_Init+0x8c>)
 80006f8:	f005 f9c1 	bl	8005a7e <HAL_UARTEx_DisableFifoMode>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000702:	f000 f997 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000140 	.word	0x20000140
 8000710:	40008000 	.word	0x40008000

08000714 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_SPI3_Init+0x74>)
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <MX_SPI3_Init+0x78>)
 800071c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_SPI3_Init+0x74>)
 8000720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000724:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_SPI3_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_SPI3_Init+0x74>)
 800072e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000732:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_SPI3_Init+0x74>)
 8000736:	2202      	movs	r2, #2
 8000738:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_SPI3_Init+0x74>)
 800073c:	2201      	movs	r2, #1
 800073e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_SPI3_Init+0x74>)
 8000742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000746:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_SPI3_Init+0x74>)
 800074a:	2238      	movs	r2, #56	; 0x38
 800074c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_SPI3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_SPI3_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_SPI3_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_SPI3_Init+0x74>)
 8000762:	2207      	movs	r2, #7
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_SPI3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_SPI3_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_SPI3_Init+0x74>)
 8000774:	f003 ff80 	bl	8004678 <HAL_SPI_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f959 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200001d4 	.word	0x200001d4
 800078c:	40003c00 	.word	0x40003c00

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_DMA_Init+0x60>)
 8000798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <MX_DMA_Init+0x60>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6493      	str	r3, [r2, #72]	; 0x48
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_DMA_Init+0x60>)
 80007a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_DMA_Init+0x60>)
 80007b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <MX_DMA_Init+0x60>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6493      	str	r3, [r2, #72]	; 0x48
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_DMA_Init+0x60>)
 80007bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	200b      	movs	r0, #11
 80007cc:	f000 fcd1 	bl	8001172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007d0:	200b      	movs	r0, #11
 80007d2:	f000 fce8 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	200c      	movs	r0, #12
 80007dc:	f000 fcc9 	bl	8001172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007e0:	200c      	movs	r0, #12
 80007e2:	f000 fce0 	bl	80011a6 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b42      	ldr	r3, [pc, #264]	; (8000914 <MX_GPIO_Init+0x120>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a41      	ldr	r2, [pc, #260]	; (8000914 <MX_GPIO_Init+0x120>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <MX_GPIO_Init+0x120>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <MX_GPIO_Init+0x120>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a3b      	ldr	r2, [pc, #236]	; (8000914 <MX_GPIO_Init+0x120>)
 8000828:	f043 0320 	orr.w	r3, r3, #32
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b39      	ldr	r3, [pc, #228]	; (8000914 <MX_GPIO_Init+0x120>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0320 	and.w	r3, r3, #32
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b36      	ldr	r3, [pc, #216]	; (8000914 <MX_GPIO_Init+0x120>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a35      	ldr	r2, [pc, #212]	; (8000914 <MX_GPIO_Init+0x120>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b33      	ldr	r3, [pc, #204]	; (8000914 <MX_GPIO_Init+0x120>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <MX_GPIO_Init+0x120>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <MX_GPIO_Init+0x120>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0x120>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_GPIO_Init+0x120>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a29      	ldr	r2, [pc, #164]	; (8000914 <MX_GPIO_Init+0x120>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_GPIO_Init+0x120>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	2101      	movs	r1, #1
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f001 f857 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2120      	movs	r1, #32
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f001 f851 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	2104      	movs	r1, #4
 800089e:	481e      	ldr	r0, [pc, #120]	; (8000918 <MX_GPIO_Init+0x124>)
 80008a0:	f001 f84c 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_GPIO_Init+0x128>)
 80008bc:	f000 febc 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDAC_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LDAC_Pin|LD2_Pin;
 80008c0:	2321      	movs	r3, #33	; 0x21
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f000 fead 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80008de:	2304      	movs	r3, #4
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <MX_GPIO_Init+0x124>)
 80008f6:	f000 fe9f 	bl	8001638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2028      	movs	r0, #40	; 0x28
 8000900:	f000 fc37 	bl	8001172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000904:	2028      	movs	r0, #40	; 0x28
 8000906:	f000 fc4e 	bl	80011a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	48000c00 	.word	0x48000c00
 800091c:	48000800 	.word	0x48000800

08000920 <MCP4922_SendData>:

/* USER CODE BEGIN 4 */

void MCP4922_SendData(uint8_t chh,uint16_t data)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	460a      	mov	r2, r1
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	4613      	mov	r3, r2
 800092e:	80bb      	strh	r3, [r7, #4]
    // Combine command and data
	uint16_t command = MCP4922_CMDB | (data & 0x0FFF);
 8000930:	88bb      	ldrh	r3, [r7, #4]
 8000932:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000936:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800093a:	b29b      	uxth	r3, r3
 800093c:	81fb      	strh	r3, [r7, #14]

	if (chh == 0)
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10a      	bne.n	800095a <MCP4922_SendData+0x3a>
	{
		command = MCP4922_CMDA | (data & 0x0FFF);
 8000944:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800094c:	b21b      	sxth	r3, r3
 800094e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000952:	b21b      	sxth	r3, r3
 8000954:	b29b      	uxth	r3, r3
 8000956:	81fb      	strh	r3, [r7, #14]
 8000958:	e009      	b.n	800096e <MCP4922_SendData+0x4e>
	}
	else if (chh == 1)
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d106      	bne.n	800096e <MCP4922_SendData+0x4e>
	{
		command = MCP4922_CMDB | (data & 0x0FFF);
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000966:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800096a:	b29b      	uxth	r3, r3
 800096c:	81fb      	strh	r3, [r7, #14]
	}

    // Select the MCP4922 by setting CS low
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2104      	movs	r1, #4
 8000972:	4809      	ldr	r0, [pc, #36]	; (8000998 <MCP4922_SendData+0x78>)
 8000974:	f000 ffe2 	bl	800193c <HAL_GPIO_WritePin>

    // Transmit the data via SPI
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&command, 1, 10);
 8000978:	f107 010e 	add.w	r1, r7, #14
 800097c:	230a      	movs	r3, #10
 800097e:	2201      	movs	r2, #1
 8000980:	4806      	ldr	r0, [pc, #24]	; (800099c <MCP4922_SendData+0x7c>)
 8000982:	f003 ff24 	bl	80047ce <HAL_SPI_Transmit>

    // Deselect the MCP4922 by setting CS high
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2104      	movs	r1, #4
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <MCP4922_SendData+0x78>)
 800098c:	f000 ffd6 	bl	800193c <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	48000c00 	.word	0x48000c00
 800099c:	200001d4 	.word	0x200001d4

080009a0 <EEPROMWriteExample>:

void EEPROMWriteExample()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY)
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <EEPROMWriteExample+0x3c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d012      	beq.n	80009d4 <EEPROMWriteExample+0x34>
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <EEPROMWriteExample+0x40>)
 80009b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b20      	cmp	r3, #32
 80009b8:	d10c      	bne.n	80009d4 <EEPROMWriteExample+0x34>
	{
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT, data, 4);
 80009ba:	2304      	movs	r3, #4
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <EEPROMWriteExample+0x44>)
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2302      	movs	r3, #2
 80009c4:	222c      	movs	r2, #44	; 0x2c
 80009c6:	21a0      	movs	r1, #160	; 0xa0
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <EEPROMWriteExample+0x40>)
 80009ca:	f001 f88d 	bl	8001ae8 <HAL_I2C_Mem_Write_IT>
		eepromExampleWriteFlag = 0;
 80009ce:	4b03      	ldr	r3, [pc, #12]	; (80009dc <EEPROMWriteExample+0x3c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	}
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000023b 	.word	0x2000023b
 80009e0:	2000002c 	.word	0x2000002c
 80009e4:	20000000 	.word	0x20000000

080009e8 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY)
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <EEPROMReadExample+0x44>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d012      	beq.n	8000a22 <EEPROMReadExample+0x3a>
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <EEPROMReadExample+0x48>)
 80009fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b20      	cmp	r3, #32
 8000a06:	d10c      	bne.n	8000a22 <EEPROMReadExample+0x3a>
	{
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT, Rdata, len);
 8000a08:	887b      	ldrh	r3, [r7, #2]
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2302      	movs	r3, #2
 8000a12:	222c      	movs	r2, #44	; 0x2c
 8000a14:	21a0      	movs	r1, #160	; 0xa0
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <EEPROMReadExample+0x48>)
 8000a18:	f001 f8f0 	bl	8001bfc <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <EEPROMReadExample+0x44>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
	}
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000023c 	.word	0x2000023c
 8000a30:	2000002c 	.word	0x2000002c

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_MspInit+0x44>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_MspInit+0x44>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6613      	str	r3, [r2, #96]	; 0x60
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_MspInit+0x44>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x44>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x44>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a76:	f002 fe73 	bl	8003760 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09e      	sub	sp, #120	; 0x78
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2254      	movs	r2, #84	; 0x54
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 f8eb 	bl	8005c84 <memset>
  if(hi2c->Instance==I2C1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a50      	ldr	r2, [pc, #320]	; (8000bf4 <HAL_I2C_MspInit+0x16c>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	f040 8099 	bne.w	8000bec <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000aba:	2340      	movs	r3, #64	; 0x40
 8000abc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 fb88 	bl	80041dc <HAL_RCCEx_PeriphCLKConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ad2:	f7ff ffaf 	bl	8000a34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b48      	ldr	r3, [pc, #288]	; (8000bf8 <HAL_I2C_MspInit+0x170>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a47      	ldr	r2, [pc, #284]	; (8000bf8 <HAL_I2C_MspInit+0x170>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b45      	ldr	r3, [pc, #276]	; (8000bf8 <HAL_I2C_MspInit+0x170>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af4:	2312      	movs	r3, #18
 8000af6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b00:	2304      	movs	r3, #4
 8000b02:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b08:	4619      	mov	r1, r3
 8000b0a:	483c      	ldr	r0, [pc, #240]	; (8000bfc <HAL_I2C_MspInit+0x174>)
 8000b0c:	f000 fd94 	bl	8001638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b10:	4b39      	ldr	r3, [pc, #228]	; (8000bf8 <HAL_I2C_MspInit+0x170>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	4a38      	ldr	r2, [pc, #224]	; (8000bf8 <HAL_I2C_MspInit+0x170>)
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <HAL_I2C_MspInit+0x170>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000b28:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b2a:	4a36      	ldr	r2, [pc, #216]	; (8000c04 <HAL_I2C_MspInit+0x17c>)
 8000b2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b30:	2210      	movs	r2, #16
 8000b32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b40:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b58:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000b5e:	4828      	ldr	r0, [pc, #160]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b60:	f000 fb3c 	bl	80011dc <HAL_DMA_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000b6a:	f7ff ff63 	bl	8000a34 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b74:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <HAL_I2C_MspInit+0x178>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000b7c:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <HAL_I2C_MspInit+0x184>)
 8000b7e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000b80:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000b82:	2211      	movs	r2, #17
 8000b84:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000b88:	2210      	movs	r2, #16
 8000b8a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000bb0:	4815      	ldr	r0, [pc, #84]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000bb2:	f000 fb13 	bl	80011dc <HAL_DMA_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000bbc:	f7ff ff3a 	bl	8000a34 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000bc4:	639a      	str	r2, [r3, #56]	; 0x38
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_I2C_MspInit+0x180>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	201f      	movs	r0, #31
 8000bd2:	f000 face 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bd6:	201f      	movs	r0, #31
 8000bd8:	f000 fae5 	bl	80011a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	2020      	movs	r0, #32
 8000be2:	f000 fac6 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000be6:	2020      	movs	r0, #32
 8000be8:	f000 fadd 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3778      	adds	r7, #120	; 0x78
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000400 	.word	0x48000400
 8000c00:	20000080 	.word	0x20000080
 8000c04:	40020008 	.word	0x40020008
 8000c08:	200000e0 	.word	0x200000e0
 8000c0c:	4002001c 	.word	0x4002001c

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b09e      	sub	sp, #120	; 0x78
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	2254      	movs	r2, #84	; 0x54
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 f827 	bl	8005c84 <memset>
  if(huart->Instance==LPUART1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <HAL_UART_MspInit+0xa8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d136      	bne.n	8000cae <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c40:	2320      	movs	r3, #32
 8000c42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fac5 	bl	80041dc <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c58:	f7ff feec 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c60:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f000 fcc5 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3778      	adds	r7, #120	; 0x78
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40008000 	.word	0x40008000
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <HAL_SPI_MspInit+0x8c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d130      	bne.n	8000d44 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_SPI_MspInit+0x90>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <HAL_SPI_MspInit+0x90>)
 8000ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cec:	6593      	str	r3, [r2, #88]	; 0x58
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_SPI_MspInit+0x90>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_SPI_MspInit+0x90>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_SPI_MspInit+0x90>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_SPI_MspInit+0x90>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d24:	2306      	movs	r3, #6
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <HAL_SPI_MspInit+0x94>)
 8000d30:	f000 fc82 	bl	8001638 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	2033      	movs	r0, #51	; 0x33
 8000d3a:	f000 fa1a 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000d3e:	2033      	movs	r0, #51	; 0x33
 8000d40:	f000 fa31 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40003c00 	.word	0x40003c00
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000800 	.word	0x48000800

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 f8ca 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DMA1_Channel1_IRQHandler+0x10>)
 8000db2:	f000 fb22 	bl	80013fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000080 	.word	0x20000080

08000dc0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DMA1_Channel2_IRQHandler+0x10>)
 8000dc6:	f000 fb18 	bl	80013fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000e0 	.word	0x200000e0

08000dd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <I2C1_EV_IRQHandler+0x10>)
 8000dda:	f000 ff95 	bl	8001d08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000002c 	.word	0x2000002c

08000de8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <I2C1_ER_IRQHandler+0x10>)
 8000dee:	f000 ffa5 	bl	8001d3c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000002c 	.word	0x2000002c

08000dfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e04:	f000 fdb2 	bl	800196c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <SPI3_IRQHandler+0x10>)
 8000e12:	f003 fe51 	bl	8004ab8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200001d4 	.word	0x200001d4

08000e20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e48:	f7ff ffea 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	; (8000e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <LoopForever+0xe>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	; (8000e90 <LoopForever+0x16>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f004 ff0f 	bl	8005c94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e76:	f7ff fb4d 	bl	8000514 <main>

08000e7a <LoopForever>:

LoopForever:
    b LoopForever
 8000e7a:	e7fe      	b.n	8000e7a <LoopForever>
  ldr   r0, =_estack
 8000e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e88:	08005d44 	.word	0x08005d44
  ldr r2, =_sbss
 8000e8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e90:	20000248 	.word	0x20000248

08000e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_2_IRQHandler>

08000e96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f95b 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f80e 	bl	8000ec8 <HAL_InitTick>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	e001      	b.n	8000ebc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb8:	f7ff fdc2 	bl	8000a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]

}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_InitTick+0x68>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d022      	beq.n	8000f22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_InitTick+0x6c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_InitTick+0x68>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f966 	bl	80011c2 <HAL_SYSTICK_Config>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10f      	bne.n	8000f1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	d809      	bhi.n	8000f16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f02:	2200      	movs	r2, #0
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	f000 f932 	bl	8001172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_InitTick+0x70>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e007      	b.n	8000f26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e004      	b.n	8000f26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	e001      	b.n	8000f26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000000c 	.word	0x2000000c
 8000f34:	20000004 	.word	0x20000004
 8000f38:	20000008 	.word	0x20000008

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x20>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a03      	ldr	r2, [pc, #12]	; (8000f58 <HAL_IncTick+0x1c>)
 8000f4c:	6013      	str	r3, [r2, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	20000244 	.word	0x20000244
 8000f5c:	2000000c 	.word	0x2000000c

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000244 	.word	0x20000244

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d004      	beq.n	8000f9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_Delay+0x40>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9c:	bf00      	nop
 8000f9e:	f7ff ffdf 	bl	8000f60 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d8f7      	bhi.n	8000f9e <HAL_Delay+0x26>
  {
  }
}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000000c 	.word	0x2000000c

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff29 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff40 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff90 	bl	80010b0 <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5f 	bl	800105c <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff33 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa4 	bl	8001118 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e08d      	b.n	800130a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_DMA_Init+0x138>)
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d80f      	bhi.n	800121a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <HAL_DMA_Init+0x13c>)
 8001202:	4413      	add	r3, r2
 8001204:	4a45      	ldr	r2, [pc, #276]	; (800131c <HAL_DMA_Init+0x140>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	009a      	lsls	r2, r3, #2
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a42      	ldr	r2, [pc, #264]	; (8001320 <HAL_DMA_Init+0x144>)
 8001216:	641a      	str	r2, [r3, #64]	; 0x40
 8001218:	e00e      	b.n	8001238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	4b40      	ldr	r3, [pc, #256]	; (8001324 <HAL_DMA_Init+0x148>)
 8001222:	4413      	add	r3, r2
 8001224:	4a3d      	ldr	r2, [pc, #244]	; (800131c <HAL_DMA_Init+0x140>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	009a      	lsls	r2, r3, #2
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a3c      	ldr	r2, [pc, #240]	; (8001328 <HAL_DMA_Init+0x14c>)
 8001236:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2202      	movs	r2, #2
 800123c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800124e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800125c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f972 	bl	8001574 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001298:	d102      	bne.n	80012a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d010      	beq.n	80012e0 <HAL_DMA_Init+0x104>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d80c      	bhi.n	80012e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f992 	bl	80015f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	e008      	b.n	80012f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020407 	.word	0x40020407
 8001318:	bffdfff8 	.word	0xbffdfff8
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	40020000 	.word	0x40020000
 8001324:	bffdfbf8 	.word	0xbffdfbf8
 8001328:	40020400 	.word	0x40020400

0800132c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d00d      	beq.n	8001360 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2204      	movs	r2, #4
 8001348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e047      	b.n	80013f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 020e 	bic.w	r2, r2, #14
 800136e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800138e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	2101      	movs	r1, #1
 800139e:	fa01 f202 	lsl.w	r2, r1, r2
 80013a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00c      	beq.n	80013d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	4798      	blx	r3
    }
  }
  return status;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2204      	movs	r2, #4
 800141c:	409a      	lsls	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d026      	beq.n	8001474 <HAL_DMA_IRQHandler+0x7a>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d021      	beq.n	8001474 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b00      	cmp	r3, #0
 800143c:	d107      	bne.n	800144e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0204 	bic.w	r2, r2, #4
 800144c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f003 021f 	and.w	r2, r3, #31
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	2104      	movs	r1, #4
 800145c:	fa01 f202 	lsl.w	r2, r1, r2
 8001460:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	2b00      	cmp	r3, #0
 8001468:	d071      	beq.n	800154e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001472:	e06c      	b.n	800154e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	2202      	movs	r2, #2
 800147e:	409a      	lsls	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d02e      	beq.n	80014e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d029      	beq.n	80014e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10b      	bne.n	80014b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 020a 	bic.w	r2, r2, #10
 80014ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	2102      	movs	r1, #2
 80014c6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d038      	beq.n	800154e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014e4:	e033      	b.n	800154e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	2208      	movs	r2, #8
 80014f0:	409a      	lsls	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d02a      	beq.n	8001550 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d025      	beq.n	8001550 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020e 	bic.w	r2, r2, #14
 8001512:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800154e:	bf00      	nop
 8001550:	bf00      	nop
}
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001566:	b2db      	uxtb	r3, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001584:	429a      	cmp	r2, r3
 8001586:	d802      	bhi.n	800158e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e001      	b.n	8001592 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001590:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3b08      	subs	r3, #8
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	009a      	lsls	r2, r3, #2
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4413      	add	r3, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80015be:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2201      	movs	r2, #1
 80015c8:	409a      	lsls	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80015ce:	bf00      	nop
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40020407 	.word	0x40020407
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020820 	.word	0x40020820
 80015e8:	cccccccd 	.word	0xcccccccd
 80015ec:	40020880 	.word	0x40020880

080015f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	461a      	mov	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a08      	ldr	r2, [pc, #32]	; (8001634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001612:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3b01      	subs	r3, #1
 8001618:	f003 031f 	and.w	r3, r3, #31
 800161c:	2201      	movs	r2, #1
 800161e:	409a      	lsls	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	1000823f 	.word	0x1000823f
 8001634:	40020940 	.word	0x40020940

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001646:	e15a      	b.n	80018fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 814c 	beq.w	80018f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d005      	beq.n	8001678 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001674:	2b02      	cmp	r3, #2
 8001676:	d130      	bne.n	80016da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ae:	2201      	movs	r2, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f003 0201 	and.w	r2, r3, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d017      	beq.n	8001716 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d123      	bne.n	800176a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	6939      	ldr	r1, [r7, #16]
 8001766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0203 	and.w	r2, r3, #3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80a6 	beq.w	80018f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ac:	4b5b      	ldr	r3, [pc, #364]	; (800191c <HAL_GPIO_Init+0x2e4>)
 80017ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b0:	4a5a      	ldr	r2, [pc, #360]	; (800191c <HAL_GPIO_Init+0x2e4>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6613      	str	r3, [r2, #96]	; 0x60
 80017b8:	4b58      	ldr	r3, [pc, #352]	; (800191c <HAL_GPIO_Init+0x2e4>)
 80017ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c4:	4a56      	ldr	r2, [pc, #344]	; (8001920 <HAL_GPIO_Init+0x2e8>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ee:	d01f      	beq.n	8001830 <HAL_GPIO_Init+0x1f8>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_GPIO_Init+0x2ec>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d019      	beq.n	800182c <HAL_GPIO_Init+0x1f4>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a4b      	ldr	r2, [pc, #300]	; (8001928 <HAL_GPIO_Init+0x2f0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d013      	beq.n	8001828 <HAL_GPIO_Init+0x1f0>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a4a      	ldr	r2, [pc, #296]	; (800192c <HAL_GPIO_Init+0x2f4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00d      	beq.n	8001824 <HAL_GPIO_Init+0x1ec>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a49      	ldr	r2, [pc, #292]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d007      	beq.n	8001820 <HAL_GPIO_Init+0x1e8>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a48      	ldr	r2, [pc, #288]	; (8001934 <HAL_GPIO_Init+0x2fc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_GPIO_Init+0x1e4>
 8001818:	2305      	movs	r3, #5
 800181a:	e00a      	b.n	8001832 <HAL_GPIO_Init+0x1fa>
 800181c:	2306      	movs	r3, #6
 800181e:	e008      	b.n	8001832 <HAL_GPIO_Init+0x1fa>
 8001820:	2304      	movs	r3, #4
 8001822:	e006      	b.n	8001832 <HAL_GPIO_Init+0x1fa>
 8001824:	2303      	movs	r3, #3
 8001826:	e004      	b.n	8001832 <HAL_GPIO_Init+0x1fa>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x1fa>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_GPIO_Init+0x1fa>
 8001830:	2300      	movs	r3, #0
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	f002 0203 	and.w	r2, r2, #3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4093      	lsls	r3, r2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001842:	4937      	ldr	r1, [pc, #220]	; (8001920 <HAL_GPIO_Init+0x2e8>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_GPIO_Init+0x300>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001874:	4a30      	ldr	r2, [pc, #192]	; (8001938 <HAL_GPIO_Init+0x300>)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_GPIO_Init+0x300>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800189e:	4a26      	ldr	r2, [pc, #152]	; (8001938 <HAL_GPIO_Init+0x300>)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_GPIO_Init+0x300>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018c8:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <HAL_GPIO_Init+0x300>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_GPIO_Init+0x300>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <HAL_GPIO_Init+0x300>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	f47f ae9d 	bne.w	8001648 <HAL_GPIO_Init+0x10>
  }
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800
 800192c:	48000c00 	.word	0x48000c00
 8001930:	48001000 	.word	0x48001000
 8001934:	48001400 	.word	0x48001400
 8001938:	40010400 	.word	0x40010400

0800193c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
 8001948:	4613      	mov	r3, r2
 800194a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800194c:	787b      	ldrb	r3, [r7, #1]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001958:	e002      	b.n	8001960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d006      	beq.n	8001990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f806 	bl	800199c <HAL_GPIO_EXTI_Callback>
  }
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e08d      	b.n	8001ae0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d106      	bne.n	80019de <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff f855 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2224      	movs	r2, #36	; 0x24
 80019e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0201 	bic.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	e006      	b.n	8001a3a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a38:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d108      	bne.n	8001a54 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	e007      	b.n	8001a64 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a62:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a76:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a86:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69d9      	ldr	r1, [r3, #28]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1a      	ldr	r2, [r3, #32]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	817b      	strh	r3, [r7, #10]
 8001afa:	460b      	mov	r3, r1
 8001afc:	813b      	strh	r3, [r7, #8]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d16a      	bne.n	8001be4 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_I2C_Mem_Write_IT+0x32>
 8001b14:	8bbb      	ldrh	r3, [r7, #28]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d105      	bne.n	8001b26 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e05f      	b.n	8001be6 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b34:	d101      	bne.n	8001b3a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001b36:	2302      	movs	r3, #2
 8001b38:	e055      	b.n	8001be6 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_I2C_Mem_Write_IT+0x60>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e04e      	b.n	8001be6 <HAL_I2C_Mem_Write_IT+0xfe>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2221      	movs	r2, #33	; 0x21
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8bba      	ldrh	r2, [r7, #28]
 8001b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_I2C_Mem_Write_IT+0x108>)
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_I2C_Mem_Write_IT+0x10c>)
 8001b82:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001b84:	897a      	ldrh	r2, [r7, #10]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d109      	bne.n	8001ba4 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b90:	893b      	ldrh	r3, [r7, #8]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ba2:	e00b      	b.n	8001bbc <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ba4:	893b      	ldrh	r3, [r7, #8]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001bb2:	893b      	ldrh	r3, [r7, #8]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	8979      	ldrh	r1, [r7, #10]
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_I2C_Mem_Write_IT+0x110>)
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f001 fb78 	bl	80032c0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001bd8:	2101      	movs	r1, #1
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f001 fba2 	bl	8003324 <I2C_Enable_IRQ>

    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
  }
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	ffff0000 	.word	0xffff0000
 8001bf4:	08001ec5 	.word	0x08001ec5
 8001bf8:	80002000 	.word	0x80002000

08001bfc <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	817b      	strh	r3, [r7, #10]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	813b      	strh	r3, [r7, #8]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d166      	bne.n	8001cf0 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HAL_I2C_Mem_Read_IT+0x32>
 8001c28:	8bbb      	ldrh	r3, [r7, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d105      	bne.n	8001c3a <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e05b      	b.n	8001cf2 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c48:	d101      	bne.n	8001c4e <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e051      	b.n	8001cf2 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_I2C_Mem_Read_IT+0x60>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e04a      	b.n	8001cf2 <HAL_I2C_Mem_Read_IT+0xf6>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2222      	movs	r2, #34	; 0x22
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2240      	movs	r2, #64	; 0x40
 8001c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8bba      	ldrh	r2, [r7, #28]
 8001c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_I2C_Mem_Read_IT+0x100>)
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_I2C_Mem_Read_IT+0x104>)
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001c92:	897a      	ldrh	r2, [r7, #10]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d109      	bne.n	8001cb2 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c9e:	893b      	ldrh	r3, [r7, #8]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f04f 32ff 	mov.w	r2, #4294967295
 8001cae:	651a      	str	r2, [r3, #80]	; 0x50
 8001cb0:	e00b      	b.n	8001cca <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cb2:	893b      	ldrh	r3, [r7, #8]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001cc0:	893b      	ldrh	r3, [r7, #8]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	8979      	ldrh	r1, [r7, #10]
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_I2C_Mem_Read_IT+0x108>)
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f001 faf2 	bl	80032c0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f001 fb1c 	bl	8003324 <I2C_Enable_IRQ>

    return HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e000      	b.n	8001cf2 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8001cf0:	2302      	movs	r3, #2
  }
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	ffff0000 	.word	0xffff0000
 8001d00:	08001ec5 	.word	0x08001ec5
 8001d04:	80002000 	.word	0x80002000

08001d08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	68f9      	ldr	r1, [r7, #12]
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	4798      	blx	r3
  }
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00f      	beq.n	8001d7e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00f      	beq.n	8001da8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f043 0208 	orr.w	r2, r3, #8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00f      	beq.n	8001dd2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00a      	beq.n	8001dd2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f043 0202 	orr.w	r2, r3, #2
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 030b 	and.w	r3, r3, #11
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001de2:	68f9      	ldr	r1, [r7, #12]
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f001 f911 	bl	800300c <I2C_ITError>
  }
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001ed0:	4b8d      	ldr	r3, [pc, #564]	; (8002108 <I2C_Mem_ISR_IT+0x244>)
 8001ed2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <I2C_Mem_ISR_IT+0x22>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e10c      	b.n	8002100 <I2C_Mem_ISR_IT+0x23c>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d012      	beq.n	8001f1e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00d      	beq.n	8001f1e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2210      	movs	r2, #16
 8001f08:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f043 0204 	orr.w	r2, r3, #4
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f001 f98f 	bl	800323a <I2C_Flush_TXDR>
 8001f1c:	e0dd      	b.n	80020da <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d022      	beq.n	8001f6e <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01d      	beq.n	8001f6e <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f6c:	e0b5      	b.n	80020da <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d02c      	beq.n	8001fd2 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d027      	beq.n	8001fd2 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d118      	bne.n	8001fbe <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001fbc:	e08d      	b.n	80020da <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f04f 32ff 	mov.w	r2, #4294967295
 8001fce:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001fd0:	e083      	b.n	80020da <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d03c      	beq.n	8002056 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d037      	beq.n	8002056 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d02c      	beq.n	800204a <I2C_Mem_ISR_IT+0x186>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d128      	bne.n	800204a <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2bff      	cmp	r3, #255	; 0xff
 8002000:	d910      	bls.n	8002024 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	22ff      	movs	r2, #255	; 0xff
 8002006:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200c:	b299      	uxth	r1, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	b2da      	uxtb	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f001 f94f 	bl	80032c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002022:	e017      	b.n	8002054 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	b299      	uxth	r1, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002038:	b2da      	uxtb	r2, r3
 800203a:	2300      	movs	r3, #0
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f001 f93c 	bl	80032c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002048:	e004      	b.n	8002054 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 ffdd 	bl	800300c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002052:	e042      	b.n	80020da <I2C_Mem_ISR_IT+0x216>
 8002054:	e041      	b.n	80020da <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d03c      	beq.n	80020da <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002066:	2b00      	cmp	r3, #0
 8002068:	d037      	beq.n	80020da <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800206a:	2101      	movs	r1, #1
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f001 f9dd 	bl	800342c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002072:	2102      	movs	r1, #2
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f001 f955 	bl	8003324 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b22      	cmp	r3, #34	; 0x22
 8002084:	d101      	bne.n	800208a <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002086:	4b21      	ldr	r3, [pc, #132]	; (800210c <I2C_Mem_ISR_IT+0x248>)
 8002088:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	2bff      	cmp	r3, #255	; 0xff
 8002092:	d910      	bls.n	80020b6 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	22ff      	movs	r2, #255	; 0xff
 8002098:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	b299      	uxth	r1, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f001 f906 	bl	80032c0 <I2C_TransferConfig>
 80020b4:	e011      	b.n	80020da <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	b299      	uxth	r1, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f001 f8f3 	bl	80032c0 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80020ee:	6939      	ldr	r1, [r7, #16]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fd0b 	bl	8002b0c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	80002000 	.word	0x80002000
 800210c:	80002400 	.word	0x80002400

08002110 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <I2C_Slave_ISR_IT+0x24>
 8002130:	2302      	movs	r3, #2
 8002132:	e0e2      	b.n	80022fa <I2C_Slave_ISR_IT+0x1ea>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002150:	6939      	ldr	r1, [r7, #16]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 fda2 	bl	8002c9c <I2C_ITSlaveCplt>
 8002158:	e0ca      	b.n	80022f0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d04b      	beq.n	80021fc <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800216a:	2b00      	cmp	r3, #0
 800216c:	d046      	beq.n	80021fc <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d128      	bne.n	80021ca <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b28      	cmp	r3, #40	; 0x28
 8002182:	d108      	bne.n	8002196 <I2C_Slave_ISR_IT+0x86>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800218a:	d104      	bne.n	8002196 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fee8 	bl	8002f64 <I2C_ITListenCplt>
 8002194:	e031      	b.n	80021fa <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b29      	cmp	r3, #41	; 0x29
 80021a0:	d10e      	bne.n	80021c0 <I2C_Slave_ISR_IT+0xb0>
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021a8:	d00a      	beq.n	80021c0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2210      	movs	r2, #16
 80021b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f001 f841 	bl	800323a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fc4b 	bl	8002a54 <I2C_ITSlaveSeqCplt>
 80021be:	e01c      	b.n	80021fa <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2210      	movs	r2, #16
 80021c6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80021c8:	e08f      	b.n	80022ea <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2210      	movs	r2, #16
 80021d0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f043 0204 	orr.w	r2, r3, #4
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <I2C_Slave_ISR_IT+0xdc>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ea:	d17e      	bne.n	80022ea <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	4619      	mov	r1, r3
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 ff0a 	bl	800300c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80021f8:	e077      	b.n	80022ea <I2C_Slave_ISR_IT+0x1da>
 80021fa:	e076      	b.n	80022ea <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d02f      	beq.n	8002266 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800220c:	2b00      	cmp	r3, #0
 800220e:	d02a      	beq.n	8002266 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d018      	beq.n	800224c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d14b      	bne.n	80022ee <I2C_Slave_ISR_IT+0x1de>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800225c:	d047      	beq.n	80022ee <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fbf8 	bl	8002a54 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002264:	e043      	b.n	80022ee <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800227a:	6939      	ldr	r1, [r7, #16]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fb28 	bl	80028d2 <I2C_ITAddrCplt>
 8002282:	e035      	b.n	80022f0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d030      	beq.n	80022f0 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02b      	beq.n	80022f0 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d018      	beq.n	80022d4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80022d2:	e00d      	b.n	80022f0 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022da:	d002      	beq.n	80022e2 <I2C_Slave_ISR_IT+0x1d2>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fbb6 	bl	8002a54 <I2C_ITSlaveSeqCplt>
 80022e8:	e002      	b.n	80022f0 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80022ea:	bf00      	nop
 80022ec:	e000      	b.n	80022f0 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80022ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b088      	sub	sp, #32
 8002306:	af02      	add	r7, sp, #8
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <I2C_Master_ISR_DMA+0x1a>
 8002318:	2302      	movs	r3, #2
 800231a:	e0d9      	b.n	80024d0 <I2C_Master_ISR_DMA+0x1ce>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002334:	2b00      	cmp	r3, #0
 8002336:	d011      	beq.n	800235c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2210      	movs	r2, #16
 800233e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	f043 0204 	orr.w	r2, r3, #4
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800234c:	2120      	movs	r1, #32
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 ffe8 	bl	8003324 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 ff70 	bl	800323a <I2C_Flush_TXDR>
 800235a:	e0b4      	b.n	80024c6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	2b00      	cmp	r3, #0
 8002364:	d071      	beq.n	800244a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800236c:	2b00      	cmp	r3, #0
 800236e:	d06c      	beq.n	800244a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d04e      	beq.n	8002428 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	b29b      	uxth	r3, r3
 8002392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002396:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	2bff      	cmp	r3, #255	; 0xff
 80023a0:	d906      	bls.n	80023b0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	22ff      	movs	r2, #255	; 0xff
 80023a6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80023a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e010      	b.n	80023d2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023c2:	d003      	beq.n	80023cc <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e002      	b.n	80023d2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80023cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	8a79      	ldrh	r1, [r7, #18]
 80023da:	2300      	movs	r3, #0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 ff6d 	bl	80032c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b22      	cmp	r3, #34	; 0x22
 8002402:	d108      	bne.n	8002416 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002412:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002414:	e057      	b.n	80024c6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002424:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002426:	e04e      	b.n	80024c6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002436:	d003      	beq.n	8002440 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 face 	bl	80029da <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800243e:	e042      	b.n	80024c6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002440:	2140      	movs	r1, #64	; 0x40
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fde2 	bl	800300c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002448:	e03d      	b.n	80024c6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d028      	beq.n	80024a6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800245a:	2b00      	cmp	r3, #0
 800245c:	d023      	beq.n	80024a6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d119      	bne.n	800249c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002476:	d025      	beq.n	80024c4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002480:	d108      	bne.n	8002494 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002490:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002492:	e017      	b.n	80024c4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 faa0 	bl	80029da <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800249a:	e013      	b.n	80024c4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fdb4 	bl	800300c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80024a4:	e00e      	b.n	80024c4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fb25 	bl	8002b0c <I2C_ITMasterCplt>
 80024c2:	e000      	b.n	80024c6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80024c4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80024e4:	4b8d      	ldr	r3, [pc, #564]	; (800271c <I2C_Mem_ISR_DMA+0x244>)
 80024e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <I2C_Mem_ISR_DMA+0x1e>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e10e      	b.n	8002714 <I2C_Mem_ISR_DMA+0x23c>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d016      	beq.n	8002536 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800250e:	2b00      	cmp	r3, #0
 8002510:	d011      	beq.n	8002536 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2210      	movs	r2, #16
 8002518:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f043 0204 	orr.w	r2, r3, #4
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002526:	2120      	movs	r1, #32
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fefb 	bl	8003324 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fe83 	bl	800323a <I2C_Flush_TXDR>
 8002534:	e0e9      	b.n	800270a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00e      	beq.n	800255e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002552:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f04f 32ff 	mov.w	r2, #4294967295
 800255a:	651a      	str	r2, [r3, #80]	; 0x50
 800255c:	e0d5      	b.n	800270a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002564:	2b00      	cmp	r3, #0
 8002566:	d05f      	beq.n	8002628 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800256e:	2b00      	cmp	r3, #0
 8002570:	d05a      	beq.n	8002628 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002572:	2101      	movs	r1, #1
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 ff59 	bl	800342c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800257a:	2110      	movs	r1, #16
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fed1 	bl	8003324 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d048      	beq.n	800261e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2bff      	cmp	r3, #255	; 0xff
 8002594:	d910      	bls.n	80025b8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	22ff      	movs	r2, #255	; 0xff
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	b299      	uxth	r1, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fe85 	bl	80032c0 <I2C_TransferConfig>
 80025b6:	e011      	b.n	80025dc <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	b299      	uxth	r1, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fe72 	bl	80032c0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b22      	cmp	r3, #34	; 0x22
 80025f8:	d108      	bne.n	800260c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002608:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800260a:	e07e      	b.n	800270a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800261a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800261c:	e075      	b.n	800270a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800261e:	2140      	movs	r1, #64	; 0x40
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fcf3 	bl	800300c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002626:	e070      	b.n	800270a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d05d      	beq.n	80026ee <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002638:	2b00      	cmp	r3, #0
 800263a:	d058      	beq.n	80026ee <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800263c:	2101      	movs	r1, #1
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fef4 	bl	800342c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002644:	2110      	movs	r1, #16
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fe6c 	bl	8003324 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b22      	cmp	r3, #34	; 0x22
 8002656:	d101      	bne.n	800265c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002658:	4b31      	ldr	r3, [pc, #196]	; (8002720 <I2C_Mem_ISR_DMA+0x248>)
 800265a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2bff      	cmp	r3, #255	; 0xff
 8002664:	d910      	bls.n	8002688 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	22ff      	movs	r2, #255	; 0xff
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002670:	b299      	uxth	r1, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002676:	b2da      	uxtb	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fe1d 	bl	80032c0 <I2C_TransferConfig>
 8002686:	e011      	b.n	80026ac <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	b299      	uxth	r1, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	b2da      	uxtb	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fe0a 	bl	80032c0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b22      	cmp	r3, #34	; 0x22
 80026c8:	d108      	bne.n	80026dc <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026d8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026da:	e016      	b.n	800270a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ea:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026ec:	e00d      	b.n	800270a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fa01 	bl	8002b0c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	80002000 	.word	0x80002000
 8002720:	80002400 	.word	0x80002400

08002724 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <I2C_Slave_ISR_DMA+0x24>
 8002744:	2302      	movs	r3, #2
 8002746:	e0c0      	b.n	80028ca <I2C_Slave_ISR_DMA+0x1a6>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fa98 	bl	8002c9c <I2C_ITSlaveCplt>
 800276c:	e0a8      	b.n	80028c0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8095 	beq.w	80028a4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 808f 	beq.w	80028a4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002796:	2b00      	cmp	r3, #0
 8002798:	d07d      	beq.n	8002896 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80027b8:	2301      	movs	r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00c      	beq.n	80027de <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80027da:	2301      	movs	r3, #1
 80027dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d128      	bne.n	8002836 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b28      	cmp	r3, #40	; 0x28
 80027ee:	d108      	bne.n	8002802 <I2C_Slave_ISR_DMA+0xde>
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f6:	d104      	bne.n	8002802 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fbb2 	bl	8002f64 <I2C_ITListenCplt>
 8002800:	e048      	b.n	8002894 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b29      	cmp	r3, #41	; 0x29
 800280c:	d10e      	bne.n	800282c <I2C_Slave_ISR_DMA+0x108>
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002814:	d00a      	beq.n	800282c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2210      	movs	r2, #16
 800281c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fd0b 	bl	800323a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f915 	bl	8002a54 <I2C_ITSlaveSeqCplt>
 800282a:	e033      	b.n	8002894 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2210      	movs	r2, #16
 8002832:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002834:	e034      	b.n	80028a0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2210      	movs	r2, #16
 800283c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f043 0204 	orr.w	r2, r3, #4
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002850:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <I2C_Slave_ISR_DMA+0x13c>
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800285e:	d11f      	bne.n	80028a0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	2b21      	cmp	r3, #33	; 0x21
 8002864:	d002      	beq.n	800286c <I2C_Slave_ISR_DMA+0x148>
 8002866:	7dfb      	ldrb	r3, [r7, #23]
 8002868:	2b29      	cmp	r3, #41	; 0x29
 800286a:	d103      	bne.n	8002874 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2221      	movs	r2, #33	; 0x21
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
 8002872:	e008      	b.n	8002886 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b22      	cmp	r3, #34	; 0x22
 8002878:	d002      	beq.n	8002880 <I2C_Slave_ISR_DMA+0x15c>
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	2b2a      	cmp	r3, #42	; 0x2a
 800287e:	d102      	bne.n	8002886 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2222      	movs	r2, #34	; 0x22
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4619      	mov	r1, r3
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fbbd 	bl	800300c <I2C_ITError>
      if (treatdmanack == 1U)
 8002892:	e005      	b.n	80028a0 <I2C_Slave_ISR_DMA+0x17c>
 8002894:	e004      	b.n	80028a0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2210      	movs	r2, #16
 800289c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800289e:	e00f      	b.n	80028c0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80028a0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80028a2:	e00d      	b.n	80028c0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f809 	bl	80028d2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028e8:	2b28      	cmp	r3, #40	; 0x28
 80028ea:	d16a      	bne.n	80029c2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	0c1b      	lsrs	r3, r3, #16
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	b29b      	uxth	r3, r3
 8002906:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800290a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	b29b      	uxth	r3, r3
 8002914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002918:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	b29b      	uxth	r3, r3
 8002922:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002926:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d138      	bne.n	80029a2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002930:	897b      	ldrh	r3, [r7, #10]
 8002932:	09db      	lsrs	r3, r3, #7
 8002934:	b29a      	uxth	r2, r3
 8002936:	89bb      	ldrh	r3, [r7, #12]
 8002938:	4053      	eors	r3, r2
 800293a:	b29b      	uxth	r3, r3
 800293c:	f003 0306 	and.w	r3, r3, #6
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11c      	bne.n	800297e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002944:	897b      	ldrh	r3, [r7, #10]
 8002946:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002956:	2b02      	cmp	r3, #2
 8002958:	d13b      	bne.n	80029d2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2208      	movs	r2, #8
 8002966:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002970:	89ba      	ldrh	r2, [r7, #12]
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fa63 	bl	8001e42 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800297c:	e029      	b.n	80029d2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800297e:	893b      	ldrh	r3, [r7, #8]
 8002980:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fd50 	bl	800342c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002994:	89ba      	ldrh	r2, [r7, #12]
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fa51 	bl	8001e42 <HAL_I2C_AddrCallback>
}
 80029a0:	e017      	b.n	80029d2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fd40 	bl	800342c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029b4:	89ba      	ldrh	r2, [r7, #12]
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fa41 	bl	8001e42 <HAL_I2C_AddrCallback>
}
 80029c0:	e007      	b.n	80029d2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2208      	movs	r2, #8
 80029c8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b21      	cmp	r3, #33	; 0x21
 80029f4:	d115      	bne.n	8002a22 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2211      	movs	r2, #17
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fd0d 	bl	800342c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff f9e9 	bl	8001df2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a20:	e014      	b.n	8002a4c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2212      	movs	r2, #18
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a36:	2102      	movs	r1, #2
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fcf7 	bl	800342c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff f9dd 	bl	8001e06 <HAL_I2C_MasterRxCpltCallback>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e00c      	b.n	8002aa2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b29      	cmp	r3, #41	; 0x29
 8002aac:	d112      	bne.n	8002ad4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2228      	movs	r2, #40	; 0x28
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2221      	movs	r2, #33	; 0x21
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002abc:	2101      	movs	r1, #1
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fcb4 	bl	800342c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff f9a4 	bl	8001e1a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ad2:	e017      	b.n	8002b04 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ade:	d111      	bne.n	8002b04 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2228      	movs	r2, #40	; 0x28
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2222      	movs	r2, #34	; 0x22
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002aee:	2102      	movs	r1, #2
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fc9b 	bl	800342c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff f995 	bl	8001e2e <HAL_I2C_SlaveRxCpltCallback>
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b21      	cmp	r3, #33	; 0x21
 8002b2c:	d107      	bne.n	8002b3e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b2e:	2101      	movs	r1, #1
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fc7b 	bl	800342c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2211      	movs	r2, #17
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b3c:	e00c      	b.n	8002b58 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b22      	cmp	r3, #34	; 0x22
 8002b48:	d106      	bne.n	8002b58 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fc6d 	bl	800342c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2212      	movs	r2, #18
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b4c      	ldr	r3, [pc, #304]	; (8002c94 <I2C_ITMasterCplt+0x188>)
 8002b64:	400b      	ands	r3, r1
 8002b66:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a49      	ldr	r2, [pc, #292]	; (8002c98 <I2C_ITMasterCplt+0x18c>)
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2210      	movs	r2, #16
 8002b84:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f043 0204 	orr.w	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b60      	cmp	r3, #96	; 0x60
 8002b9c:	d10a      	bne.n	8002bb4 <I2C_ITMasterCplt+0xa8>
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fb40 	bl	800323a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d002      	beq.n	8002bd2 <I2C_ITMasterCplt+0xc6>
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d006      	beq.n	8002be0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fa17 	bl	800300c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bde:	e054      	b.n	8002c8a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b21      	cmp	r3, #33	; 0x21
 8002bea:	d124      	bne.n	8002c36 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d10b      	bne.n	8002c1e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff f92b 	bl	8001e72 <HAL_I2C_MemTxCpltCallback>
}
 8002c1c:	e035      	b.n	8002c8a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff f8df 	bl	8001df2 <HAL_I2C_MasterTxCpltCallback>
}
 8002c34:	e029      	b.n	8002c8a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b22      	cmp	r3, #34	; 0x22
 8002c40:	d123      	bne.n	8002c8a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d10b      	bne.n	8002c74 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff f90a 	bl	8001e86 <HAL_I2C_MemRxCpltCallback>
}
 8002c72:	e00a      	b.n	8002c8a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff f8be 	bl	8001e06 <HAL_I2C_MasterRxCpltCallback>
}
 8002c8a:	bf00      	nop
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	fe00e800 	.word	0xfe00e800
 8002c98:	ffff0000 	.word	0xffff0000

08002c9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cc8:	7afb      	ldrb	r3, [r7, #11]
 8002cca:	2b21      	cmp	r3, #33	; 0x21
 8002ccc:	d002      	beq.n	8002cd4 <I2C_ITSlaveCplt+0x38>
 8002cce:	7afb      	ldrb	r3, [r7, #11]
 8002cd0:	2b29      	cmp	r3, #41	; 0x29
 8002cd2:	d108      	bne.n	8002ce6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002cd4:	f248 0101 	movw	r1, #32769	; 0x8001
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fba7 	bl	800342c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2221      	movs	r2, #33	; 0x21
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce4:	e019      	b.n	8002d1a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ce6:	7afb      	ldrb	r3, [r7, #11]
 8002ce8:	2b22      	cmp	r3, #34	; 0x22
 8002cea:	d002      	beq.n	8002cf2 <I2C_ITSlaveCplt+0x56>
 8002cec:	7afb      	ldrb	r3, [r7, #11]
 8002cee:	2b2a      	cmp	r3, #42	; 0x2a
 8002cf0:	d108      	bne.n	8002d04 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002cf2:	f248 0102 	movw	r1, #32770	; 0x8002
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fb98 	bl	800342c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2222      	movs	r2, #34	; 0x22
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
 8002d02:	e00a      	b.n	8002d1a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002d04:	7afb      	ldrb	r3, [r7, #11]
 8002d06:	2b28      	cmp	r3, #40	; 0x28
 8002d08:	d107      	bne.n	8002d1a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002d0a:	f248 0103 	movw	r1, #32771	; 0x8003
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fb8c 	bl	800342c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d28:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b89      	ldr	r3, [pc, #548]	; (8002f5c <I2C_ITSlaveCplt+0x2c0>)
 8002d36:	400b      	ands	r3, r1
 8002d38:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa7d 	bl	800323a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d013      	beq.n	8002d72 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01f      	beq.n	8002da2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d70:	e017      	b.n	8002da2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d012      	beq.n	8002da2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d8a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00c      	beq.n	8002dee <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f043 0204 	orr.w	r2, r3, #4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d049      	beq.n	8002ea2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d044      	beq.n	8002ea2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d128      	bne.n	8002e74 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b28      	cmp	r3, #40	; 0x28
 8002e2c:	d108      	bne.n	8002e40 <I2C_ITSlaveCplt+0x1a4>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e34:	d104      	bne.n	8002e40 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e36:	6979      	ldr	r1, [r7, #20]
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f893 	bl	8002f64 <I2C_ITListenCplt>
 8002e3e:	e030      	b.n	8002ea2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b29      	cmp	r3, #41	; 0x29
 8002e4a:	d10e      	bne.n	8002e6a <I2C_ITSlaveCplt+0x1ce>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e52:	d00a      	beq.n	8002e6a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f9ec 	bl	800323a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fdf6 	bl	8002a54 <I2C_ITSlaveSeqCplt>
 8002e68:	e01b      	b.n	8002ea2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2210      	movs	r2, #16
 8002e70:	61da      	str	r2, [r3, #28]
 8002e72:	e016      	b.n	8002ea2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2210      	movs	r2, #16
 8002e7a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f043 0204 	orr.w	r2, r3, #4
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <I2C_ITSlaveCplt+0x1fa>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e94:	d105      	bne.n	8002ea2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f8b5 	bl	800300c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8a4 	bl	800300c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b28      	cmp	r3, #40	; 0x28
 8002ece:	d141      	bne.n	8002f54 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ed0:	6979      	ldr	r1, [r7, #20]
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f846 	bl	8002f64 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ed8:	e03c      	b.n	8002f54 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee2:	d014      	beq.n	8002f0e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff fdb5 	bl	8002a54 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <I2C_ITSlaveCplt+0x2c4>)
 8002eee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe ffa9 	bl	8001e5e <HAL_I2C_ListenCpltCallback>
}
 8002f0c:	e022      	b.n	8002f54 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b22      	cmp	r3, #34	; 0x22
 8002f18:	d10e      	bne.n	8002f38 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fe ff7c 	bl	8001e2e <HAL_I2C_SlaveRxCpltCallback>
}
 8002f36:	e00d      	b.n	8002f54 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe ff63 	bl	8001e1a <HAL_I2C_SlaveTxCpltCallback>
}
 8002f54:	bf00      	nop
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	fe00e800 	.word	0xfe00e800
 8002f60:	ffff0000 	.word	0xffff0000

08002f64 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a25      	ldr	r2, [pc, #148]	; (8003008 <I2C_ITListenCplt+0xa4>)
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d022      	beq.n	8002fe0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d012      	beq.n	8002fe0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fe0:	f248 0103 	movw	r1, #32771	; 0x8003
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fa21 	bl	800342c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2210      	movs	r2, #16
 8002ff0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe ff2f 	bl	8001e5e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	ffff0000 	.word	0xffff0000

0800300c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a6d      	ldr	r2, [pc, #436]	; (80031e0 <I2C_ITError+0x1d4>)
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b28      	cmp	r3, #40	; 0x28
 8003042:	d005      	beq.n	8003050 <I2C_ITError+0x44>
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b29      	cmp	r3, #41	; 0x29
 8003048:	d002      	beq.n	8003050 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b2a      	cmp	r3, #42	; 0x2a
 800304e:	d10b      	bne.n	8003068 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003050:	2103      	movs	r1, #3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f9ea 	bl	800342c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2228      	movs	r2, #40	; 0x28
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a60      	ldr	r2, [pc, #384]	; (80031e4 <I2C_ITError+0x1d8>)
 8003064:	635a      	str	r2, [r3, #52]	; 0x34
 8003066:	e030      	b.n	80030ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003068:	f248 0103 	movw	r1, #32771	; 0x8003
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f9dd 	bl	800342c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8e1 	bl	800323a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b60      	cmp	r3, #96	; 0x60
 8003082:	d01f      	beq.n	80030c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b20      	cmp	r3, #32
 8003098:	d114      	bne.n	80030c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d109      	bne.n	80030bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2210      	movs	r2, #16
 80030ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f043 0204 	orr.w	r2, r3, #4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2220      	movs	r2, #32
 80030c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d039      	beq.n	800314c <I2C_ITError+0x140>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b11      	cmp	r3, #17
 80030dc:	d002      	beq.n	80030e4 <I2C_ITError+0xd8>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b21      	cmp	r3, #33	; 0x21
 80030e2:	d133      	bne.n	800314c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f2:	d107      	bne.n	8003104 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003102:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fa25 	bl	8001558 <HAL_DMA_GetState>
 800310e:	4603      	mov	r3, r0
 8003110:	2b01      	cmp	r3, #1
 8003112:	d017      	beq.n	8003144 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	4a33      	ldr	r2, [pc, #204]	; (80031e8 <I2C_ITError+0x1dc>)
 800311a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe f8ff 	bl	800132c <HAL_DMA_Abort_IT>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d04d      	beq.n	80031d0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800313e:	4610      	mov	r0, r2
 8003140:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003142:	e045      	b.n	80031d0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f851 	bl	80031ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800314a:	e041      	b.n	80031d0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d039      	beq.n	80031c8 <I2C_ITError+0x1bc>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b12      	cmp	r3, #18
 8003158:	d002      	beq.n	8003160 <I2C_ITError+0x154>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b22      	cmp	r3, #34	; 0x22
 800315e:	d133      	bne.n	80031c8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800316a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316e:	d107      	bne.n	8003180 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800317e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe f9e7 	bl	8001558 <HAL_DMA_GetState>
 800318a:	4603      	mov	r3, r0
 800318c:	2b01      	cmp	r3, #1
 800318e:	d017      	beq.n	80031c0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <I2C_ITError+0x1dc>)
 8003196:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe f8c1 	bl	800132c <HAL_DMA_Abort_IT>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d011      	beq.n	80031d4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031ba:	4610      	mov	r0, r2
 80031bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031be:	e009      	b.n	80031d4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f813 	bl	80031ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031c6:	e005      	b.n	80031d4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f80f 	bl	80031ec <I2C_TreatErrorCallback>
  }
}
 80031ce:	e002      	b.n	80031d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031d0:	bf00      	nop
 80031d2:	e000      	b.n	80031d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031d4:	bf00      	nop
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	ffff0000 	.word	0xffff0000
 80031e4:	08002111 	.word	0x08002111
 80031e8:	08003283 	.word	0x08003283

080031ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b60      	cmp	r3, #96	; 0x60
 80031fe:	d10e      	bne.n	800321e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fe fe49 	bl	8001eae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800321c:	e009      	b.n	8003232 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fe fe34 	bl	8001e9a <HAL_I2C_ErrorCallback>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b02      	cmp	r3, #2
 800324e:	d103      	bne.n	8003258 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2200      	movs	r2, #0
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d007      	beq.n	8003276 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	619a      	str	r2, [r3, #24]
  }
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	2200      	movs	r2, #0
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	2200      	movs	r2, #0
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f7ff ff9b 	bl	80031ec <I2C_TreatErrorCallback>
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	817b      	strh	r3, [r7, #10]
 80032ce:	4613      	mov	r3, r2
 80032d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032d2:	897b      	ldrh	r3, [r7, #10]
 80032d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032d8:	7a7b      	ldrb	r3, [r7, #9]
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	0d5b      	lsrs	r3, r3, #21
 80032fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <I2C_TransferConfig+0x60>)
 8003300:	430b      	orrs	r3, r1
 8003302:	43db      	mvns	r3, r3
 8003304:	ea02 0103 	and.w	r1, r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	03ff63ff 	.word	0x03ff63ff

08003324 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003338:	4a39      	ldr	r2, [pc, #228]	; (8003420 <I2C_Enable_IRQ+0xfc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d032      	beq.n	80033a4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003342:	4a38      	ldr	r2, [pc, #224]	; (8003424 <I2C_Enable_IRQ+0x100>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d02d      	beq.n	80033a4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800334c:	4a36      	ldr	r2, [pc, #216]	; (8003428 <I2C_Enable_IRQ+0x104>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d028      	beq.n	80033a4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003352:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003356:	2b00      	cmp	r3, #0
 8003358:	da03      	bge.n	8003362 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003360:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003372:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003384:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	2b10      	cmp	r3, #16
 800338a:	d103      	bne.n	8003394 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003392:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003394:	887b      	ldrh	r3, [r7, #2]
 8003396:	2b20      	cmp	r3, #32
 8003398:	d133      	bne.n	8003402 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80033a2:	e02e      	b.n	8003402 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80033a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da03      	bge.n	80033b4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80033b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80033c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80033d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d103      	bne.n	80033e6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80033e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d103      	bne.n	80033f4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033f2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d103      	bne.n	8003402 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003400:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6819      	ldr	r1, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	08002303 	.word	0x08002303
 8003424:	08002725 	.word	0x08002725
 8003428:	080024d9 	.word	0x080024d9

0800342c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00f      	beq.n	8003466 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800344c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800345a:	2b28      	cmp	r3, #40	; 0x28
 800345c:	d003      	beq.n	8003466 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003464:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00f      	beq.n	8003490 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003476:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003484:	2b28      	cmp	r3, #40	; 0x28
 8003486:	d003      	beq.n	8003490 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800348e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003490:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003494:	2b00      	cmp	r3, #0
 8003496:	da03      	bge.n	80034a0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800349e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d103      	bne.n	80034ae <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80034ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d103      	bne.n	80034bc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f043 0320 	orr.w	r3, r3, #32
 80034ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d103      	bne.n	80034ca <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43da      	mvns	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	400a      	ands	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d138      	bne.n	8003570 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003508:	2302      	movs	r3, #2
 800350a:	e032      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800353a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b20      	cmp	r3, #32
 8003592:	d139      	bne.n	8003608 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800359e:	2302      	movs	r3, #2
 80035a0:	e033      	b.n	800360a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2224      	movs	r2, #36	; 0x24
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d141      	bne.n	80036aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003626:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003632:	d131      	bne.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003634:	4b47      	ldr	r3, [pc, #284]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363a:	4a46      	ldr	r2, [pc, #280]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003640:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800364c:	4a41      	ldr	r2, [pc, #260]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003652:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003654:	4b40      	ldr	r3, [pc, #256]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2232      	movs	r2, #50	; 0x32
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	4a3f      	ldr	r2, [pc, #252]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	0c9b      	lsrs	r3, r3, #18
 8003666:	3301      	adds	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800366a:	e002      	b.n	8003672 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3b01      	subs	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367e:	d102      	bne.n	8003686 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f2      	bne.n	800366c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003686:	4b33      	ldr	r3, [pc, #204]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003692:	d158      	bne.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e057      	b.n	8003748 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003698:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369e:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036a8:	e04d      	b.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b0:	d141      	bne.n	8003736 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036b2:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036be:	d131      	bne.n	8003724 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c6:	4a23      	ldr	r2, [pc, #140]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036d0:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036d8:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2232      	movs	r2, #50	; 0x32
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	0c9b      	lsrs	r3, r3, #18
 80036f2:	3301      	adds	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f6:	e002      	b.n	80036fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370a:	d102      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f2      	bne.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371e:	d112      	bne.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e011      	b.n	8003748 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800372a:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003730:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003734:	e007      	b.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003744:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40007000 	.word	0x40007000
 8003758:	20000004 	.word	0x20000004
 800375c:	431bde83 	.word	0x431bde83

08003760 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800376a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800376e:	6093      	str	r3, [r2, #8]
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40007000 	.word	0x40007000

08003780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e2fe      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d075      	beq.n	800388a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379e:	4b97      	ldr	r3, [pc, #604]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a8:	4b94      	ldr	r3, [pc, #592]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d102      	bne.n	80037be <HAL_RCC_OscConfig+0x3e>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d002      	beq.n	80037c4 <HAL_RCC_OscConfig+0x44>
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d10b      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	4b8d      	ldr	r3, [pc, #564]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05b      	beq.n	8003888 <HAL_RCC_OscConfig+0x108>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d157      	bne.n	8003888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e2d9      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d106      	bne.n	80037f4 <HAL_RCC_OscConfig+0x74>
 80037e6:	4b85      	ldr	r3, [pc, #532]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a84      	ldr	r2, [pc, #528]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x98>
 80037fe:	4b7f      	ldr	r3, [pc, #508]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a7e      	ldr	r2, [pc, #504]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7b      	ldr	r2, [pc, #492]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 8003818:	4b78      	ldr	r3, [pc, #480]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a77      	ldr	r2, [pc, #476]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b75      	ldr	r3, [pc, #468]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a74      	ldr	r2, [pc, #464]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd fb92 	bl	8000f60 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fd fb8e 	bl	8000f60 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e29e      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003852:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xc0>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fd fb7e 	bl	8000f60 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fd fb7a 	bl	8000f60 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e28a      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387a:	4b60      	ldr	r3, [pc, #384]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0xe8>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d075      	beq.n	8003982 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003896:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a0:	4b56      	ldr	r3, [pc, #344]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	d102      	bne.n	80038b6 <HAL_RCC_OscConfig+0x136>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d002      	beq.n	80038bc <HAL_RCC_OscConfig+0x13c>
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d11f      	bne.n	80038fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038bc:	4b4f      	ldr	r3, [pc, #316]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_OscConfig+0x154>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e25d      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b49      	ldr	r3, [pc, #292]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	4946      	ldr	r1, [pc, #280]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038e8:	4b45      	ldr	r3, [pc, #276]	; (8003a00 <HAL_RCC_OscConfig+0x280>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd faeb 	bl	8000ec8 <HAL_InitTick>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d043      	beq.n	8003980 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e249      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d023      	beq.n	800394c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a3c      	ldr	r2, [pc, #240]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fb26 	bl	8000f60 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003918:	f7fd fb22 	bl	8000f60 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e232      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003936:	4b31      	ldr	r3, [pc, #196]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	492d      	ldr	r1, [pc, #180]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
 800394a:	e01a      	b.n	8003982 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd fb02 	bl	8000f60 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003960:	f7fd fafe 	bl	8000f60 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e20e      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x1e0>
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003980:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d041      	beq.n	8003a12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01c      	beq.n	80039d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003996:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399c:	4a17      	ldr	r2, [pc, #92]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7fd fadb 	bl	8000f60 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fd fad7 	bl	8000f60 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e1e7      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80039c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ef      	beq.n	80039ae <HAL_RCC_OscConfig+0x22e>
 80039ce:	e020      	b.n	8003a12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fd fabe 	bl	8000f60 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e6:	e00d      	b.n	8003a04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e8:	f7fd faba 	bl	8000f60 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d906      	bls.n	8003a04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1ca      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a04:	4b8c      	ldr	r3, [pc, #560]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ea      	bne.n	80039e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80a6 	beq.w	8003b6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a20:	2300      	movs	r3, #0
 8003a22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a24:	4b84      	ldr	r3, [pc, #528]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_OscConfig+0x2b4>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x2b6>
 8003a34:	2300      	movs	r3, #0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	4b7f      	ldr	r3, [pc, #508]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	4a7e      	ldr	r2, [pc, #504]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
 8003a46:	4b7c      	ldr	r3, [pc, #496]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a52:	2301      	movs	r3, #1
 8003a54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a56:	4b79      	ldr	r3, [pc, #484]	; (8003c3c <HAL_RCC_OscConfig+0x4bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d118      	bne.n	8003a94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a62:	4b76      	ldr	r3, [pc, #472]	; (8003c3c <HAL_RCC_OscConfig+0x4bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a75      	ldr	r2, [pc, #468]	; (8003c3c <HAL_RCC_OscConfig+0x4bc>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fa77 	bl	8000f60 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a76:	f7fd fa73 	bl	8000f60 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e183      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a88:	4b6c      	ldr	r3, [pc, #432]	; (8003c3c <HAL_RCC_OscConfig+0x4bc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d108      	bne.n	8003aae <HAL_RCC_OscConfig+0x32e>
 8003a9c:	4b66      	ldr	r3, [pc, #408]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	4a65      	ldr	r2, [pc, #404]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aac:	e024      	b.n	8003af8 <HAL_RCC_OscConfig+0x378>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d110      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x358>
 8003ab6:	4b60      	ldr	r3, [pc, #384]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	4a5e      	ldr	r2, [pc, #376]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac6:	4b5c      	ldr	r3, [pc, #368]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	4a5a      	ldr	r2, [pc, #360]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad6:	e00f      	b.n	8003af8 <HAL_RCC_OscConfig+0x378>
 8003ad8:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a56      	ldr	r2, [pc, #344]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d016      	beq.n	8003b2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fd fa2e 	bl	8000f60 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fd fa2a 	bl	8000f60 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e138      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1e:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ed      	beq.n	8003b08 <HAL_RCC_OscConfig+0x388>
 8003b2c:	e015      	b.n	8003b5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fa17 	bl	8000f60 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7fd fa13 	bl	8000f60 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e121      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ed      	bne.n	8003b36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b5a:	7ffb      	ldrb	r3, [r7, #31]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b60:	4b35      	ldr	r3, [pc, #212]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	4a34      	ldr	r2, [pc, #208]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d03c      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01c      	beq.n	8003bba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fd f9e6 	bl	8000f60 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b98:	f7fd f9e2 	bl	8000f60 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0f2      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ef      	beq.n	8003b98 <HAL_RCC_OscConfig+0x418>
 8003bb8:	e01b      	b.n	8003bf2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bba:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bca:	f7fd f9c9 	bl	8000f60 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd2:	f7fd f9c5 	bl	8000f60 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e0d5      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be4:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1ef      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80c9 	beq.w	8003d8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	f000 8083 	beq.w	8003d10 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d15e      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1e:	f7fd f99f 	bl	8000f60 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c24:	e00c      	b.n	8003c40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fd f99b 	bl	8000f60 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d905      	bls.n	8003c40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0ab      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c40:	4b55      	ldr	r3, [pc, #340]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ec      	bne.n	8003c26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c4c:	4b52      	ldr	r3, [pc, #328]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	4b52      	ldr	r3, [pc, #328]	; (8003d9c <HAL_RCC_OscConfig+0x61c>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a11      	ldr	r1, [r2, #32]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c5c:	3a01      	subs	r2, #1
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	4311      	orrs	r1, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c66:	0212      	lsls	r2, r2, #8
 8003c68:	4311      	orrs	r1, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c6e:	0852      	lsrs	r2, r2, #1
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0552      	lsls	r2, r2, #21
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c7a:	0852      	lsrs	r2, r2, #1
 8003c7c:	3a01      	subs	r2, #1
 8003c7e:	0652      	lsls	r2, r2, #25
 8003c80:	4311      	orrs	r1, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c86:	06d2      	lsls	r2, r2, #27
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	4943      	ldr	r1, [pc, #268]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c90:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a40      	ldr	r2, [pc, #256]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c9c:	4b3e      	ldr	r3, [pc, #248]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a3d      	ldr	r2, [pc, #244]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd f95a 	bl	8000f60 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd f956 	bl	8000f60 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e066      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc2:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x530>
 8003cce:	e05e      	b.n	8003d8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd0:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a30      	ldr	r2, [pc, #192]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd f940 	bl	8000f60 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7fd f93c 	bl	8000f60 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e04c      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf6:	4b28      	ldr	r3, [pc, #160]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d02:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	4924      	ldr	r1, [pc, #144]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003d08:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <HAL_RCC_OscConfig+0x620>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	60cb      	str	r3, [r1, #12]
 8003d0e:	e03e      	b.n	8003d8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e039      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <HAL_RCC_OscConfig+0x618>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0203 	and.w	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d12c      	bne.n	8003d8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d123      	bne.n	8003d8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d11b      	bne.n	8003d8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d113      	bne.n	8003d8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d109      	bne.n	8003d8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	3b01      	subs	r3, #1
 8003d84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d001      	beq.n	8003d8e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	019f800c 	.word	0x019f800c
 8003da0:	feeefffc 	.word	0xfeeefffc

08003da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e11e      	b.n	8003ffa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b91      	ldr	r3, [pc, #580]	; (8004004 <HAL_RCC_ClockConfig+0x260>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d910      	bls.n	8003dec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b8e      	ldr	r3, [pc, #568]	; (8004004 <HAL_RCC_ClockConfig+0x260>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 020f 	bic.w	r2, r3, #15
 8003dd2:	498c      	ldr	r1, [pc, #560]	; (8004004 <HAL_RCC_ClockConfig+0x260>)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b8a      	ldr	r3, [pc, #552]	; (8004004 <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e106      	b.n	8003ffa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d073      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d129      	bne.n	8003e54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e00:	4b81      	ldr	r3, [pc, #516]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0f4      	b.n	8003ffa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e10:	f000 f99e 	bl	8004150 <RCC_GetSysClockFreqFromPLLSource>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4a7c      	ldr	r2, [pc, #496]	; (800400c <HAL_RCC_ClockConfig+0x268>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d93f      	bls.n	8003e9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e1e:	4b7a      	ldr	r3, [pc, #488]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d033      	beq.n	8003e9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d12f      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e3e:	4b72      	ldr	r3, [pc, #456]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e46:	4a70      	ldr	r2, [pc, #448]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e024      	b.n	8003e9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e5c:	4b6a      	ldr	r3, [pc, #424]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0c6      	b.n	8003ffa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e6c:	4b66      	ldr	r3, [pc, #408]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0be      	b.n	8003ffa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e7c:	f000 f8ce 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4a61      	ldr	r2, [pc, #388]	; (800400c <HAL_RCC_ClockConfig+0x268>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d909      	bls.n	8003e9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e8a:	4b5f      	ldr	r3, [pc, #380]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e92:	4a5d      	ldr	r2, [pc, #372]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e9e:	4b5a      	ldr	r3, [pc, #360]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f023 0203 	bic.w	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4957      	ldr	r1, [pc, #348]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb0:	f7fd f856 	bl	8000f60 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	e00a      	b.n	8003ece <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb8:	f7fd f852 	bl	8000f60 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e095      	b.n	8003ffa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ece:	4b4e      	ldr	r3, [pc, #312]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 020c 	and.w	r2, r3, #12
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d1eb      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d023      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef8:	4b43      	ldr	r3, [pc, #268]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a42      	ldr	r2, [pc, #264]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f10:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f18:	4a3b      	ldr	r2, [pc, #236]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b39      	ldr	r3, [pc, #228]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4936      	ldr	r1, [pc, #216]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d105      	bne.n	8003f46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f3a:	4b33      	ldr	r3, [pc, #204]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4a32      	ldr	r2, [pc, #200]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003f40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f46:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <HAL_RCC_ClockConfig+0x260>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d21d      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_RCC_ClockConfig+0x260>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 020f 	bic.w	r2, r3, #15
 8003f5c:	4929      	ldr	r1, [pc, #164]	; (8004004 <HAL_RCC_ClockConfig+0x260>)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f64:	f7fc fffc 	bl	8000f60 <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6c:	f7fc fff8 	bl	8000f60 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e03b      	b.n	8003ffa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_RCC_ClockConfig+0x260>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d1ed      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4917      	ldr	r1, [pc, #92]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	490f      	ldr	r1, [pc, #60]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fce:	f000 f825 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	490c      	ldr	r1, [pc, #48]	; (8004010 <HAL_RCC_ClockConfig+0x26c>)
 8003fe0:	5ccb      	ldrb	r3, [r1, r3]
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <HAL_RCC_ClockConfig+0x270>)
 8003fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <HAL_RCC_ClockConfig+0x274>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc ff68 	bl	8000ec8 <HAL_InitTick>
 8003ff8:	4603      	mov	r3, r0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40022000 	.word	0x40022000
 8004008:	40021000 	.word	0x40021000
 800400c:	04c4b400 	.word	0x04c4b400
 8004010:	08005cf4 	.word	0x08005cf4
 8004014:	20000004 	.word	0x20000004
 8004018:	20000008 	.word	0x20000008

0800401c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004022:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b04      	cmp	r3, #4
 800402c:	d102      	bne.n	8004034 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800402e:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	e047      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004034:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b08      	cmp	r3, #8
 800403e:	d102      	bne.n	8004046 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004040:	4b26      	ldr	r3, [pc, #152]	; (80040dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	e03e      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d136      	bne.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800405c:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	3301      	adds	r3, #1
 8004068:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d10c      	bne.n	800408a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004070:	4a1a      	ldr	r2, [pc, #104]	; (80040dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	4a16      	ldr	r2, [pc, #88]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800407a:	68d2      	ldr	r2, [r2, #12]
 800407c:	0a12      	lsrs	r2, r2, #8
 800407e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	617b      	str	r3, [r7, #20]
      break;
 8004088:	e00c      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800408a:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004094:	68d2      	ldr	r2, [r2, #12]
 8004096:	0a12      	lsrs	r2, r2, #8
 8004098:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800409c:	fb02 f303 	mul.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]
      break;
 80040a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	0e5b      	lsrs	r3, r3, #25
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	3301      	adds	r3, #1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	e001      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040c4:	693b      	ldr	r3, [r7, #16]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
 80040d8:	00f42400 	.word	0x00f42400
 80040dc:	016e3600 	.word	0x016e3600

080040e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e4:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040e6:	681b      	ldr	r3, [r3, #0]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20000004 	.word	0x20000004

080040f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040fc:	f7ff fff0 	bl	80040e0 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4904      	ldr	r1, [pc, #16]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	08005d04 	.word	0x08005d04

08004124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004128:	f7ff ffda 	bl	80040e0 <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0adb      	lsrs	r3, r3, #11
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4904      	ldr	r1, [pc, #16]	; (800414c <HAL_RCC_GetPCLK2Freq+0x28>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	08005d04 	.word	0x08005d04

08004150 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	3301      	adds	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d10c      	bne.n	800418e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004174:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	fbb2 f3f3 	udiv	r3, r2, r3
 800417c:	4a14      	ldr	r2, [pc, #80]	; (80041d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800417e:	68d2      	ldr	r2, [r2, #12]
 8004180:	0a12      	lsrs	r2, r2, #8
 8004182:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	617b      	str	r3, [r7, #20]
    break;
 800418c:	e00c      	b.n	80041a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800418e:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004198:	68d2      	ldr	r2, [r2, #12]
 800419a:	0a12      	lsrs	r2, r2, #8
 800419c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041a0:	fb02 f303 	mul.w	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
    break;
 80041a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	0e5b      	lsrs	r3, r3, #25
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	3301      	adds	r3, #1
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041c2:	687b      	ldr	r3, [r7, #4]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40021000 	.word	0x40021000
 80041d4:	016e3600 	.word	0x016e3600
 80041d8:	00f42400 	.word	0x00f42400

080041dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041e4:	2300      	movs	r3, #0
 80041e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041e8:	2300      	movs	r3, #0
 80041ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8098 	beq.w	800432a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fe:	4b43      	ldr	r3, [pc, #268]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10d      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	4b40      	ldr	r3, [pc, #256]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	4a3f      	ldr	r2, [pc, #252]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004214:	6593      	str	r3, [r2, #88]	; 0x58
 8004216:	4b3d      	ldr	r3, [pc, #244]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004222:	2301      	movs	r3, #1
 8004224:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004226:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a39      	ldr	r2, [pc, #228]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004230:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004232:	f7fc fe95 	bl	8000f60 <HAL_GetTick>
 8004236:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004238:	e009      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423a:	f7fc fe91 	bl	8000f60 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d902      	bls.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	74fb      	strb	r3, [r7, #19]
        break;
 800424c:	e005      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800424e:	4b30      	ldr	r3, [pc, #192]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ef      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800425a:	7cfb      	ldrb	r3, [r7, #19]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d159      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004260:	4b2a      	ldr	r3, [pc, #168]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01e      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	429a      	cmp	r2, r3
 800427a:	d019      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800427c:	4b23      	ldr	r3, [pc, #140]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004288:	4b20      	ldr	r3, [pc, #128]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	4a1f      	ldr	r2, [pc, #124]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004298:	4b1c      	ldr	r3, [pc, #112]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429e:	4a1b      	ldr	r2, [pc, #108]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042a8:	4a18      	ldr	r2, [pc, #96]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7fc fe51 	bl	8000f60 <HAL_GetTick>
 80042be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c0:	e00b      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fc fe4d 	bl	8000f60 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d902      	bls.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	74fb      	strb	r3, [r7, #19]
            break;
 80042d8:	e006      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ec      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fc:	4903      	ldr	r1, [pc, #12]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004304:	e008      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	74bb      	strb	r3, [r7, #18]
 800430a:	e005      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800430c:	40021000 	.word	0x40021000
 8004310:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	7cfb      	ldrb	r3, [r7, #19]
 8004316:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004318:	7c7b      	ldrb	r3, [r7, #17]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431e:	4ba7      	ldr	r3, [pc, #668]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004322:	4aa6      	ldr	r2, [pc, #664]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004328:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004336:	4ba1      	ldr	r3, [pc, #644]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	f023 0203 	bic.w	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	499d      	ldr	r1, [pc, #628]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004358:	4b98      	ldr	r3, [pc, #608]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435e:	f023 020c 	bic.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	4995      	ldr	r1, [pc, #596]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800437a:	4b90      	ldr	r3, [pc, #576]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	498c      	ldr	r1, [pc, #560]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800439c:	4b87      	ldr	r3, [pc, #540]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	4984      	ldr	r1, [pc, #528]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043be:	4b7f      	ldr	r3, [pc, #508]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	497b      	ldr	r1, [pc, #492]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043e0:	4b76      	ldr	r3, [pc, #472]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	4973      	ldr	r1, [pc, #460]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004402:	4b6e      	ldr	r3, [pc, #440]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	496a      	ldr	r1, [pc, #424]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004424:	4b65      	ldr	r3, [pc, #404]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	4962      	ldr	r1, [pc, #392]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004446:	4b5d      	ldr	r3, [pc, #372]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	4959      	ldr	r1, [pc, #356]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004468:	4b54      	ldr	r3, [pc, #336]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446e:	f023 0203 	bic.w	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	4951      	ldr	r1, [pc, #324]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800448a:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	4948      	ldr	r1, [pc, #288]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d015      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ac:	4b43      	ldr	r3, [pc, #268]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4940      	ldr	r1, [pc, #256]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ca:	d105      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044cc:	4b3b      	ldr	r3, [pc, #236]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a3a      	ldr	r2, [pc, #232]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d015      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044e4:	4b35      	ldr	r3, [pc, #212]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	4932      	ldr	r1, [pc, #200]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004502:	d105      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004504:	4b2d      	ldr	r3, [pc, #180]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a2c      	ldr	r2, [pc, #176]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d015      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800451c:	4b27      	ldr	r3, [pc, #156]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	4924      	ldr	r1, [pc, #144]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800453a:	d105      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800453c:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004546:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d015      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004554:	4b19      	ldr	r3, [pc, #100]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	4916      	ldr	r1, [pc, #88]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004572:	d105      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004574:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a10      	ldr	r2, [pc, #64]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d019      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	4908      	ldr	r1, [pc, #32]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045aa:	d109      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a02      	ldr	r2, [pc, #8]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b6:	60d3      	str	r3, [r2, #12]
 80045b8:	e002      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d015      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045cc:	4b29      	ldr	r3, [pc, #164]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	4926      	ldr	r1, [pc, #152]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ea:	d105      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045ec:	4b21      	ldr	r3, [pc, #132]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4a20      	ldr	r2, [pc, #128]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d015      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004612:	4918      	ldr	r1, [pc, #96]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d105      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a12      	ldr	r2, [pc, #72]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800462a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d015      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464a:	490a      	ldr	r1, [pc, #40]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800465a:	d105      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4a04      	ldr	r2, [pc, #16]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004666:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004668:	7cbb      	ldrb	r3, [r7, #18]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000

08004678 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e09d      	b.n	80047c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	2b00      	cmp	r3, #0
 8004690:	d108      	bne.n	80046a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469a:	d009      	beq.n	80046b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	61da      	str	r2, [r3, #28]
 80046a2:	e005      	b.n	80046b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc faf8 	bl	8000cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046f0:	d902      	bls.n	80046f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	e002      	b.n	80046fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004706:	d007      	beq.n	8004718 <HAL_SPI_Init+0xa0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004710:	d002      	beq.n	8004718 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	ea42 0103 	orr.w	r1, r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	0c1b      	lsrs	r3, r3, #16
 8004774:	f003 0204 	and.w	r2, r3, #4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004794:	ea42 0103 	orr.w	r1, r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b088      	sub	sp, #32
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_SPI_Transmit+0x22>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e15f      	b.n	8004ab0 <HAL_SPI_Transmit+0x2e2>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047f8:	f7fc fbb2 	bl	8000f60 <HAL_GetTick>
 80047fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800480e:	2302      	movs	r3, #2
 8004810:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004812:	e148      	b.n	8004aa6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_SPI_Transmit+0x52>
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004824:	e13f      	b.n	8004aa6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2203      	movs	r2, #3
 800482a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	88fa      	ldrh	r2, [r7, #6]
 800483e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004870:	d10f      	bne.n	8004892 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004880:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004890:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d007      	beq.n	80048b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048b8:	d94f      	bls.n	800495a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_SPI_Transmit+0xfa>
 80048c2:	8afb      	ldrh	r3, [r7, #22]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d142      	bne.n	800494e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	881a      	ldrh	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	1c9a      	adds	r2, r3, #2
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048ec:	e02f      	b.n	800494e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d112      	bne.n	8004922 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	881a      	ldrh	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	1c9a      	adds	r2, r3, #2
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004920:	e015      	b.n	800494e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004922:	f7fc fb1d 	bl	8000f60 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d803      	bhi.n	800493a <HAL_SPI_Transmit+0x16c>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d102      	bne.n	8004940 <HAL_SPI_Transmit+0x172>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800494c:	e0ab      	b.n	8004aa6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ca      	bne.n	80048ee <HAL_SPI_Transmit+0x120>
 8004958:	e080      	b.n	8004a5c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_Transmit+0x19a>
 8004962:	8afb      	ldrh	r3, [r7, #22]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d174      	bne.n	8004a52 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d912      	bls.n	8004998 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	881a      	ldrh	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	1c9a      	adds	r2, r3, #2
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b02      	subs	r3, #2
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004996:	e05c      	b.n	8004a52 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	7812      	ldrb	r2, [r2, #0]
 80049a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80049be:	e048      	b.n	8004a52 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d12b      	bne.n	8004a26 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d912      	bls.n	80049fe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	881a      	ldrh	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	1c9a      	adds	r2, r3, #2
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b02      	subs	r3, #2
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049fc:	e029      	b.n	8004a52 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a24:	e015      	b.n	8004a52 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a26:	f7fc fa9b 	bl	8000f60 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d803      	bhi.n	8004a3e <HAL_SPI_Transmit+0x270>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d102      	bne.n	8004a44 <HAL_SPI_Transmit+0x276>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d106      	bne.n	8004a52 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004a50:	e029      	b.n	8004aa6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1b1      	bne.n	80049c0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fa5b 	bl	8004f1c <SPI_EndRxTxTransaction>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e003      	b.n	8004aa6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004aae:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3720      	adds	r7, #32
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10e      	bne.n	8004af8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
    return;
 8004af6:	e0ce      	b.n	8004c96 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_SPI_IRQHandler+0x5e>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
    return;
 8004b14:	e0bf      	b.n	8004c96 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <HAL_SPI_IRQHandler+0x7e>
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80b0 	beq.w	8004c96 <HAL_SPI_IRQHandler+0x1de>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 80aa 	beq.w	8004c96 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d023      	beq.n	8004b94 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d011      	beq.n	8004b7c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5c:	f043 0204 	orr.w	r2, r3, #4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	e00b      	b.n	8004b94 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	693b      	ldr	r3, [r7, #16]
        return;
 8004b92:	e080      	b.n	8004c96 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d014      	beq.n	8004bc8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba2:	f043 0201 	orr.w	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00c      	beq.n	8004bec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd6:	f043 0208 	orr.w	r2, r3, #8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004bde:	2300      	movs	r3, #0
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d04f      	beq.n	8004c94 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c02:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d104      	bne.n	8004c20 <HAL_SPI_IRQHandler+0x168>
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d034      	beq.n	8004c8a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0203 	bic.w	r2, r2, #3
 8004c2e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d011      	beq.n	8004c5c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3c:	4a17      	ldr	r2, [pc, #92]	; (8004c9c <HAL_SPI_IRQHandler+0x1e4>)
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fc fb71 	bl	800132c <HAL_DMA_Abort_IT>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d016      	beq.n	8004c92 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <HAL_SPI_IRQHandler+0x1e4>)
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fc fb5b 	bl	800132c <HAL_DMA_Abort_IT>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004c88:	e003      	b.n	8004c92 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f808 	bl	8004ca0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c90:	e000      	b.n	8004c94 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004c92:	bf00      	nop
    return;
 8004c94:	bf00      	nop
  }
}
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	08004cb5 	.word	0x08004cb5

08004ca0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff ffe5 	bl	8004ca0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cf0:	f7fc f936 	bl	8000f60 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d00:	f7fc f92e 	bl	8000f60 <HAL_GetTick>
 8004d04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d06:	4b39      	ldr	r3, [pc, #228]	; (8004dec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	015b      	lsls	r3, r3, #5
 8004d0c:	0d1b      	lsrs	r3, r3, #20
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d16:	e054      	b.n	8004dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d050      	beq.n	8004dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d20:	f7fc f91e 	bl	8000f60 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d902      	bls.n	8004d36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d13d      	bne.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d4e:	d111      	bne.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d58:	d004      	beq.n	8004d64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d62:	d107      	bne.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7c:	d10f      	bne.n	8004d9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e017      	b.n	8004de2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d19b      	bne.n	8004d18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000004 	.word	0x20000004

08004df0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	; 0x28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e02:	f7fc f8ad 	bl	8000f60 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	4413      	add	r3, r2
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e12:	f7fc f8a5 	bl	8000f60 <HAL_GetTick>
 8004e16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e20:	4b3d      	ldr	r3, [pc, #244]	; (8004f18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	00da      	lsls	r2, r3, #3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	0d1b      	lsrs	r3, r3, #20
 8004e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e38:	e060      	b.n	8004efc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e40:	d107      	bne.n	8004e52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d050      	beq.n	8004efc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e5a:	f7fc f881 	bl	8000f60 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d902      	bls.n	8004e70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d13d      	bne.n	8004eec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e88:	d111      	bne.n	8004eae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e92:	d004      	beq.n	8004e9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9c:	d107      	bne.n	8004eae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb6:	d10f      	bne.n	8004ed8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e010      	b.n	8004f0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d196      	bne.n	8004e3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3728      	adds	r7, #40	; 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000004 	.word	0x20000004

08004f1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff ff5b 	bl	8004df0 <SPI_WaitFifoStateUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f44:	f043 0220 	orr.w	r2, r3, #32
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e027      	b.n	8004fa0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2200      	movs	r2, #0
 8004f58:	2180      	movs	r1, #128	; 0x80
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f7ff fec0 	bl	8004ce0 <SPI_WaitFlagStateUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6a:	f043 0220 	orr.w	r2, r3, #32
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e014      	b.n	8004fa0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff ff34 	bl	8004df0 <SPI_WaitFifoStateUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e000      	b.n	8004fa0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e042      	b.n	8005040 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d106      	bne.n	8004fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7fb fe1f 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2224      	movs	r2, #36	; 0x24
 8004fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fb24 	bl	8005640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f825 	bl	8005048 <UART_SetConfig>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e01b      	b.n	8005040 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fba3 	bl	8005784 <UART_CheckIdleState>
 800503e:	4603      	mov	r3, r0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800504c:	b08c      	sub	sp, #48	; 0x30
 800504e:	af00      	add	r7, sp, #0
 8005050:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	431a      	orrs	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	431a      	orrs	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	4313      	orrs	r3, r2
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4baa      	ldr	r3, [pc, #680]	; (8005320 <UART_SetConfig+0x2d8>)
 8005078:	4013      	ands	r3, r2
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005080:	430b      	orrs	r3, r1
 8005082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a9f      	ldr	r2, [pc, #636]	; (8005324 <UART_SetConfig+0x2dc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b0:	4313      	orrs	r3, r2
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	f023 010f 	bic.w	r1, r3, #15
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a90      	ldr	r2, [pc, #576]	; (8005328 <UART_SetConfig+0x2e0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d125      	bne.n	8005138 <UART_SetConfig+0xf0>
 80050ec:	4b8f      	ldr	r3, [pc, #572]	; (800532c <UART_SetConfig+0x2e4>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d81a      	bhi.n	8005130 <UART_SetConfig+0xe8>
 80050fa:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <UART_SetConfig+0xb8>)
 80050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005100:	08005111 	.word	0x08005111
 8005104:	08005121 	.word	0x08005121
 8005108:	08005119 	.word	0x08005119
 800510c:	08005129 	.word	0x08005129
 8005110:	2301      	movs	r3, #1
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005116:	e116      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005118:	2302      	movs	r3, #2
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800511e:	e112      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005120:	2304      	movs	r3, #4
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005126:	e10e      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005128:	2308      	movs	r3, #8
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512e:	e10a      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005130:	2310      	movs	r3, #16
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005136:	e106      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a7c      	ldr	r2, [pc, #496]	; (8005330 <UART_SetConfig+0x2e8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d138      	bne.n	80051b4 <UART_SetConfig+0x16c>
 8005142:	4b7a      	ldr	r3, [pc, #488]	; (800532c <UART_SetConfig+0x2e4>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f003 030c 	and.w	r3, r3, #12
 800514c:	2b0c      	cmp	r3, #12
 800514e:	d82d      	bhi.n	80051ac <UART_SetConfig+0x164>
 8005150:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <UART_SetConfig+0x110>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	0800518d 	.word	0x0800518d
 800515c:	080051ad 	.word	0x080051ad
 8005160:	080051ad 	.word	0x080051ad
 8005164:	080051ad 	.word	0x080051ad
 8005168:	0800519d 	.word	0x0800519d
 800516c:	080051ad 	.word	0x080051ad
 8005170:	080051ad 	.word	0x080051ad
 8005174:	080051ad 	.word	0x080051ad
 8005178:	08005195 	.word	0x08005195
 800517c:	080051ad 	.word	0x080051ad
 8005180:	080051ad 	.word	0x080051ad
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051a5 	.word	0x080051a5
 800518c:	2300      	movs	r3, #0
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005192:	e0d8      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005194:	2302      	movs	r3, #2
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	e0d4      	b.n	8005346 <UART_SetConfig+0x2fe>
 800519c:	2304      	movs	r3, #4
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a2:	e0d0      	b.n	8005346 <UART_SetConfig+0x2fe>
 80051a4:	2308      	movs	r3, #8
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051aa:	e0cc      	b.n	8005346 <UART_SetConfig+0x2fe>
 80051ac:	2310      	movs	r3, #16
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b2:	e0c8      	b.n	8005346 <UART_SetConfig+0x2fe>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a5e      	ldr	r2, [pc, #376]	; (8005334 <UART_SetConfig+0x2ec>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d125      	bne.n	800520a <UART_SetConfig+0x1c2>
 80051be:	4b5b      	ldr	r3, [pc, #364]	; (800532c <UART_SetConfig+0x2e4>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051c8:	2b30      	cmp	r3, #48	; 0x30
 80051ca:	d016      	beq.n	80051fa <UART_SetConfig+0x1b2>
 80051cc:	2b30      	cmp	r3, #48	; 0x30
 80051ce:	d818      	bhi.n	8005202 <UART_SetConfig+0x1ba>
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d00a      	beq.n	80051ea <UART_SetConfig+0x1a2>
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d814      	bhi.n	8005202 <UART_SetConfig+0x1ba>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <UART_SetConfig+0x19a>
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d008      	beq.n	80051f2 <UART_SetConfig+0x1aa>
 80051e0:	e00f      	b.n	8005202 <UART_SetConfig+0x1ba>
 80051e2:	2300      	movs	r3, #0
 80051e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051e8:	e0ad      	b.n	8005346 <UART_SetConfig+0x2fe>
 80051ea:	2302      	movs	r3, #2
 80051ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f0:	e0a9      	b.n	8005346 <UART_SetConfig+0x2fe>
 80051f2:	2304      	movs	r3, #4
 80051f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f8:	e0a5      	b.n	8005346 <UART_SetConfig+0x2fe>
 80051fa:	2308      	movs	r3, #8
 80051fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005200:	e0a1      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005202:	2310      	movs	r3, #16
 8005204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005208:	e09d      	b.n	8005346 <UART_SetConfig+0x2fe>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a4a      	ldr	r2, [pc, #296]	; (8005338 <UART_SetConfig+0x2f0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d125      	bne.n	8005260 <UART_SetConfig+0x218>
 8005214:	4b45      	ldr	r3, [pc, #276]	; (800532c <UART_SetConfig+0x2e4>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800521e:	2bc0      	cmp	r3, #192	; 0xc0
 8005220:	d016      	beq.n	8005250 <UART_SetConfig+0x208>
 8005222:	2bc0      	cmp	r3, #192	; 0xc0
 8005224:	d818      	bhi.n	8005258 <UART_SetConfig+0x210>
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d00a      	beq.n	8005240 <UART_SetConfig+0x1f8>
 800522a:	2b80      	cmp	r3, #128	; 0x80
 800522c:	d814      	bhi.n	8005258 <UART_SetConfig+0x210>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <UART_SetConfig+0x1f0>
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d008      	beq.n	8005248 <UART_SetConfig+0x200>
 8005236:	e00f      	b.n	8005258 <UART_SetConfig+0x210>
 8005238:	2300      	movs	r3, #0
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800523e:	e082      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005240:	2302      	movs	r3, #2
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005246:	e07e      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005248:	2304      	movs	r3, #4
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524e:	e07a      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005250:	2308      	movs	r3, #8
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005256:	e076      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005258:	2310      	movs	r3, #16
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525e:	e072      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a35      	ldr	r2, [pc, #212]	; (800533c <UART_SetConfig+0x2f4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d12a      	bne.n	80052c0 <UART_SetConfig+0x278>
 800526a:	4b30      	ldr	r3, [pc, #192]	; (800532c <UART_SetConfig+0x2e4>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005278:	d01a      	beq.n	80052b0 <UART_SetConfig+0x268>
 800527a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527e:	d81b      	bhi.n	80052b8 <UART_SetConfig+0x270>
 8005280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005284:	d00c      	beq.n	80052a0 <UART_SetConfig+0x258>
 8005286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800528a:	d815      	bhi.n	80052b8 <UART_SetConfig+0x270>
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <UART_SetConfig+0x250>
 8005290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005294:	d008      	beq.n	80052a8 <UART_SetConfig+0x260>
 8005296:	e00f      	b.n	80052b8 <UART_SetConfig+0x270>
 8005298:	2300      	movs	r3, #0
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529e:	e052      	b.n	8005346 <UART_SetConfig+0x2fe>
 80052a0:	2302      	movs	r3, #2
 80052a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052a6:	e04e      	b.n	8005346 <UART_SetConfig+0x2fe>
 80052a8:	2304      	movs	r3, #4
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ae:	e04a      	b.n	8005346 <UART_SetConfig+0x2fe>
 80052b0:	2308      	movs	r3, #8
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b6:	e046      	b.n	8005346 <UART_SetConfig+0x2fe>
 80052b8:	2310      	movs	r3, #16
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052be:	e042      	b.n	8005346 <UART_SetConfig+0x2fe>
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a17      	ldr	r2, [pc, #92]	; (8005324 <UART_SetConfig+0x2dc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d13a      	bne.n	8005340 <UART_SetConfig+0x2f8>
 80052ca:	4b18      	ldr	r3, [pc, #96]	; (800532c <UART_SetConfig+0x2e4>)
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052d8:	d01a      	beq.n	8005310 <UART_SetConfig+0x2c8>
 80052da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052de:	d81b      	bhi.n	8005318 <UART_SetConfig+0x2d0>
 80052e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e4:	d00c      	beq.n	8005300 <UART_SetConfig+0x2b8>
 80052e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ea:	d815      	bhi.n	8005318 <UART_SetConfig+0x2d0>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <UART_SetConfig+0x2b0>
 80052f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f4:	d008      	beq.n	8005308 <UART_SetConfig+0x2c0>
 80052f6:	e00f      	b.n	8005318 <UART_SetConfig+0x2d0>
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052fe:	e022      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005300:	2302      	movs	r3, #2
 8005302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005306:	e01e      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530e:	e01a      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005316:	e016      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531e:	e012      	b.n	8005346 <UART_SetConfig+0x2fe>
 8005320:	cfff69f3 	.word	0xcfff69f3
 8005324:	40008000 	.word	0x40008000
 8005328:	40013800 	.word	0x40013800
 800532c:	40021000 	.word	0x40021000
 8005330:	40004400 	.word	0x40004400
 8005334:	40004800 	.word	0x40004800
 8005338:	40004c00 	.word	0x40004c00
 800533c:	40005000 	.word	0x40005000
 8005340:	2310      	movs	r3, #16
 8005342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4aae      	ldr	r2, [pc, #696]	; (8005604 <UART_SetConfig+0x5bc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	f040 8097 	bne.w	8005480 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005352:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005356:	2b08      	cmp	r3, #8
 8005358:	d823      	bhi.n	80053a2 <UART_SetConfig+0x35a>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <UART_SetConfig+0x318>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005385 	.word	0x08005385
 8005364:	080053a3 	.word	0x080053a3
 8005368:	0800538d 	.word	0x0800538d
 800536c:	080053a3 	.word	0x080053a3
 8005370:	08005393 	.word	0x08005393
 8005374:	080053a3 	.word	0x080053a3
 8005378:	080053a3 	.word	0x080053a3
 800537c:	080053a3 	.word	0x080053a3
 8005380:	0800539b 	.word	0x0800539b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005384:	f7fe feb8 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 8005388:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800538a:	e010      	b.n	80053ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800538c:	4b9e      	ldr	r3, [pc, #632]	; (8005608 <UART_SetConfig+0x5c0>)
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005390:	e00d      	b.n	80053ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005392:	f7fe fe43 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8005396:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005398:	e009      	b.n	80053ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800539a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053a0:	e005      	b.n	80053ae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8130 	beq.w	8005616 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	4a94      	ldr	r2, [pc, #592]	; (800560c <UART_SetConfig+0x5c4>)
 80053bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053c0:	461a      	mov	r2, r3
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	4413      	add	r3, r2
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d305      	bcc.n	80053e6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d903      	bls.n	80053ee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053ec:	e113      	b.n	8005616 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	2200      	movs	r2, #0
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	60fa      	str	r2, [r7, #12]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	4a84      	ldr	r2, [pc, #528]	; (800560c <UART_SetConfig+0x5c4>)
 80053fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005400:	b29b      	uxth	r3, r3
 8005402:	2200      	movs	r2, #0
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800540c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005410:	f7fa ff02 	bl	8000218 <__aeabi_uldivmod>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	020b      	lsls	r3, r1, #8
 8005426:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800542a:	0202      	lsls	r2, r0, #8
 800542c:	6979      	ldr	r1, [r7, #20]
 800542e:	6849      	ldr	r1, [r1, #4]
 8005430:	0849      	lsrs	r1, r1, #1
 8005432:	2000      	movs	r0, #0
 8005434:	460c      	mov	r4, r1
 8005436:	4605      	mov	r5, r0
 8005438:	eb12 0804 	adds.w	r8, r2, r4
 800543c:	eb43 0905 	adc.w	r9, r3, r5
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	469a      	mov	sl, r3
 8005448:	4693      	mov	fp, r2
 800544a:	4652      	mov	r2, sl
 800544c:	465b      	mov	r3, fp
 800544e:	4640      	mov	r0, r8
 8005450:	4649      	mov	r1, r9
 8005452:	f7fa fee1 	bl	8000218 <__aeabi_uldivmod>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4613      	mov	r3, r2
 800545c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005464:	d308      	bcc.n	8005478 <UART_SetConfig+0x430>
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800546c:	d204      	bcs.n	8005478 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a3a      	ldr	r2, [r7, #32]
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	e0ce      	b.n	8005616 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800547e:	e0ca      	b.n	8005616 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005488:	d166      	bne.n	8005558 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800548a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800548e:	2b08      	cmp	r3, #8
 8005490:	d827      	bhi.n	80054e2 <UART_SetConfig+0x49a>
 8005492:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <UART_SetConfig+0x450>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054bd 	.word	0x080054bd
 800549c:	080054c5 	.word	0x080054c5
 80054a0:	080054cd 	.word	0x080054cd
 80054a4:	080054e3 	.word	0x080054e3
 80054a8:	080054d3 	.word	0x080054d3
 80054ac:	080054e3 	.word	0x080054e3
 80054b0:	080054e3 	.word	0x080054e3
 80054b4:	080054e3 	.word	0x080054e3
 80054b8:	080054db 	.word	0x080054db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054bc:	f7fe fe1c 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 80054c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054c2:	e014      	b.n	80054ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054c4:	f7fe fe2e 	bl	8004124 <HAL_RCC_GetPCLK2Freq>
 80054c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054ca:	e010      	b.n	80054ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054cc:	4b4e      	ldr	r3, [pc, #312]	; (8005608 <UART_SetConfig+0x5c0>)
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054d0:	e00d      	b.n	80054ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054d2:	f7fe fda3 	bl	800401c <HAL_RCC_GetSysClockFreq>
 80054d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054d8:	e009      	b.n	80054ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054e0:	e005      	b.n	80054ee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8090 	beq.w	8005616 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	4a44      	ldr	r2, [pc, #272]	; (800560c <UART_SetConfig+0x5c4>)
 80054fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005500:	461a      	mov	r2, r3
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	fbb3 f3f2 	udiv	r3, r3, r2
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	441a      	add	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	2b0f      	cmp	r3, #15
 8005520:	d916      	bls.n	8005550 <UART_SetConfig+0x508>
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005528:	d212      	bcs.n	8005550 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f023 030f 	bic.w	r3, r3, #15
 8005532:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	b29b      	uxth	r3, r3
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	b29a      	uxth	r2, r3
 8005540:	8bfb      	ldrh	r3, [r7, #30]
 8005542:	4313      	orrs	r3, r2
 8005544:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	8bfa      	ldrh	r2, [r7, #30]
 800554c:	60da      	str	r2, [r3, #12]
 800554e:	e062      	b.n	8005616 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005556:	e05e      	b.n	8005616 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005558:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800555c:	2b08      	cmp	r3, #8
 800555e:	d828      	bhi.n	80055b2 <UART_SetConfig+0x56a>
 8005560:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <UART_SetConfig+0x520>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	0800558d 	.word	0x0800558d
 800556c:	08005595 	.word	0x08005595
 8005570:	0800559d 	.word	0x0800559d
 8005574:	080055b3 	.word	0x080055b3
 8005578:	080055a3 	.word	0x080055a3
 800557c:	080055b3 	.word	0x080055b3
 8005580:	080055b3 	.word	0x080055b3
 8005584:	080055b3 	.word	0x080055b3
 8005588:	080055ab 	.word	0x080055ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800558c:	f7fe fdb4 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 8005590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005592:	e014      	b.n	80055be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005594:	f7fe fdc6 	bl	8004124 <HAL_RCC_GetPCLK2Freq>
 8005598:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800559a:	e010      	b.n	80055be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800559c:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <UART_SetConfig+0x5c0>)
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055a0:	e00d      	b.n	80055be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055a2:	f7fe fd3b 	bl	800401c <HAL_RCC_GetSysClockFreq>
 80055a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055a8:	e009      	b.n	80055be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055b0:	e005      	b.n	80055be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055bc:	bf00      	nop
    }

    if (pclk != 0U)
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d028      	beq.n	8005616 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	4a10      	ldr	r2, [pc, #64]	; (800560c <UART_SetConfig+0x5c4>)
 80055ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ce:	461a      	mov	r2, r3
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	441a      	add	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	2b0f      	cmp	r3, #15
 80055ec:	d910      	bls.n	8005610 <UART_SetConfig+0x5c8>
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f4:	d20c      	bcs.n	8005610 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60da      	str	r2, [r3, #12]
 8005600:	e009      	b.n	8005616 <UART_SetConfig+0x5ce>
 8005602:	bf00      	nop
 8005604:	40008000 	.word	0x40008000
 8005608:	00f42400 	.word	0x00f42400
 800560c:	08005d0c 	.word	0x08005d0c
      }
      else
      {
        ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2201      	movs	r2, #1
 800561a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2201      	movs	r2, #1
 8005622:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2200      	movs	r2, #0
 800562a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2200      	movs	r2, #0
 8005630:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005632:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005636:	4618      	mov	r0, r3
 8005638:	3730      	adds	r7, #48	; 0x30
 800563a:	46bd      	mov	sp, r7
 800563c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01a      	beq.n	8005756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573e:	d10a      	bne.n	8005756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]
  }
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b098      	sub	sp, #96	; 0x60
 8005788:	af02      	add	r7, sp, #8
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005794:	f7fb fbe4 	bl	8000f60 <HAL_GetTick>
 8005798:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d12f      	bne.n	8005808 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b0:	2200      	movs	r2, #0
 80057b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f88e 	bl	80058d8 <UART_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d022      	beq.n	8005808 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d6:	653b      	str	r3, [r7, #80]	; 0x50
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e0:	647b      	str	r3, [r7, #68]	; 0x44
 80057e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e6      	bne.n	80057c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e063      	b.n	80058d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d149      	bne.n	80058aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005816:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800581e:	2200      	movs	r2, #0
 8005820:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f857 	bl	80058d8 <UART_WaitOnFlagUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d03c      	beq.n	80058aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	623b      	str	r3, [r7, #32]
   return(result);
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584e:	633b      	str	r3, [r7, #48]	; 0x30
 8005850:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e6      	bne.n	8005830 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	60fb      	str	r3, [r7, #12]
   return(result);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005882:	61fa      	str	r2, [r7, #28]
 8005884:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	69b9      	ldr	r1, [r7, #24]
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	617b      	str	r3, [r7, #20]
   return(result);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e012      	b.n	80058d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3758      	adds	r7, #88	; 0x58
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4613      	mov	r3, r2
 80058e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e8:	e04f      	b.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d04b      	beq.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f2:	f7fb fb35 	bl	8000f60 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d302      	bcc.n	8005908 <UART_WaitOnFlagUntilTimeout+0x30>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e04e      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d037      	beq.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d034      	beq.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	d031      	beq.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b08      	cmp	r3, #8
 8005932:	d110      	bne.n	8005956 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2208      	movs	r2, #8
 800593a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f838 	bl	80059b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2208      	movs	r2, #8
 8005946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e029      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005964:	d111      	bne.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800596e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f81e 	bl	80059b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e00f      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d0a0      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b095      	sub	sp, #84	; 0x54
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d8:	643b      	str	r3, [r7, #64]	; 0x40
 80059da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e6      	bne.n	80059ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e3      	bne.n	80059ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d118      	bne.n	8005a5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f023 0310 	bic.w	r3, r3, #16
 8005a40:	647b      	str	r3, [r7, #68]	; 0x44
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6979      	ldr	r1, [r7, #20]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	613b      	str	r3, [r7, #16]
   return(result);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e6      	bne.n	8005a2c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a72:	bf00      	nop
 8005a74:	3754      	adds	r7, #84	; 0x54
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e027      	b.n	8005ae4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2224      	movs	r2, #36	; 0x24
 8005aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ac2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e02d      	b.n	8005b64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	; 0x24
 8005b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f84f 	bl	8005be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e02d      	b.n	8005be0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2224      	movs	r2, #36	; 0x24
 8005b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f811 	bl	8005be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d108      	bne.n	8005c0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c08:	e031      	b.n	8005c6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c0e:	2308      	movs	r3, #8
 8005c10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	0e5b      	lsrs	r3, r3, #25
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	0f5b      	lsrs	r3, r3, #29
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	7b3a      	ldrb	r2, [r7, #12]
 8005c36:	4911      	ldr	r1, [pc, #68]	; (8005c7c <UARTEx_SetNbDataToProcess+0x94>)
 8005c38:	5c8a      	ldrb	r2, [r1, r2]
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c3e:	7b3a      	ldrb	r2, [r7, #12]
 8005c40:	490f      	ldr	r1, [pc, #60]	; (8005c80 <UARTEx_SetNbDataToProcess+0x98>)
 8005c42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c44:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	7b7a      	ldrb	r2, [r7, #13]
 8005c54:	4909      	ldr	r1, [pc, #36]	; (8005c7c <UARTEx_SetNbDataToProcess+0x94>)
 8005c56:	5c8a      	ldrb	r2, [r1, r2]
 8005c58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c5c:	7b7a      	ldrb	r2, [r7, #13]
 8005c5e:	4908      	ldr	r1, [pc, #32]	; (8005c80 <UARTEx_SetNbDataToProcess+0x98>)
 8005c60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c62:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	08005d24 	.word	0x08005d24
 8005c80:	08005d2c 	.word	0x08005d2c

08005c84 <memset>:
 8005c84:	4402      	add	r2, r0
 8005c86:	4603      	mov	r3, r0
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d100      	bne.n	8005c8e <memset+0xa>
 8005c8c:	4770      	bx	lr
 8005c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c92:	e7f9      	b.n	8005c88 <memset+0x4>

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	4d0d      	ldr	r5, [pc, #52]	; (8005ccc <__libc_init_array+0x38>)
 8005c98:	4c0d      	ldr	r4, [pc, #52]	; (8005cd0 <__libc_init_array+0x3c>)
 8005c9a:	1b64      	subs	r4, r4, r5
 8005c9c:	10a4      	asrs	r4, r4, #2
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	4d0b      	ldr	r5, [pc, #44]	; (8005cd4 <__libc_init_array+0x40>)
 8005ca6:	4c0c      	ldr	r4, [pc, #48]	; (8005cd8 <__libc_init_array+0x44>)
 8005ca8:	f000 f818 	bl	8005cdc <_init>
 8005cac:	1b64      	subs	r4, r4, r5
 8005cae:	10a4      	asrs	r4, r4, #2
 8005cb0:	2600      	movs	r6, #0
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbc:	4798      	blx	r3
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc6:	4798      	blx	r3
 8005cc8:	3601      	adds	r6, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08005d3c 	.word	0x08005d3c
 8005cd0:	08005d3c 	.word	0x08005d3c
 8005cd4:	08005d3c 	.word	0x08005d3c
 8005cd8:	08005d40 	.word	0x08005d40

08005cdc <_init>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr

08005ce8 <_fini>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr
