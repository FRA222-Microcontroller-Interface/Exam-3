
Exam-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006500  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006728  08006728  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006728  08006728  00016728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006730  08006730  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006734  08006734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000001c  08006754  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08006754  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014dac  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026eb  00000000  00000000  00034e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00037528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d73  00000000  00000000  00038668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a23  00000000  00000000  000393db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015099  00000000  00000000  0005edfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f01ef  00000000  00000000  00073e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004950  00000000  00000000  00164088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001689d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080066c0 	.word	0x080066c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	080066c0 	.word	0x080066c0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd9e 	bl	800105a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f85f 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9eb 	bl	80008fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 f9b7 	bl	8000898 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800052a:	f000 f92d 	bl	8000788 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 800052e:	f000 f975 	bl	800081c <MX_SPI3_Init>
  MX_I2C1_Init();
 8000532:	f000 f8e9 	bl	8000708 <MX_I2C1_Init>
  MX_FDCAN1_Init();
 8000536:	f000 f89f 	bl	8000678 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  FDCAN_FilterTypeDef sFilterConfig =
 800053a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]
 800054a:	615a      	str	r2, [r3, #20]
 800054c:	2301      	movs	r3, #1
 800054e:	637b      	str	r3, [r7, #52]	; 0x34
 8000550:	2345      	movs	r3, #69	; 0x45
 8000552:	63bb      	str	r3, [r7, #56]	; 0x38
	  .FilterID1 = 0x45,
	  .IdType = FDCAN_STANDARD_ID,
	  .FilterType = FDCAN_FILTER_RANGE
  };

  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000554:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000558:	4619      	mov	r1, r3
 800055a:	481a      	ldr	r0, [pc, #104]	; (80005c4 <main+0xb0>)
 800055c:	f001 faa8 	bl	8001ab0 <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_Start(&hfdcan1);
 8000560:	4818      	ldr	r0, [pc, #96]	; (80005c4 <main+0xb0>)
 8000562:	f001 faff 	bl	8001b64 <HAL_FDCAN_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //SPIDataSent
	  MCP4922_SendData(ch,dAC);
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <main+0xb4>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4a18      	ldr	r2, [pc, #96]	; (80005cc <main+0xb8>)
 800056c:	8812      	ldrh	r2, [r2, #0]
 800056e:	4611      	mov	r1, r2
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fa59 	bl	8000a28 <MCP4922_SendData>

	  //I2cWrite & Read Functions
	  EEPROMWriteExample();
 8000576:	f000 fa9b 	bl	8000ab0 <EEPROMWriteExample>
	  EEPROMReadExample(eepromDataReadBack, 6);
 800057a:	2106      	movs	r1, #6
 800057c:	4814      	ldr	r0, [pc, #80]	; (80005d0 <main+0xbc>)
 800057e:	f000 fabb 	bl	8000af8 <EEPROMReadExample>

	  //CAN Tx Head Setup
	  FDCAN_TxHeaderTypeDef pTxHeader =
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2224      	movs	r2, #36	; 0x24
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f006 f86d 	bl	8006668 <memset>
 800058e:	2367      	movs	r3, #103	; 0x67
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	2308      	movs	r3, #8
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	623b      	str	r3, [r7, #32]
 800059c:	2301      	movs	r3, #1
 800059e:	627b      	str	r3, [r7, #36]	; 0x24
	  .MessageMarker = 1,
	  .TxEventFifoControl = FDCAN_TX_EVENT
	  };

	  //CAN Sent Message
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, pTxData);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <main+0xc0>)
 80005a4:	4619      	mov	r1, r3
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <main+0xb0>)
 80005a8:	f001 fb04 	bl	8001bb4 <HAL_FDCAN_AddMessageToTxFifoQ>

	  //Simple Delay
      HAL_Delay(1000);
 80005ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b0:	f000 fdc4 	bl	800113c <HAL_Delay>
      HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &pRxHeader, redata);
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <main+0xc4>)
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <main+0xc8>)
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	4802      	ldr	r0, [pc, #8]	; (80005c4 <main+0xb0>)
 80005bc:	f001 fb3e 	bl	8001c3c <HAL_FDCAN_GetRxMessage>
  {
 80005c0:	e7d1      	b.n	8000566 <main+0x52>
 80005c2:	bf00      	nop
 80005c4:	20000038 	.word	0x20000038
 80005c8:	200002aa 	.word	0x200002aa
 80005cc:	200002a8 	.word	0x200002a8
 80005d0:	200002b0 	.word	0x200002b0
 80005d4:	20000008 	.word	0x20000008
 80005d8:	200002e0 	.word	0x200002e0
 80005dc:	200002b8 	.word	0x200002b8

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	2238      	movs	r2, #56	; 0x38
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f006 f83a 	bl	8006668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000602:	2000      	movs	r0, #0
 8000604:	f003 fcfa 	bl	8003ffc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2340      	movs	r3, #64	; 0x40
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000622:	2355      	movs	r3, #85	; 0x55
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fd94 	bl	8004164 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000642:	f000 fa7f 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2104      	movs	r1, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f004 f892 	bl	8004788 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800066a:	f000 fa6b 	bl	8000b44 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800067c:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_FDCAN1_Init+0x88>)
 800067e:	4a21      	ldr	r2, [pc, #132]	; (8000704 <MX_FDCAN1_Init+0x8c>)
 8000680:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000682:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_FDCAN1_Init+0x88>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_FDCAN1_Init+0x88>)
 800068a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800068e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_FDCAN1_Init+0x88>)
 8000692:	2204      	movs	r2, #4
 8000694:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_FDCAN1_Init+0x88>)
 8000698:	2200      	movs	r2, #0
 800069a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_FDCAN1_Init+0x88>)
 800069e:	2200      	movs	r2, #0
 80006a0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006aa:	2211      	movs	r2, #17
 80006ac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006b6:	2207      	movs	r2, #7
 80006b8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006bc:	2202      	movs	r2, #2
 80006be:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 7;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006ce:	2207      	movs	r2, #7
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_FDCAN1_Init+0x88>)
 80006ec:	f001 f886 	bl	80017fc <HAL_FDCAN_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80006f6:	f000 fa25 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000038 	.word	0x20000038
 8000704:	40006400 	.word	0x40006400

08000708 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_I2C1_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_I2C1_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_I2C1_Init+0x74>)
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <MX_I2C1_Init+0x7c>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_I2C1_Init+0x74>)
 8000720:	2201      	movs	r2, #1
 8000722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_I2C1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <MX_I2C1_Init+0x74>)
 8000744:	f001 fe27 	bl	8002396 <HAL_I2C_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800074e:	f000 f9f9 	bl	8000b44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <MX_I2C1_Init+0x74>)
 8000756:	f003 fbb9 	bl	8003ecc <HAL_I2CEx_ConfigAnalogFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 f9f0 	bl	8000b44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_I2C1_Init+0x74>)
 8000768:	f003 fbfb 	bl	8003f62 <HAL_I2CEx_ConfigDigitalFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f9e7 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000009c 	.word	0x2000009c
 8000780:	40005400 	.word	0x40005400
 8000784:	30a0a7fb 	.word	0x30a0a7fb

08000788 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 800078e:	4a22      	ldr	r2, [pc, #136]	; (8000818 <MX_LPUART1_UART_Init+0x90>)
 8000790:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007cc:	f005 f8de 	bl	800598c <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f9b5 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007de:	f005 fe79 	bl	80064d4 <HAL_UARTEx_SetTxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007e8:	f000 f9ac 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	4809      	ldr	r0, [pc, #36]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 80007f0:	f005 feae 	bl	8006550 <HAL_UARTEx_SetRxFifoThreshold>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007fa:	f000 f9a3 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_LPUART1_UART_Init+0x8c>)
 8000800:	f005 fe2f 	bl	8006462 <HAL_UARTEx_DisableFifoMode>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800080a:	f000 f99b 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200001b0 	.word	0x200001b0
 8000818:	40008000 	.word	0x40008000

0800081c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_SPI3_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_SPI3_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_SPI3_Init+0x74>)
 8000828:	f44f 7282 	mov.w	r2, #260	; 0x104
 800082c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_SPI3_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_SPI3_Init+0x74>)
 8000836:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800083a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_SPI3_Init+0x74>)
 800083e:	2202      	movs	r2, #2
 8000840:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_SPI3_Init+0x74>)
 8000844:	2201      	movs	r2, #1
 8000846:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_SPI3_Init+0x74>)
 800084a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_SPI3_Init+0x74>)
 8000852:	2238      	movs	r2, #56	; 0x38
 8000854:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_SPI3_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_SPI3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_SPI3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_SPI3_Init+0x74>)
 800086a:	2207      	movs	r2, #7
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_SPI3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_SPI3_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_SPI3_Init+0x74>)
 800087c:	f004 fbee 	bl	800505c <HAL_SPI_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 f95d 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000244 	.word	0x20000244
 8000894:	40003c00 	.word	0x40003c00

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_DMA_Init+0x60>)
 80008a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_DMA_Init+0x60>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6493      	str	r3, [r2, #72]	; 0x48
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_DMA_Init+0x60>)
 80008ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_DMA_Init+0x60>)
 80008b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <MX_DMA_Init+0x60>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6493      	str	r3, [r2, #72]	; 0x48
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_DMA_Init+0x60>)
 80008c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	200b      	movs	r0, #11
 80008d4:	f000 fd2f 	bl	8001336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008d8:	200b      	movs	r0, #11
 80008da:	f000 fd46 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	200c      	movs	r0, #12
 80008e4:	f000 fd27 	bl	8001336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80008e8:	200c      	movs	r0, #12
 80008ea:	f000 fd3e 	bl	800136a <HAL_NVIC_EnableIRQ>

}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a41      	ldr	r2, [pc, #260]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <MX_GPIO_Init+0x120>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a3b      	ldr	r2, [pc, #236]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0320 	and.w	r3, r3, #32
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a35      	ldr	r2, [pc, #212]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <MX_GPIO_Init+0x120>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a2f      	ldr	r2, [pc, #188]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MX_GPIO_Init+0x120>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2101      	movs	r1, #1
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f001 fcc5 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f001 fcbf 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2104      	movs	r1, #4
 80009a6:	481e      	ldr	r0, [pc, #120]	; (8000a20 <MX_GPIO_Init+0x124>)
 80009a8:	f001 fcba 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4818      	ldr	r0, [pc, #96]	; (8000a24 <MX_GPIO_Init+0x128>)
 80009c4:	f001 fb2a 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDAC_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LDAC_Pin|LD2_Pin;
 80009c8:	2321      	movs	r3, #33	; 0x21
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f001 fb1b 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80009e6:	2304      	movs	r3, #4
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <MX_GPIO_Init+0x124>)
 80009fe:	f001 fb0d 	bl	800201c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2028      	movs	r0, #40	; 0x28
 8000a08:	f000 fc95 	bl	8001336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a0c:	2028      	movs	r0, #40	; 0x28
 8000a0e:	f000 fcac 	bl	800136a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000c00 	.word	0x48000c00
 8000a24:	48000800 	.word	0x48000800

08000a28 <MCP4922_SendData>:

/* USER CODE BEGIN 4 */

void MCP4922_SendData(uint8_t chh,uint16_t data)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	80bb      	strh	r3, [r7, #4]
    // Combine command and data
	uint16_t command = MCP4922_CMDA | (data & 0x0FFF);
 8000a38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	81fb      	strh	r3, [r7, #14]

	if (chh == 0)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10a      	bne.n	8000a68 <MCP4922_SendData+0x40>
	{
		command = MCP4922_CMDA | (data & 0x0FFF);
 8000a52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	81fb      	strh	r3, [r7, #14]
 8000a66:	e009      	b.n	8000a7c <MCP4922_SendData+0x54>
	}
	else if (chh == 1)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d106      	bne.n	8000a7c <MCP4922_SendData+0x54>
	{
		command = MCP4922_CMDB | (data & 0x0FFF);
 8000a6e:	88bb      	ldrh	r3, [r7, #4]
 8000a70:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000a74:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	81fb      	strh	r3, [r7, #14]
	}

    // Select the MCP4922 by setting CS low
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <MCP4922_SendData+0x80>)
 8000a82:	f001 fc4d 	bl	8002320 <HAL_GPIO_WritePin>

    // Transmit the data via SPI
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&command, 1, 10);
 8000a86:	f107 010e 	add.w	r1, r7, #14
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <MCP4922_SendData+0x84>)
 8000a90:	f004 fb8f 	bl	80051b2 <HAL_SPI_Transmit>

    // Deselect the MCP4922 by setting CS high
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2104      	movs	r1, #4
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <MCP4922_SendData+0x80>)
 8000a9a:	f001 fc41 	bl	8002320 <HAL_GPIO_WritePin>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	20000244 	.word	0x20000244

08000ab0 <EEPROMWriteExample>:

void EEPROMWriteExample()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY)
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <EEPROMWriteExample+0x3c>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d012      	beq.n	8000ae4 <EEPROMWriteExample+0x34>
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <EEPROMWriteExample+0x40>)
 8000ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b20      	cmp	r3, #32
 8000ac8:	d10c      	bne.n	8000ae4 <EEPROMWriteExample+0x34>
	{
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x99, I2C_MEMADD_SIZE_16BIT, data, 6);
 8000aca:	2306      	movs	r3, #6
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <EEPROMWriteExample+0x44>)
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	2299      	movs	r2, #153	; 0x99
 8000ad6:	21a0      	movs	r1, #160	; 0xa0
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <EEPROMWriteExample+0x40>)
 8000ada:	f001 fcf7 	bl	80024cc <HAL_I2C_Mem_Write_IT>
		eepromExampleWriteFlag = 0;
 8000ade:	4b03      	ldr	r3, [pc, #12]	; (8000aec <EEPROMWriteExample+0x3c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200002ab 	.word	0x200002ab
 8000af0:	2000009c 	.word	0x2000009c
 8000af4:	20000000 	.word	0x20000000

08000af8 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY)
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <EEPROMReadExample+0x44>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d012      	beq.n	8000b32 <EEPROMReadExample+0x3a>
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <EEPROMReadExample+0x48>)
 8000b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b20      	cmp	r3, #32
 8000b16:	d10c      	bne.n	8000b32 <EEPROMReadExample+0x3a>
	{
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x99, I2C_MEMADD_SIZE_16BIT, Rdata, len);
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2302      	movs	r3, #2
 8000b22:	2299      	movs	r2, #153	; 0x99
 8000b24:	21a0      	movs	r1, #160	; 0xa0
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <EEPROMReadExample+0x48>)
 8000b28:	f001 fd5a 	bl	80025e0 <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <EEPROMReadExample+0x44>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
	}
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200002ac 	.word	0x200002ac
 8000b40:	2000009c 	.word	0x2000009c

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_MspInit+0x44>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_MspInit+0x44>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6613      	str	r3, [r2, #96]	; 0x60
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_MspInit+0x44>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_MspInit+0x44>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b86:	f003 fadd 	bl	8004144 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09e      	sub	sp, #120	; 0x78
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	2254      	movs	r2, #84	; 0x54
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f005 fd55 	bl	8006668 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <HAL_FDCAN_MspInit+0xac>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d139      	bne.n	8000c3c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bd2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fff1 	bl	8004bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000be4:	f7ff ffae 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_FDCAN_MspInit+0xb0>)
 8000bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bec:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <HAL_FDCAN_MspInit+0xb0>)
 8000bee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_FDCAN_MspInit+0xb0>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_FDCAN_MspInit+0xb0>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c04:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_FDCAN_MspInit+0xb0>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_FDCAN_MspInit+0xb0>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c2a:	2309      	movs	r3, #9
 8000c2c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f001 f9f0 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3778      	adds	r7, #120	; 0x78
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40006400 	.word	0x40006400
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b09e      	sub	sp, #120	; 0x78
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	2254      	movs	r2, #84	; 0x54
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 fcfb 	bl	8006668 <memset>
  if(hi2c->Instance==I2C1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a50      	ldr	r2, [pc, #320]	; (8000db8 <HAL_I2C_MspInit+0x16c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	f040 8099 	bne.w	8000db0 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 ff98 	bl	8004bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c96:	f7ff ff55 	bl	8000b44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <HAL_I2C_MspInit+0x170>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a47      	ldr	r2, [pc, #284]	; (8000dbc <HAL_I2C_MspInit+0x170>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <HAL_I2C_MspInit+0x170>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb8:	2312      	movs	r3, #18
 8000cba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ccc:	4619      	mov	r1, r3
 8000cce:	483c      	ldr	r0, [pc, #240]	; (8000dc0 <HAL_I2C_MspInit+0x174>)
 8000cd0:	f001 f9a4 	bl	800201c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd4:	4b39      	ldr	r3, [pc, #228]	; (8000dbc <HAL_I2C_MspInit+0x170>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd8:	4a38      	ldr	r2, [pc, #224]	; (8000dbc <HAL_I2C_MspInit+0x170>)
 8000cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cde:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce0:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <HAL_I2C_MspInit+0x170>)
 8000ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000cec:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000cee:	4a36      	ldr	r2, [pc, #216]	; (8000dc8 <HAL_I2C_MspInit+0x17c>)
 8000cf0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000cf2:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf8:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d04:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000d22:	4828      	ldr	r0, [pc, #160]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000d24:	f000 fb3c 	bl	80013a0 <HAL_DMA_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000d2e:	f7ff ff09 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d38:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <HAL_I2C_MspInit+0x178>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d40:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <HAL_I2C_MspInit+0x184>)
 8000d42:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d46:	2211      	movs	r2, #17
 8000d48:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d74:	4815      	ldr	r0, [pc, #84]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d76:	f000 fb13 	bl	80013a0 <HAL_DMA_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000d80:	f7ff fee0 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_I2C_MspInit+0x180>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	201f      	movs	r0, #31
 8000d96:	f000 face 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d9a:	201f      	movs	r0, #31
 8000d9c:	f000 fae5 	bl	800136a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	2020      	movs	r0, #32
 8000da6:	f000 fac6 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000daa:	2020      	movs	r0, #32
 8000dac:	f000 fadd 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3778      	adds	r7, #120	; 0x78
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	200000f0 	.word	0x200000f0
 8000dc8:	40020008 	.word	0x40020008
 8000dcc:	20000150 	.word	0x20000150
 8000dd0:	4002001c 	.word	0x4002001c

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b09e      	sub	sp, #120	; 0x78
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2254      	movs	r2, #84	; 0x54
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f005 fc37 	bl	8006668 <memset>
  if(huart->Instance==LPUART1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <HAL_UART_MspInit+0xa8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d136      	bne.n	8000e72 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e04:	2320      	movs	r3, #32
 8000e06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fed5 	bl	8004bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e1c:	f7ff fe92 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0xac>)
 8000e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e24:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <HAL_UART_MspInit+0xac>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0xac>)
 8000e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0xac>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_UART_MspInit+0xac>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_UART_MspInit+0xac>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e50:	230c      	movs	r3, #12
 8000e52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e60:	230c      	movs	r3, #12
 8000e62:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f001 f8d5 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3778      	adds	r7, #120	; 0x78
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40008000 	.word	0x40008000
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_SPI_MspInit+0x8c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d130      	bne.n	8000f08 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_SPI_MspInit+0x90>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	4a1a      	ldr	r2, [pc, #104]	; (8000f14 <HAL_SPI_MspInit+0x90>)
 8000eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb2:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_SPI_MspInit+0x90>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_SPI_MspInit+0x90>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <HAL_SPI_MspInit+0x90>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_SPI_MspInit+0x90>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ed6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ee8:	2306      	movs	r3, #6
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4809      	ldr	r0, [pc, #36]	; (8000f18 <HAL_SPI_MspInit+0x94>)
 8000ef4:	f001 f892 	bl	800201c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2033      	movs	r0, #51	; 0x33
 8000efe:	f000 fa1a 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000f02:	2033      	movs	r0, #51	; 0x33
 8000f04:	f000 fa31 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	; 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40003c00 	.word	0x40003c00
 8000f14:	40021000 	.word	0x40021000
 8000f18:	48000800 	.word	0x48000800

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 f8ca 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <DMA1_Channel1_IRQHandler+0x10>)
 8000f76:	f000 fb22 	bl	80015be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000f0 	.word	0x200000f0

08000f84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <DMA1_Channel2_IRQHandler+0x10>)
 8000f8a:	f000 fb18 	bl	80015be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000150 	.word	0x20000150

08000f98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <I2C1_EV_IRQHandler+0x10>)
 8000f9e:	f001 fba5 	bl	80026ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000009c 	.word	0x2000009c

08000fac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <I2C1_ER_IRQHandler+0x10>)
 8000fb2:	f001 fbb5 	bl	8002720 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000009c 	.word	0x2000009c

08000fc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fc8:	f001 f9c2 	bl	8002350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <SPI3_IRQHandler+0x10>)
 8000fd6:	f004 fa61 	bl	800549c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000244 	.word	0x20000244

08000fe4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800100a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800100c:	f7ff ffea 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <LoopForever+0x6>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	; (8001048 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <LoopForever+0xe>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	; (8001054 <LoopForever+0x16>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001036:	f005 fb1f 	bl	8006678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103a:	f7ff fa6b 	bl	8000514 <main>

0800103e <LoopForever>:

LoopForever:
    b LoopForever
 800103e:	e7fe      	b.n	800103e <LoopForever>
  ldr   r0, =_estack
 8001040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800104c:	08006738 	.word	0x08006738
  ldr r2, =_sbss
 8001050:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001054:	200002ec 	.word	0x200002ec

08001058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC1_2_IRQHandler>

0800105a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f95b 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f80e 	bl	800108c <HAL_InitTick>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e001      	b.n	8001080 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800107c:	f7ff fd68 	bl	8000b50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001080:	79fb      	ldrb	r3, [r7, #7]

}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_InitTick+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d022      	beq.n	80010e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_InitTick+0x6c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_InitTick+0x68>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f966 	bl	8001386 <HAL_SYSTICK_Config>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10f      	bne.n	80010e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d809      	bhi.n	80010da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c6:	2200      	movs	r2, #0
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295
 80010ce:	f000 f932 	bl	8001336 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_InitTick+0x70>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e007      	b.n	80010ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e004      	b.n	80010ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e001      	b.n	80010ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000018 	.word	0x20000018
 80010f8:	20000010 	.word	0x20000010
 80010fc:	20000014 	.word	0x20000014

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_IncTick+0x1c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x20>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4413      	add	r3, r2
 800110e:	4a03      	ldr	r2, [pc, #12]	; (800111c <HAL_IncTick+0x1c>)
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	200002e8 	.word	0x200002e8
 8001120:	20000018 	.word	0x20000018

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200002e8 	.word	0x200002e8

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d004      	beq.n	8001160 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_Delay+0x40>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001160:	bf00      	nop
 8001162:	f7ff ffdf 	bl	8001124 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	429a      	cmp	r2, r3
 8001170:	d8f7      	bhi.n	8001162 <HAL_Delay+0x26>
  {
  }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000018 	.word	0x20000018

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4907      	ldr	r1, [pc, #28]	; (800121c <__NVIC_EnableIRQ+0x38>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff29 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff40 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff90 	bl	8001274 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5f 	bl	8001220 <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff33 	bl	80011e4 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa4 	bl	80012dc <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e08d      	b.n	80014ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_DMA_Init+0x138>)
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d80f      	bhi.n	80013de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b45      	ldr	r3, [pc, #276]	; (80014dc <HAL_DMA_Init+0x13c>)
 80013c6:	4413      	add	r3, r2
 80013c8:	4a45      	ldr	r2, [pc, #276]	; (80014e0 <HAL_DMA_Init+0x140>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	009a      	lsls	r2, r3, #2
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a42      	ldr	r2, [pc, #264]	; (80014e4 <HAL_DMA_Init+0x144>)
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
 80013dc:	e00e      	b.n	80013fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <HAL_DMA_Init+0x148>)
 80013e6:	4413      	add	r3, r2
 80013e8:	4a3d      	ldr	r2, [pc, #244]	; (80014e0 <HAL_DMA_Init+0x140>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	009a      	lsls	r2, r3, #2
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a3c      	ldr	r2, [pc, #240]	; (80014ec <HAL_DMA_Init+0x14c>)
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001416:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f972 	bl	8001738 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800145c:	d102      	bne.n	8001464 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001478:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d010      	beq.n	80014a4 <HAL_DMA_Init+0x104>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b04      	cmp	r3, #4
 8001488:	d80c      	bhi.n	80014a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f992 	bl	80017b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	e008      	b.n	80014b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40020407 	.word	0x40020407
 80014dc:	bffdfff8 	.word	0xbffdfff8
 80014e0:	cccccccd 	.word	0xcccccccd
 80014e4:	40020000 	.word	0x40020000
 80014e8:	bffdfbf8 	.word	0xbffdfbf8
 80014ec:	40020400 	.word	0x40020400

080014f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d00d      	beq.n	8001524 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2204      	movs	r2, #4
 800150c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
 8001522:	e047      	b.n	80015b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 020e 	bic.w	r2, r2, #14
 8001532:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001552:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	2101      	movs	r1, #1
 8001562:	fa01 f202 	lsl.w	r2, r1, r2
 8001566:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001570:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00c      	beq.n	8001594 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001588:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001592:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	4798      	blx	r3
    }
  }
  return status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2204      	movs	r2, #4
 80015e0:	409a      	lsls	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d026      	beq.n	8001638 <HAL_DMA_IRQHandler+0x7a>
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d021      	beq.n	8001638 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0320 	and.w	r3, r3, #32
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d107      	bne.n	8001612 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0204 	bic.w	r2, r2, #4
 8001610:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f003 021f 	and.w	r2, r3, #31
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	2104      	movs	r1, #4
 8001620:	fa01 f202 	lsl.w	r2, r1, r2
 8001624:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	2b00      	cmp	r3, #0
 800162c:	d071      	beq.n	8001712 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001636:	e06c      	b.n	8001712 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	2202      	movs	r2, #2
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d02e      	beq.n	80016aa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d029      	beq.n	80016aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10b      	bne.n	800167c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 020a 	bic.w	r2, r2, #10
 8001672:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	2102      	movs	r1, #2
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d038      	beq.n	8001712 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016a8:	e033      	b.n	8001712 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	2208      	movs	r2, #8
 80016b4:	409a      	lsls	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d02a      	beq.n	8001714 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d025      	beq.n	8001714 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 020e 	bic.w	r2, r2, #14
 80016d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	2101      	movs	r1, #1
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001712:	bf00      	nop
 8001714:	bf00      	nop
}
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800172a:	b2db      	uxtb	r3, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001748:	429a      	cmp	r2, r3
 800174a:	d802      	bhi.n	8001752 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e001      	b.n	8001756 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001754:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	3b08      	subs	r3, #8
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	009a      	lsls	r2, r3, #2
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4413      	add	r3, r2
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001782:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	2201      	movs	r2, #1
 800178c:	409a      	lsls	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40020407 	.word	0x40020407
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020820 	.word	0x40020820
 80017ac:	cccccccd 	.word	0xcccccccd
 80017b0:	40020880 	.word	0x40020880

080017b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017d6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	1000823f 	.word	0x1000823f
 80017f8:	40020940 	.word	0x40020940

080017fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e147      	b.n	8001a9e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff f9b8 	bl	8000b98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0210 	bic.w	r2, r2, #16
 8001836:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001838:	f7ff fc74 	bl	8001124 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800183e:	e012      	b.n	8001866 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001840:	f7ff fc70 	bl	8001124 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b0a      	cmp	r3, #10
 800184c:	d90b      	bls.n	8001866 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2203      	movs	r2, #3
 800185e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e11b      	b.n	8001a9e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b08      	cmp	r3, #8
 8001872:	d0e5      	beq.n	8001840 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001884:	f7ff fc4e 	bl	8001124 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800188a:	e012      	b.n	80018b2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800188c:	f7ff fc4a 	bl	8001124 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b0a      	cmp	r3, #10
 8001898:	d90b      	bls.n	80018b2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2203      	movs	r2, #3
 80018aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0f5      	b.n	8001a9e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0e5      	beq.n	800188c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0202 	orr.w	r2, r2, #2
 80018ce:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a74      	ldr	r2, [pc, #464]	; (8001aa8 <HAL_FDCAN_Init+0x2ac>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d103      	bne.n	80018e2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80018da:	4a74      	ldr	r2, [pc, #464]	; (8001aac <HAL_FDCAN_Init+0x2b0>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7c1b      	ldrb	r3, [r3, #16]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699a      	ldr	r2, [r3, #24]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018f8:	619a      	str	r2, [r3, #24]
 80018fa:	e007      	b.n	800190c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7c5b      	ldrb	r3, [r3, #17]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001922:	619a      	str	r2, [r3, #24]
 8001924:	e007      	b.n	8001936 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001934:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7c9b      	ldrb	r3, [r3, #18]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800194c:	619a      	str	r2, [r3, #24]
 800194e:	e007      	b.n	8001960 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800195e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001984:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0210 	bic.w	r2, r2, #16
 8001994:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d108      	bne.n	80019b0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699a      	ldr	r2, [r3, #24]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f042 0204 	orr.w	r2, r2, #4
 80019ac:	619a      	str	r2, [r3, #24]
 80019ae:	e02c      	b.n	8001a0a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d028      	beq.n	8001a0a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d01c      	beq.n	80019fa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ce:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0210 	orr.w	r2, r2, #16
 80019de:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d110      	bne.n	8001a0a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0220 	orr.w	r2, r2, #32
 80019f6:	619a      	str	r2, [r3, #24]
 80019f8:	e007      	b.n	8001a0a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0220 	orr.w	r2, r2, #32
 8001a08:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a1a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a22:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a32:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a34:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a3e:	d115      	bne.n	8001a6c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a4e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	3b01      	subs	r3, #1
 8001a56:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a58:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	3b01      	subs	r3, #1
 8001a62:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a68:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a6a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f9e2 	bl	8001e4c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40006400 	.word	0x40006400
 8001aac:	40006500 	.word	0x40006500

08001ab0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ac0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d002      	beq.n	8001ace <HAL_FDCAN_ConfigFilter+0x1e>
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d13d      	bne.n	8001b4a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d119      	bne.n	8001b0a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001ae2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001aea:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e01d      	b.n	8001b46 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	075a      	lsls	r2, r3, #29
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	079a      	lsls	r2, r3, #30
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e006      	b.n	8001b58 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4e:	f043 0202 	orr.w	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
  }
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d110      	bne.n	8001b9a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699a      	ldr	r2, [r3, #24]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e006      	b.n	8001ba8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	f043 0204 	orr.w	r2, r3, #4
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
  }
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d12c      	bne.n	8001c26 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e023      	b.n	8001c34 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f98e 	bl	8001f24 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	fa01 f202 	lsl.w	r2, r1, r2
 8001c14:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e006      	b.n	8001c34 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	f043 0208 	orr.w	r2, r3, #8
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b08b      	sub	sp, #44	; 0x2c
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c54:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001c56:	7efb      	ldrb	r3, [r7, #27]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	f040 80e8 	bne.w	8001e2e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d137      	bne.n	8001cd4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0db      	b.n	8001e3c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	0e1b      	lsrs	r3, r3, #24
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d10a      	bne.n	8001cac <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c9e:	0a5b      	lsrs	r3, r3, #9
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd2:	e036      	b.n	8001d42 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0a3      	b.n	8001e3c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfc:	0e1b      	lsrs	r3, r3, #24
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10a      	bne.n	8001d1c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d107      	bne.n	8001d66 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0c9b      	lsrs	r3, r3, #18
 8001d5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e005      	b.n	8001d72 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e1b      	lsrs	r3, r3, #24
 8001dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	0fda      	lsrs	r2, r3, #31
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	3304      	adds	r3, #4
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
 8001de6:	e00a      	b.n	8001dfe <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	441a      	add	r2, r3
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	440b      	add	r3, r1
 8001df4:	7812      	ldrb	r2, [r2, #0]
 8001df6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	623b      	str	r3, [r7, #32]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
 8001e06:	461a      	mov	r2, r3
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d3ec      	bcc.n	8001de8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b40      	cmp	r3, #64	; 0x40
 8001e12:	d105      	bne.n	8001e20 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001e1e:	e004      	b.n	8001e2a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e006      	b.n	8001e3c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e32:	f043 0208 	orr.w	r2, r3, #8
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	372c      	adds	r7, #44	; 0x2c
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	080066f0 	.word	0x080066f0

08001e4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e54:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001e56:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d103      	bne.n	8001e6a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001e68:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d103      	bne.n	8001e7c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001e7a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e8a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e92:	041a      	lsls	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	061a      	lsls	r2, r3, #24
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e005      	b.n	8001efe <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3304      	adds	r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d3f3      	bcc.n	8001ef2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	4000a400 	.word	0x4000a400
 8001f1c:	40006800 	.word	0x40006800
 8001f20:	40006c00 	.word	0x40006c00

08001f24 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001f42:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e00a      	b.n	8001f66 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001f58:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001f5e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f64:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f70:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001f76:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001f7c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e020      	b.n	8001ffa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3303      	adds	r3, #3
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	440b      	add	r3, r1
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fd0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	440b      	add	r3, r1
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001fde:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	440a      	add	r2, r1
 8001fe6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001fe8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4a06      	ldr	r2, [pc, #24]	; (8002018 <FDCAN_CopyMessageToRAM+0xf4>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	461a      	mov	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	4293      	cmp	r3, r2
 8002008:	d3d6      	bcc.n	8001fb8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800200a:	bf00      	nop
 800200c:	bf00      	nop
 800200e:	3724      	adds	r7, #36	; 0x24
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	080066f0 	.word	0x080066f0

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800202a:	e15a      	b.n	80022e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 814c 	beq.w	80022dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d005      	beq.n	800205c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002058:	2b02      	cmp	r3, #2
 800205a:	d130      	bne.n	80020be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002092:	2201      	movs	r2, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	f003 0201 	and.w	r2, r3, #1
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d017      	beq.n	80020fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d123      	bne.n	800214e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	6939      	ldr	r1, [r7, #16]
 800214a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0203 	and.w	r2, r3, #3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80a6 	beq.w	80022dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002190:	4b5b      	ldr	r3, [pc, #364]	; (8002300 <HAL_GPIO_Init+0x2e4>)
 8002192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002194:	4a5a      	ldr	r2, [pc, #360]	; (8002300 <HAL_GPIO_Init+0x2e4>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6613      	str	r3, [r2, #96]	; 0x60
 800219c:	4b58      	ldr	r3, [pc, #352]	; (8002300 <HAL_GPIO_Init+0x2e4>)
 800219e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a8:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_GPIO_Init+0x2e8>)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021d2:	d01f      	beq.n	8002214 <HAL_GPIO_Init+0x1f8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a4c      	ldr	r2, [pc, #304]	; (8002308 <HAL_GPIO_Init+0x2ec>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d019      	beq.n	8002210 <HAL_GPIO_Init+0x1f4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a4b      	ldr	r2, [pc, #300]	; (800230c <HAL_GPIO_Init+0x2f0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d013      	beq.n	800220c <HAL_GPIO_Init+0x1f0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a4a      	ldr	r2, [pc, #296]	; (8002310 <HAL_GPIO_Init+0x2f4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00d      	beq.n	8002208 <HAL_GPIO_Init+0x1ec>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a49      	ldr	r2, [pc, #292]	; (8002314 <HAL_GPIO_Init+0x2f8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d007      	beq.n	8002204 <HAL_GPIO_Init+0x1e8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a48      	ldr	r2, [pc, #288]	; (8002318 <HAL_GPIO_Init+0x2fc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_GPIO_Init+0x1e4>
 80021fc:	2305      	movs	r3, #5
 80021fe:	e00a      	b.n	8002216 <HAL_GPIO_Init+0x1fa>
 8002200:	2306      	movs	r3, #6
 8002202:	e008      	b.n	8002216 <HAL_GPIO_Init+0x1fa>
 8002204:	2304      	movs	r3, #4
 8002206:	e006      	b.n	8002216 <HAL_GPIO_Init+0x1fa>
 8002208:	2303      	movs	r3, #3
 800220a:	e004      	b.n	8002216 <HAL_GPIO_Init+0x1fa>
 800220c:	2302      	movs	r3, #2
 800220e:	e002      	b.n	8002216 <HAL_GPIO_Init+0x1fa>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_GPIO_Init+0x1fa>
 8002214:	2300      	movs	r3, #0
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	f002 0203 	and.w	r2, r2, #3
 800221c:	0092      	lsls	r2, r2, #2
 800221e:	4093      	lsls	r3, r2
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002226:	4937      	ldr	r1, [pc, #220]	; (8002304 <HAL_GPIO_Init+0x2e8>)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002234:	4b39      	ldr	r3, [pc, #228]	; (800231c <HAL_GPIO_Init+0x300>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002258:	4a30      	ldr	r2, [pc, #192]	; (800231c <HAL_GPIO_Init+0x300>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800225e:	4b2f      	ldr	r3, [pc, #188]	; (800231c <HAL_GPIO_Init+0x300>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002282:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_GPIO_Init+0x300>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_GPIO_Init+0x300>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <HAL_GPIO_Init+0x300>)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_GPIO_Init+0x300>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022d6:	4a11      	ldr	r2, [pc, #68]	; (800231c <HAL_GPIO_Init+0x300>)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3301      	adds	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f ae9d 	bne.w	800202c <HAL_GPIO_Init+0x10>
  }
}
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40021000 	.word	0x40021000
 8002304:	40010000 	.word	0x40010000
 8002308:	48000400 	.word	0x48000400
 800230c:	48000800 	.word	0x48000800
 8002310:	48000c00 	.word	0x48000c00
 8002314:	48001000 	.word	0x48001000
 8002318:	48001400 	.word	0x48001400
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
 800232c:	4613      	mov	r3, r2
 800232e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002330:	787b      	ldrb	r3, [r7, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800233c:	e002      	b.n	8002344 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f806 	bl	8002380 <HAL_GPIO_EXTI_Callback>
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e08d      	b.n	80024c4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7fe fc45 	bl	8000c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2224      	movs	r2, #36	; 0x24
 80023c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d107      	bne.n	8002410 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	e006      	b.n	800241e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800241c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d108      	bne.n	8002438 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	e007      	b.n	8002448 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002446:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800246a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69d9      	ldr	r1, [r3, #28]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1a      	ldr	r2, [r3, #32]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d16a      	bne.n	80025c8 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_I2C_Mem_Write_IT+0x32>
 80024f8:	8bbb      	ldrh	r3, [r7, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e05f      	b.n	80025ca <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002518:	d101      	bne.n	800251e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
 800251c:	e055      	b.n	80025ca <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_I2C_Mem_Write_IT+0x60>
 8002528:	2302      	movs	r3, #2
 800252a:	e04e      	b.n	80025ca <HAL_I2C_Mem_Write_IT+0xfe>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2221      	movs	r2, #33	; 0x21
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8bba      	ldrh	r2, [r7, #28]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <HAL_I2C_Mem_Write_IT+0x108>)
 8002560:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_I2C_Mem_Write_IT+0x10c>)
 8002566:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002568:	897a      	ldrh	r2, [r7, #10]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d109      	bne.n	8002588 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002574:	893b      	ldrh	r3, [r7, #8]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	651a      	str	r2, [r3, #80]	; 0x50
 8002586:	e00b      	b.n	80025a0 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002588:	893b      	ldrh	r3, [r7, #8]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	b29b      	uxth	r3, r3
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002596:	893b      	ldrh	r3, [r7, #8]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <HAL_I2C_Mem_Write_IT+0x110>)
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f001 fb78 	bl	8003ca4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025bc:	2101      	movs	r1, #1
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f001 fba2 	bl	8003d08 <I2C_Enable_IRQ>

    return HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e000      	b.n	80025ca <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	ffff0000 	.word	0xffff0000
 80025d8:	080028a9 	.word	0x080028a9
 80025dc:	80002000 	.word	0x80002000

080025e0 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	817b      	strh	r3, [r7, #10]
 80025f2:	460b      	mov	r3, r1
 80025f4:	813b      	strh	r3, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b20      	cmp	r3, #32
 8002604:	d166      	bne.n	80026d4 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_I2C_Mem_Read_IT+0x32>
 800260c:	8bbb      	ldrh	r3, [r7, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e05b      	b.n	80026d6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262c:	d101      	bne.n	8002632 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
 8002630:	e051      	b.n	80026d6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_I2C_Mem_Read_IT+0x60>
 800263c:	2302      	movs	r3, #2
 800263e:	e04a      	b.n	80026d6 <HAL_I2C_Mem_Read_IT+0xf6>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2222      	movs	r2, #34	; 0x22
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2240      	movs	r2, #64	; 0x40
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8bba      	ldrh	r2, [r7, #28]
 8002668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <HAL_I2C_Mem_Read_IT+0x100>)
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <HAL_I2C_Mem_Read_IT+0x104>)
 8002674:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002676:	897a      	ldrh	r2, [r7, #10]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d109      	bne.n	8002696 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002682:	893b      	ldrh	r3, [r7, #8]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f04f 32ff 	mov.w	r2, #4294967295
 8002692:	651a      	str	r2, [r3, #80]	; 0x50
 8002694:	e00b      	b.n	80026ae <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002696:	893b      	ldrh	r3, [r7, #8]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	b29b      	uxth	r3, r3
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80026a4:	893b      	ldrh	r3, [r7, #8]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	8979      	ldrh	r1, [r7, #10]
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_I2C_Mem_Read_IT+0x108>)
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2300      	movs	r3, #0
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f001 faf2 	bl	8003ca4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026c8:	2101      	movs	r1, #1
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f001 fb1c 	bl	8003d08 <I2C_Enable_IRQ>

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	ffff0000 	.word	0xffff0000
 80026e4:	080028a9 	.word	0x080028a9
 80026e8:	80002000 	.word	0x80002000

080026ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	68f9      	ldr	r1, [r7, #12]
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
  }
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00f      	beq.n	8002762 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002760:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00f      	beq.n	800278c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f043 0208 	orr.w	r2, r3, #8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00f      	beq.n	80027b6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f043 0202 	orr.w	r2, r3, #2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 030b 	and.w	r3, r3, #11
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80027c6:	68f9      	ldr	r1, [r7, #12]
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f001 f911 	bl	80039f0 <I2C_ITError>
  }
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	460b      	mov	r3, r1
 8002830:	70fb      	strb	r3, [r7, #3]
 8002832:	4613      	mov	r3, r2
 8002834:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80028b4:	4b8d      	ldr	r3, [pc, #564]	; (8002aec <I2C_Mem_ISR_IT+0x244>)
 80028b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <I2C_Mem_ISR_IT+0x22>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e10c      	b.n	8002ae4 <I2C_Mem_ISR_IT+0x23c>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2210      	movs	r2, #16
 80028ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f043 0204 	orr.w	r2, r3, #4
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f001 f98f 	bl	8003c1e <I2C_Flush_TXDR>
 8002900:	e0dd      	b.n	8002abe <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d022      	beq.n	8002952 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01d      	beq.n	8002952 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002950:	e0b5      	b.n	8002abe <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02c      	beq.n	80029b6 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002962:	2b00      	cmp	r3, #0
 8002964:	d027      	beq.n	80029b6 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d118      	bne.n	80029a2 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80029a0:	e08d      	b.n	8002abe <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f04f 32ff 	mov.w	r2, #4294967295
 80029b2:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80029b4:	e083      	b.n	8002abe <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d03c      	beq.n	8002a3a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d037      	beq.n	8002a3a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02c      	beq.n	8002a2e <I2C_Mem_ISR_IT+0x186>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d128      	bne.n	8002a2e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2bff      	cmp	r3, #255	; 0xff
 80029e4:	d910      	bls.n	8002a08 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	22ff      	movs	r2, #255	; 0xff
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f0:	b299      	uxth	r1, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	2300      	movs	r3, #0
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f001 f94f 	bl	8003ca4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a06:	e017      	b.n	8002a38 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	b299      	uxth	r1, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f001 f93c 	bl	8003ca4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a2c:	e004      	b.n	8002a38 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a2e:	2140      	movs	r1, #64	; 0x40
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 ffdd 	bl	80039f0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a36:	e042      	b.n	8002abe <I2C_Mem_ISR_IT+0x216>
 8002a38:	e041      	b.n	8002abe <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d03c      	beq.n	8002abe <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d037      	beq.n	8002abe <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a4e:	2101      	movs	r1, #1
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f001 f9dd 	bl	8003e10 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a56:	2102      	movs	r1, #2
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f001 f955 	bl	8003d08 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b22      	cmp	r3, #34	; 0x22
 8002a68:	d101      	bne.n	8002a6e <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <I2C_Mem_ISR_IT+0x248>)
 8002a6c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2bff      	cmp	r3, #255	; 0xff
 8002a76:	d910      	bls.n	8002a9a <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	22ff      	movs	r2, #255	; 0xff
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	b299      	uxth	r1, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f001 f906 	bl	8003ca4 <I2C_TransferConfig>
 8002a98:	e011      	b.n	8002abe <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	b299      	uxth	r1, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f001 f8f3 	bl	8003ca4 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002ad2:	6939      	ldr	r1, [r7, #16]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fd0b 	bl	80034f0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	80002000 	.word	0x80002000
 8002af0:	80002400 	.word	0x80002400

08002af4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <I2C_Slave_ISR_IT+0x24>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e0e2      	b.n	8002cde <I2C_Slave_ISR_IT+0x1ea>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d004      	beq.n	8002b3e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002b34:	6939      	ldr	r1, [r7, #16]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 fda2 	bl	8003680 <I2C_ITSlaveCplt>
 8002b3c:	e0ca      	b.n	8002cd4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d04b      	beq.n	8002be0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d046      	beq.n	8002be0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d128      	bne.n	8002bae <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b28      	cmp	r3, #40	; 0x28
 8002b66:	d108      	bne.n	8002b7a <I2C_Slave_ISR_IT+0x86>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6e:	d104      	bne.n	8002b7a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b70:	6939      	ldr	r1, [r7, #16]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fee8 	bl	8003948 <I2C_ITListenCplt>
 8002b78:	e031      	b.n	8002bde <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b29      	cmp	r3, #41	; 0x29
 8002b84:	d10e      	bne.n	8002ba4 <I2C_Slave_ISR_IT+0xb0>
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b8c:	d00a      	beq.n	8002ba4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2210      	movs	r2, #16
 8002b94:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f001 f841 	bl	8003c1e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fc4b 	bl	8003438 <I2C_ITSlaveSeqCplt>
 8002ba2:	e01c      	b.n	8002bde <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002bac:	e08f      	b.n	8002cce <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f043 0204 	orr.w	r2, r3, #4
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <I2C_Slave_ISR_IT+0xdc>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bce:	d17e      	bne.n	8002cce <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 ff0a 	bl	80039f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002bdc:	e077      	b.n	8002cce <I2C_Slave_ISR_IT+0x1da>
 8002bde:	e076      	b.n	8002cce <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02f      	beq.n	8002c4a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d02a      	beq.n	8002c4a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d018      	beq.n	8002c30 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d14b      	bne.n	8002cd2 <I2C_Slave_ISR_IT+0x1de>
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c40:	d047      	beq.n	8002cd2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fbf8 	bl	8003438 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002c48:	e043      	b.n	8002cd2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c5e:	6939      	ldr	r1, [r7, #16]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fb28 	bl	80032b6 <I2C_ITAddrCplt>
 8002c66:	e035      	b.n	8002cd4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d030      	beq.n	8002cd4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d02b      	beq.n	8002cd4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d018      	beq.n	8002cb8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	; 0x28
 8002cb6:	e00d      	b.n	8002cd4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cbe:	d002      	beq.n	8002cc6 <I2C_Slave_ISR_IT+0x1d2>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fbb6 	bl	8003438 <I2C_ITSlaveSeqCplt>
 8002ccc:	e002      	b.n	8002cd4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002cd2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b088      	sub	sp, #32
 8002cea:	af02      	add	r7, sp, #8
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <I2C_Master_ISR_DMA+0x1a>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e0d9      	b.n	8002eb4 <I2C_Master_ISR_DMA+0x1ce>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d011      	beq.n	8002d40 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2210      	movs	r2, #16
 8002d22:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	f043 0204 	orr.w	r2, r3, #4
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d30:	2120      	movs	r1, #32
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 ffe8 	bl	8003d08 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 ff70 	bl	8003c1e <I2C_Flush_TXDR>
 8002d3e:	e0b4      	b.n	8002eaa <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d071      	beq.n	8002e2e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d06c      	beq.n	8002e2e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d62:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d04e      	beq.n	8002e0c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d906      	bls.n	8002d94 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	22ff      	movs	r2, #255	; 0xff
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e010      	b.n	8002db6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002da6:	d003      	beq.n	8002db0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e002      	b.n	8002db6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002db0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	8a79      	ldrh	r1, [r7, #18]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 ff6d 	bl	8003ca4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b22      	cmp	r3, #34	; 0x22
 8002de6:	d108      	bne.n	8002dfa <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002df8:	e057      	b.n	8002eaa <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e08:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e0a:	e04e      	b.n	8002eaa <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e1a:	d003      	beq.n	8002e24 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 face 	bl	80033be <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002e22:	e042      	b.n	8002eaa <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e24:	2140      	movs	r1, #64	; 0x40
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fde2 	bl	80039f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002e2c:	e03d      	b.n	8002eaa <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d028      	beq.n	8002e8a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d023      	beq.n	8002e8a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d119      	bne.n	8002e80 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e5a:	d025      	beq.n	8002ea8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e64:	d108      	bne.n	8002e78 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e74:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002e76:	e017      	b.n	8002ea8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 faa0 	bl	80033be <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002e7e:	e013      	b.n	8002ea8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e80:	2140      	movs	r1, #64	; 0x40
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fdb4 	bl	80039f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e88:	e00e      	b.n	8002ea8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fb25 	bl	80034f0 <I2C_ITMasterCplt>
 8002ea6:	e000      	b.n	8002eaa <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002ea8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002ec8:	4b8d      	ldr	r3, [pc, #564]	; (8003100 <I2C_Mem_ISR_DMA+0x244>)
 8002eca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <I2C_Mem_ISR_DMA+0x1e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e10e      	b.n	80030f8 <I2C_Mem_ISR_DMA+0x23c>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d016      	beq.n	8002f1a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d011      	beq.n	8002f1a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2210      	movs	r2, #16
 8002efc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f043 0204 	orr.w	r2, r3, #4
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002f0a:	2120      	movs	r1, #32
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fefb 	bl	8003d08 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fe83 	bl	8003c1e <I2C_Flush_TXDR>
 8002f18:	e0e9      	b.n	80030ee <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00e      	beq.n	8002f42 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3e:	651a      	str	r2, [r3, #80]	; 0x50
 8002f40:	e0d5      	b.n	80030ee <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d05f      	beq.n	800300c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d05a      	beq.n	800300c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f56:	2101      	movs	r1, #1
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 ff59 	bl	8003e10 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002f5e:	2110      	movs	r1, #16
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fed1 	bl	8003d08 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d048      	beq.n	8003002 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	d910      	bls.n	8002f9c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	22ff      	movs	r2, #255	; 0xff
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	b299      	uxth	r1, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fe85 	bl	8003ca4 <I2C_TransferConfig>
 8002f9a:	e011      	b.n	8002fc0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	b299      	uxth	r1, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fe72 	bl	8003ca4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b22      	cmp	r3, #34	; 0x22
 8002fdc:	d108      	bne.n	8002ff0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002fee:	e07e      	b.n	80030ee <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ffe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003000:	e075      	b.n	80030ee <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003002:	2140      	movs	r1, #64	; 0x40
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fcf3 	bl	80039f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800300a:	e070      	b.n	80030ee <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d05d      	beq.n	80030d2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800301c:	2b00      	cmp	r3, #0
 800301e:	d058      	beq.n	80030d2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003020:	2101      	movs	r1, #1
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fef4 	bl	8003e10 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003028:	2110      	movs	r1, #16
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fe6c 	bl	8003d08 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b22      	cmp	r3, #34	; 0x22
 800303a:	d101      	bne.n	8003040 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <I2C_Mem_ISR_DMA+0x248>)
 800303e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2bff      	cmp	r3, #255	; 0xff
 8003048:	d910      	bls.n	800306c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	22ff      	movs	r2, #255	; 0xff
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003054:	b299      	uxth	r1, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305a:	b2da      	uxtb	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fe1d 	bl	8003ca4 <I2C_TransferConfig>
 800306a:	e011      	b.n	8003090 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	b299      	uxth	r1, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003080:	b2da      	uxtb	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fe0a 	bl	8003ca4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b22      	cmp	r3, #34	; 0x22
 80030ac:	d108      	bne.n	80030c0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030bc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030be:	e016      	b.n	80030ee <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ce:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030d0:	e00d      	b.n	80030ee <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fa01 	bl	80034f0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	80002000 	.word	0x80002000
 8003104:	80002400 	.word	0x80002400

08003108 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <I2C_Slave_ISR_DMA+0x24>
 8003128:	2302      	movs	r3, #2
 800312a:	e0c0      	b.n	80032ae <I2C_Slave_ISR_DMA+0x1a6>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fa98 	bl	8003680 <I2C_ITSlaveCplt>
 8003150:	e0a8      	b.n	80032a4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8095 	beq.w	8003288 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 808f 	beq.w	8003288 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800317a:	2b00      	cmp	r3, #0
 800317c:	d07d      	beq.n	800327a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800319c:	2301      	movs	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00c      	beq.n	80031c2 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80031be:	2301      	movs	r3, #1
 80031c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d128      	bne.n	800321a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b28      	cmp	r3, #40	; 0x28
 80031d2:	d108      	bne.n	80031e6 <I2C_Slave_ISR_DMA+0xde>
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031da:	d104      	bne.n	80031e6 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fbb2 	bl	8003948 <I2C_ITListenCplt>
 80031e4:	e048      	b.n	8003278 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b29      	cmp	r3, #41	; 0x29
 80031f0:	d10e      	bne.n	8003210 <I2C_Slave_ISR_DMA+0x108>
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f8:	d00a      	beq.n	8003210 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2210      	movs	r2, #16
 8003200:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fd0b 	bl	8003c1e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f915 	bl	8003438 <I2C_ITSlaveSeqCplt>
 800320e:	e033      	b.n	8003278 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2210      	movs	r2, #16
 8003216:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003218:	e034      	b.n	8003284 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2210      	movs	r2, #16
 8003220:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003234:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <I2C_Slave_ISR_DMA+0x13c>
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003242:	d11f      	bne.n	8003284 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b21      	cmp	r3, #33	; 0x21
 8003248:	d002      	beq.n	8003250 <I2C_Slave_ISR_DMA+0x148>
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b29      	cmp	r3, #41	; 0x29
 800324e:	d103      	bne.n	8003258 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2221      	movs	r2, #33	; 0x21
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
 8003256:	e008      	b.n	800326a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b22      	cmp	r3, #34	; 0x22
 800325c:	d002      	beq.n	8003264 <I2C_Slave_ISR_DMA+0x15c>
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b2a      	cmp	r3, #42	; 0x2a
 8003262:	d102      	bne.n	800326a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2222      	movs	r2, #34	; 0x22
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4619      	mov	r1, r3
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fbbd 	bl	80039f0 <I2C_ITError>
      if (treatdmanack == 1U)
 8003276:	e005      	b.n	8003284 <I2C_Slave_ISR_DMA+0x17c>
 8003278:	e004      	b.n	8003284 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2210      	movs	r2, #16
 8003280:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003282:	e00f      	b.n	80032a4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8003284:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003286:	e00d      	b.n	80032a4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f809 	bl	80032b6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032cc:	2b28      	cmp	r3, #40	; 0x28
 80032ce:	d16a      	bne.n	80033a6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80032ee:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032fc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	b29b      	uxth	r3, r3
 8003306:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800330a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d138      	bne.n	8003386 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003314:	897b      	ldrh	r3, [r7, #10]
 8003316:	09db      	lsrs	r3, r3, #7
 8003318:	b29a      	uxth	r2, r3
 800331a:	89bb      	ldrh	r3, [r7, #12]
 800331c:	4053      	eors	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	f003 0306 	and.w	r3, r3, #6
 8003324:	2b00      	cmp	r3, #0
 8003326:	d11c      	bne.n	8003362 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003328:	897b      	ldrh	r3, [r7, #10]
 800332a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333a:	2b02      	cmp	r3, #2
 800333c:	d13b      	bne.n	80033b6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2208      	movs	r2, #8
 800334a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003354:	89ba      	ldrh	r2, [r7, #12]
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff fa63 	bl	8002826 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003360:	e029      	b.n	80033b6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003362:	893b      	ldrh	r3, [r7, #8]
 8003364:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fd50 	bl	8003e10 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003378:	89ba      	ldrh	r2, [r7, #12]
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	4619      	mov	r1, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff fa51 	bl	8002826 <HAL_I2C_AddrCallback>
}
 8003384:	e017      	b.n	80033b6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fd40 	bl	8003e10 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003398:	89ba      	ldrh	r2, [r7, #12]
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	4619      	mov	r1, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff fa41 	bl	8002826 <HAL_I2C_AddrCallback>
}
 80033a4:	e007      	b.n	80033b6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2208      	movs	r2, #8
 80033ac:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b21      	cmp	r3, #33	; 0x21
 80033d8:	d115      	bne.n	8003406 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2211      	movs	r2, #17
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033ee:	2101      	movs	r1, #1
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fd0d 	bl	8003e10 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff f9e9 	bl	80027d6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003404:	e014      	b.n	8003430 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2212      	movs	r2, #18
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800341a:	2102      	movs	r1, #2
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fcf7 	bl	8003e10 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff f9dd 	bl	80027ea <HAL_I2C_MasterRxCpltCallback>
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e00c      	b.n	8003486 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003484:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b29      	cmp	r3, #41	; 0x29
 8003490:	d112      	bne.n	80034b8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2228      	movs	r2, #40	; 0x28
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2221      	movs	r2, #33	; 0x21
 800349e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034a0:	2101      	movs	r1, #1
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fcb4 	bl	8003e10 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff f9a4 	bl	80027fe <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80034b6:	e017      	b.n	80034e8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b2a      	cmp	r3, #42	; 0x2a
 80034c2:	d111      	bne.n	80034e8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2228      	movs	r2, #40	; 0x28
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2222      	movs	r2, #34	; 0x22
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80034d2:	2102      	movs	r1, #2
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fc9b 	bl	8003e10 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff f995 	bl	8002812 <HAL_I2C_SlaveRxCpltCallback>
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2220      	movs	r2, #32
 8003504:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b21      	cmp	r3, #33	; 0x21
 8003510:	d107      	bne.n	8003522 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003512:	2101      	movs	r1, #1
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fc7b 	bl	8003e10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2211      	movs	r2, #17
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
 8003520:	e00c      	b.n	800353c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b22      	cmp	r3, #34	; 0x22
 800352c:	d106      	bne.n	800353c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800352e:	2102      	movs	r1, #2
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fc6d 	bl	8003e10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2212      	movs	r2, #18
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6859      	ldr	r1, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <I2C_ITMasterCplt+0x188>)
 8003548:	400b      	ands	r3, r1
 800354a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a49      	ldr	r2, [pc, #292]	; (800367c <I2C_ITMasterCplt+0x18c>)
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2210      	movs	r2, #16
 8003568:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f043 0204 	orr.w	r2, r3, #4
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b60      	cmp	r3, #96	; 0x60
 8003580:	d10a      	bne.n	8003598 <I2C_ITMasterCplt+0xa8>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	b2db      	uxtb	r3, r3
 8003594:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003596:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fb40 	bl	8003c1e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b60      	cmp	r3, #96	; 0x60
 80035ae:	d002      	beq.n	80035b6 <I2C_ITMasterCplt+0xc6>
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fa17 	bl	80039f0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80035c2:	e054      	b.n	800366e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b21      	cmp	r3, #33	; 0x21
 80035ce:	d124      	bne.n	800361a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d10b      	bne.n	8003602 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff f92b 	bl	8002856 <HAL_I2C_MemTxCpltCallback>
}
 8003600:	e035      	b.n	800366e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff f8df 	bl	80027d6 <HAL_I2C_MasterTxCpltCallback>
}
 8003618:	e029      	b.n	800366e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b22      	cmp	r3, #34	; 0x22
 8003624:	d123      	bne.n	800366e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d10b      	bne.n	8003658 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff f90a 	bl	800286a <HAL_I2C_MemRxCpltCallback>
}
 8003656:	e00a      	b.n	800366e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff f8be 	bl	80027ea <HAL_I2C_MasterRxCpltCallback>
}
 800366e:	bf00      	nop
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	fe00e800 	.word	0xfe00e800
 800367c:	ffff0000 	.word	0xffff0000

08003680 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2220      	movs	r2, #32
 80036aa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036ac:	7afb      	ldrb	r3, [r7, #11]
 80036ae:	2b21      	cmp	r3, #33	; 0x21
 80036b0:	d002      	beq.n	80036b8 <I2C_ITSlaveCplt+0x38>
 80036b2:	7afb      	ldrb	r3, [r7, #11]
 80036b4:	2b29      	cmp	r3, #41	; 0x29
 80036b6:	d108      	bne.n	80036ca <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80036b8:	f248 0101 	movw	r1, #32769	; 0x8001
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fba7 	bl	8003e10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2221      	movs	r2, #33	; 0x21
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
 80036c8:	e019      	b.n	80036fe <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036ca:	7afb      	ldrb	r3, [r7, #11]
 80036cc:	2b22      	cmp	r3, #34	; 0x22
 80036ce:	d002      	beq.n	80036d6 <I2C_ITSlaveCplt+0x56>
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	2b2a      	cmp	r3, #42	; 0x2a
 80036d4:	d108      	bne.n	80036e8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80036d6:	f248 0102 	movw	r1, #32770	; 0x8002
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fb98 	bl	8003e10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2222      	movs	r2, #34	; 0x22
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
 80036e6:	e00a      	b.n	80036fe <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80036e8:	7afb      	ldrb	r3, [r7, #11]
 80036ea:	2b28      	cmp	r3, #40	; 0x28
 80036ec:	d107      	bne.n	80036fe <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80036ee:	f248 0103 	movw	r1, #32771	; 0x8003
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fb8c 	bl	8003e10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b89      	ldr	r3, [pc, #548]	; (8003940 <I2C_ITSlaveCplt+0x2c0>)
 800371a:	400b      	ands	r3, r1
 800371c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa7d 	bl	8003c1e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d013      	beq.n	8003756 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800373c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01f      	beq.n	8003786 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003754:	e017      	b.n	8003786 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d012      	beq.n	8003786 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800376e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d006      	beq.n	8003786 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0304 	bic.w	r3, r3, #4
 8003796:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00c      	beq.n	80037d2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	f043 0204 	orr.w	r2, r3, #4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d049      	beq.n	8003886 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d044      	beq.n	8003886 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d128      	bne.n	8003858 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b28      	cmp	r3, #40	; 0x28
 8003810:	d108      	bne.n	8003824 <I2C_ITSlaveCplt+0x1a4>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003818:	d104      	bne.n	8003824 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800381a:	6979      	ldr	r1, [r7, #20]
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f893 	bl	8003948 <I2C_ITListenCplt>
 8003822:	e030      	b.n	8003886 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b29      	cmp	r3, #41	; 0x29
 800382e:	d10e      	bne.n	800384e <I2C_ITSlaveCplt+0x1ce>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003836:	d00a      	beq.n	800384e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2210      	movs	r2, #16
 800383e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f9ec 	bl	8003c1e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fdf6 	bl	8003438 <I2C_ITSlaveSeqCplt>
 800384c:	e01b      	b.n	8003886 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2210      	movs	r2, #16
 8003854:	61da      	str	r2, [r3, #28]
 8003856:	e016      	b.n	8003886 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2210      	movs	r2, #16
 800385e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f043 0204 	orr.w	r2, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <I2C_ITSlaveCplt+0x1fa>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003878:	d105      	bne.n	8003886 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8b5 	bl	80039f0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	2b00      	cmp	r3, #0
 800389a:	d010      	beq.n	80038be <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8a4 	bl	80039f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b28      	cmp	r3, #40	; 0x28
 80038b2:	d141      	bne.n	8003938 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80038b4:	6979      	ldr	r1, [r7, #20]
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f846 	bl	8003948 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038bc:	e03c      	b.n	8003938 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c6:	d014      	beq.n	80038f2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fdb5 	bl	8003438 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <I2C_ITSlaveCplt+0x2c4>)
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fe ffa9 	bl	8002842 <HAL_I2C_ListenCpltCallback>
}
 80038f0:	e022      	b.n	8003938 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b22      	cmp	r3, #34	; 0x22
 80038fc:	d10e      	bne.n	800391c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fe ff7c 	bl	8002812 <HAL_I2C_SlaveRxCpltCallback>
}
 800391a:	e00d      	b.n	8003938 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fe ff63 	bl	80027fe <HAL_I2C_SlaveTxCpltCallback>
}
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	fe00e800 	.word	0xfe00e800
 8003944:	ffff0000 	.word	0xffff0000

08003948 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a25      	ldr	r2, [pc, #148]	; (80039ec <I2C_ITListenCplt+0xa4>)
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d022      	beq.n	80039c4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	f043 0204 	orr.w	r2, r3, #4
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039c4:	f248 0103 	movw	r1, #32771	; 0x8003
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fa21 	bl	8003e10 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2210      	movs	r2, #16
 80039d4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe ff2f 	bl	8002842 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	ffff0000 	.word	0xffff0000

080039f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a6d      	ldr	r2, [pc, #436]	; (8003bc4 <I2C_ITError+0x1d4>)
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b28      	cmp	r3, #40	; 0x28
 8003a26:	d005      	beq.n	8003a34 <I2C_ITError+0x44>
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b29      	cmp	r3, #41	; 0x29
 8003a2c:	d002      	beq.n	8003a34 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b2a      	cmp	r3, #42	; 0x2a
 8003a32:	d10b      	bne.n	8003a4c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a34:	2103      	movs	r1, #3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9ea 	bl	8003e10 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2228      	movs	r2, #40	; 0x28
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a60      	ldr	r2, [pc, #384]	; (8003bc8 <I2C_ITError+0x1d8>)
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34
 8003a4a:	e030      	b.n	8003aae <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a4c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f9dd 	bl	8003e10 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f8e1 	bl	8003c1e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b60      	cmp	r3, #96	; 0x60
 8003a66:	d01f      	beq.n	8003aa8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d114      	bne.n	8003aa8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d109      	bne.n	8003aa0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2210      	movs	r2, #16
 8003a92:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	f043 0204 	orr.w	r2, r3, #4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d039      	beq.n	8003b30 <I2C_ITError+0x140>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b11      	cmp	r3, #17
 8003ac0:	d002      	beq.n	8003ac8 <I2C_ITError+0xd8>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b21      	cmp	r3, #33	; 0x21
 8003ac6:	d133      	bne.n	8003b30 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad6:	d107      	bne.n	8003ae8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ae6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fd fe15 	bl	800171c <HAL_DMA_GetState>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d017      	beq.n	8003b28 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	4a33      	ldr	r2, [pc, #204]	; (8003bcc <I2C_ITError+0x1dc>)
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fcef 	bl	80014f0 <HAL_DMA_Abort_IT>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d04d      	beq.n	8003bb4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b22:	4610      	mov	r0, r2
 8003b24:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b26:	e045      	b.n	8003bb4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f851 	bl	8003bd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b2e:	e041      	b.n	8003bb4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d039      	beq.n	8003bac <I2C_ITError+0x1bc>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b12      	cmp	r3, #18
 8003b3c:	d002      	beq.n	8003b44 <I2C_ITError+0x154>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b22      	cmp	r3, #34	; 0x22
 8003b42:	d133      	bne.n	8003bac <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b52:	d107      	bne.n	8003b64 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fdd7 	bl	800171c <HAL_DMA_GetState>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d017      	beq.n	8003ba4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <I2C_ITError+0x1dc>)
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fd fcb1 	bl	80014f0 <HAL_DMA_Abort_IT>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d011      	beq.n	8003bb8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ba2:	e009      	b.n	8003bb8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f813 	bl	8003bd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003baa:	e005      	b.n	8003bb8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f80f 	bl	8003bd0 <I2C_TreatErrorCallback>
  }
}
 8003bb2:	e002      	b.n	8003bba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bb4:	bf00      	nop
 8003bb6:	e000      	b.n	8003bba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bb8:	bf00      	nop
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	ffff0000 	.word	0xffff0000
 8003bc8:	08002af5 	.word	0x08002af5
 8003bcc:	08003c67 	.word	0x08003c67

08003bd0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b60      	cmp	r3, #96	; 0x60
 8003be2:	d10e      	bne.n	8003c02 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fe fe49 	bl	8002892 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c00:	e009      	b.n	8003c16 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7fe fe34 	bl	800287e <HAL_I2C_ErrorCallback>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d103      	bne.n	8003c3c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d007      	beq.n	8003c5a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699a      	ldr	r2, [r3, #24]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0201 	orr.w	r2, r2, #1
 8003c58:	619a      	str	r2, [r3, #24]
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	2200      	movs	r2, #0
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c90:	2200      	movs	r2, #0
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff ff9b 	bl	8003bd0 <I2C_TreatErrorCallback>
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	817b      	strh	r3, [r7, #10]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cb6:	897b      	ldrh	r3, [r7, #10]
 8003cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cbc:	7a7b      	ldrb	r3, [r7, #9]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	0d5b      	lsrs	r3, r3, #21
 8003cde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <I2C_TransferConfig+0x60>)
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	ea02 0103 	and.w	r1, r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	03ff63ff 	.word	0x03ff63ff

08003d08 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	4a39      	ldr	r2, [pc, #228]	; (8003e04 <I2C_Enable_IRQ+0xfc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d032      	beq.n	8003d88 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003d26:	4a38      	ldr	r2, [pc, #224]	; (8003e08 <I2C_Enable_IRQ+0x100>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d02d      	beq.n	8003d88 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003d30:	4a36      	ldr	r2, [pc, #216]	; (8003e0c <I2C_Enable_IRQ+0x104>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d028      	beq.n	8003d88 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	da03      	bge.n	8003d46 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d46:	887b      	ldrh	r3, [r7, #2]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003d56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003d68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d6a:	887b      	ldrh	r3, [r7, #2]
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d103      	bne.n	8003d78 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d78:	887b      	ldrh	r3, [r7, #2]
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d133      	bne.n	8003de6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f043 0320 	orr.w	r3, r3, #32
 8003d84:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d86:	e02e      	b.n	8003de6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	da03      	bge.n	8003d98 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d96:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d98:	887b      	ldrh	r3, [r7, #2]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003da8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003dba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d103      	bne.n	8003dca <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003dc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d103      	bne.n	8003dd8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003dd6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003dd8:	887b      	ldrh	r3, [r7, #2]
 8003dda:	2b40      	cmp	r3, #64	; 0x40
 8003ddc:	d103      	bne.n	8003de6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6819      	ldr	r1, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	08002ce7 	.word	0x08002ce7
 8003e08:	08003109 	.word	0x08003109
 8003e0c:	08002ebd 	.word	0x08002ebd

08003e10 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00f      	beq.n	8003e4a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003e30:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e3e:	2b28      	cmp	r3, #40	; 0x28
 8003e40:	d003      	beq.n	8003e4a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e48:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e4a:	887b      	ldrh	r3, [r7, #2]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00f      	beq.n	8003e74 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003e5a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e68:	2b28      	cmp	r3, #40	; 0x28
 8003e6a:	d003      	beq.n	8003e74 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e72:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da03      	bge.n	8003e84 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003e82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e84:	887b      	ldrh	r3, [r7, #2]
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d103      	bne.n	8003e92 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d103      	bne.n	8003ea0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f043 0320 	orr.w	r3, r3, #32
 8003e9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d103      	bne.n	8003eae <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6819      	ldr	r1, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	400a      	ands	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d138      	bne.n	8003f54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e032      	b.n	8003f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	; 0x24
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
  }
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d139      	bne.n	8003fec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e033      	b.n	8003fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2224      	movs	r2, #36	; 0x24
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
  }
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d141      	bne.n	800408e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800400a:	4b4b      	ldr	r3, [pc, #300]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004016:	d131      	bne.n	800407c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004018:	4b47      	ldr	r3, [pc, #284]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800401e:	4a46      	ldr	r2, [pc, #280]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004024:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004028:	4b43      	ldr	r3, [pc, #268]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004030:	4a41      	ldr	r2, [pc, #260]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004036:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004038:	4b40      	ldr	r3, [pc, #256]	; (800413c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2232      	movs	r2, #50	; 0x32
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	4a3f      	ldr	r2, [pc, #252]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	0c9b      	lsrs	r3, r3, #18
 800404a:	3301      	adds	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404e:	e002      	b.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b01      	subs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004056:	4b38      	ldr	r3, [pc, #224]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d102      	bne.n	800406a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f2      	bne.n	8004050 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800406a:	4b33      	ldr	r3, [pc, #204]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d158      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e057      	b.n	800412c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800407c:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004082:	4a2d      	ldr	r2, [pc, #180]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800408c:	e04d      	b.n	800412a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004094:	d141      	bne.n	800411a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004096:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a2:	d131      	bne.n	8004108 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040aa:	4a23      	ldr	r2, [pc, #140]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040b4:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040bc:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2232      	movs	r2, #50	; 0x32
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	0c9b      	lsrs	r3, r3, #18
 80040d6:	3301      	adds	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040da:	e002      	b.n	80040e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3b01      	subs	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ee:	d102      	bne.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f2      	bne.n	80040dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004102:	d112      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e011      	b.n	800412c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004118:	e007      	b.n	800412a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004122:	4a05      	ldr	r2, [pc, #20]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004124:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004128:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	40007000 	.word	0x40007000
 800413c:	20000010 	.word	0x20000010
 8004140:	431bde83 	.word	0x431bde83

08004144 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800414e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004152:	6093      	str	r3, [r2, #8]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40007000 	.word	0x40007000

08004164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e2fe      	b.n	8004774 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d075      	beq.n	800426e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004182:	4b97      	ldr	r3, [pc, #604]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418c:	4b94      	ldr	r3, [pc, #592]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d102      	bne.n	80041a2 <HAL_RCC_OscConfig+0x3e>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d002      	beq.n	80041a8 <HAL_RCC_OscConfig+0x44>
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d10b      	bne.n	80041c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	4b8d      	ldr	r3, [pc, #564]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05b      	beq.n	800426c <HAL_RCC_OscConfig+0x108>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d157      	bne.n	800426c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e2d9      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c8:	d106      	bne.n	80041d8 <HAL_RCC_OscConfig+0x74>
 80041ca:	4b85      	ldr	r3, [pc, #532]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a84      	ldr	r2, [pc, #528]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e01d      	b.n	8004214 <HAL_RCC_OscConfig+0xb0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x98>
 80041e2:	4b7f      	ldr	r3, [pc, #508]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a7e      	ldr	r2, [pc, #504]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b7c      	ldr	r3, [pc, #496]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a7b      	ldr	r2, [pc, #492]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0xb0>
 80041fc:	4b78      	ldr	r3, [pc, #480]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a77      	ldr	r2, [pc, #476]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b75      	ldr	r3, [pc, #468]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a74      	ldr	r2, [pc, #464]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 800420e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fc ff82 	bl	8001124 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004224:	f7fc ff7e 	bl	8001124 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e29e      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004236:	4b6a      	ldr	r3, [pc, #424]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0xc0>
 8004242:	e014      	b.n	800426e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fc ff6e 	bl	8001124 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7fc ff6a 	bl	8001124 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	; 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e28a      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800425e:	4b60      	ldr	r3, [pc, #384]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0xe8>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d075      	beq.n	8004366 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800427a:	4b59      	ldr	r3, [pc, #356]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004284:	4b56      	ldr	r3, [pc, #344]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	d102      	bne.n	800429a <HAL_RCC_OscConfig+0x136>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d002      	beq.n	80042a0 <HAL_RCC_OscConfig+0x13c>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b04      	cmp	r3, #4
 800429e:	d11f      	bne.n	80042e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a0:	4b4f      	ldr	r3, [pc, #316]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_OscConfig+0x154>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e25d      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b8:	4b49      	ldr	r3, [pc, #292]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	4946      	ldr	r1, [pc, #280]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042cc:	4b45      	ldr	r3, [pc, #276]	; (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fc fedb 	bl	800108c <HAL_InitTick>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d043      	beq.n	8004364 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e249      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d023      	beq.n	8004330 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e8:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3c      	ldr	r2, [pc, #240]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fc ff16 	bl	8001124 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fc ff12 	bl	8001124 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e232      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800430e:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	061b      	lsls	r3, r3, #24
 8004328:	492d      	ldr	r1, [pc, #180]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	604b      	str	r3, [r1, #4]
 800432e:	e01a      	b.n	8004366 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004330:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2a      	ldr	r2, [pc, #168]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 8004336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fc fef2 	bl	8001124 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004344:	f7fc feee 	bl	8001124 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e20e      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004356:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x1e0>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d041      	beq.n	80043f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800437a:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 800437c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004380:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fc fecb 	bl	8001124 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004392:	f7fc fec7 	bl	8001124 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e1e7      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0ef      	beq.n	8004392 <HAL_RCC_OscConfig+0x22e>
 80043b2:	e020      	b.n	80043f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80043b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fc feae 	bl	8001124 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043ca:	e00d      	b.n	80043e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fc feaa 	bl	8001124 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d906      	bls.n	80043e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1ca      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043e8:	4b8c      	ldr	r3, [pc, #560]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80043ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1ea      	bne.n	80043cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80a6 	beq.w	8004550 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004404:	2300      	movs	r3, #0
 8004406:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004408:	4b84      	ldr	r3, [pc, #528]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCC_OscConfig+0x2b4>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <HAL_RCC_OscConfig+0x2b6>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b7f      	ldr	r3, [pc, #508]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	4a7e      	ldr	r2, [pc, #504]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004428:	6593      	str	r3, [r2, #88]	; 0x58
 800442a:	4b7c      	ldr	r3, [pc, #496]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004436:	2301      	movs	r3, #1
 8004438:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800443a:	4b79      	ldr	r3, [pc, #484]	; (8004620 <HAL_RCC_OscConfig+0x4bc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d118      	bne.n	8004478 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004446:	4b76      	ldr	r3, [pc, #472]	; (8004620 <HAL_RCC_OscConfig+0x4bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a75      	ldr	r2, [pc, #468]	; (8004620 <HAL_RCC_OscConfig+0x4bc>)
 800444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004452:	f7fc fe67 	bl	8001124 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445a:	f7fc fe63 	bl	8001124 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e183      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446c:	4b6c      	ldr	r3, [pc, #432]	; (8004620 <HAL_RCC_OscConfig+0x4bc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d108      	bne.n	8004492 <HAL_RCC_OscConfig+0x32e>
 8004480:	4b66      	ldr	r3, [pc, #408]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	4a65      	ldr	r2, [pc, #404]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004490:	e024      	b.n	80044dc <HAL_RCC_OscConfig+0x378>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d110      	bne.n	80044bc <HAL_RCC_OscConfig+0x358>
 800449a:	4b60      	ldr	r3, [pc, #384]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	4a5e      	ldr	r2, [pc, #376]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	f043 0304 	orr.w	r3, r3, #4
 80044a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044aa:	4b5c      	ldr	r3, [pc, #368]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	4a5a      	ldr	r2, [pc, #360]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ba:	e00f      	b.n	80044dc <HAL_RCC_OscConfig+0x378>
 80044bc:	4b57      	ldr	r3, [pc, #348]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	4a56      	ldr	r2, [pc, #344]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044cc:	4b53      	ldr	r3, [pc, #332]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	4a52      	ldr	r2, [pc, #328]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d016      	beq.n	8004512 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fc fe1e 	bl	8001124 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f7fc fe1a 	bl	8001124 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e138      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004502:	4b46      	ldr	r3, [pc, #280]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0ed      	beq.n	80044ec <HAL_RCC_OscConfig+0x388>
 8004510:	e015      	b.n	800453e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004512:	f7fc fe07 	bl	8001124 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004518:	e00a      	b.n	8004530 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fc fe03 	bl	8001124 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e121      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004530:	4b3a      	ldr	r3, [pc, #232]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1ed      	bne.n	800451a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800453e:	7ffb      	ldrb	r3, [r7, #31]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d105      	bne.n	8004550 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004544:	4b35      	ldr	r3, [pc, #212]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	4a34      	ldr	r2, [pc, #208]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 800454a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d03c      	beq.n	80045d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01c      	beq.n	800459e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004564:	4b2d      	ldr	r3, [pc, #180]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 8004566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800456a:	4a2c      	ldr	r2, [pc, #176]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fc fdd6 	bl	8001124 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800457c:	f7fc fdd2 	bl	8001124 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0f2      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800458e:	4b23      	ldr	r3, [pc, #140]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 8004590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ef      	beq.n	800457c <HAL_RCC_OscConfig+0x418>
 800459c:	e01b      	b.n	80045d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80045a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a4:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ae:	f7fc fdb9 	bl	8001124 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045b6:	f7fc fdb5 	bl	8001124 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0d5      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045c8:	4b14      	ldr	r3, [pc, #80]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80045ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ef      	bne.n	80045b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80c9 	beq.w	8004772 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045e0:	4b0e      	ldr	r3, [pc, #56]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	f000 8083 	beq.w	80046f4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d15e      	bne.n	80046b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <HAL_RCC_OscConfig+0x4b8>)
 80045fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fc fd8f 	bl	8001124 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004608:	e00c      	b.n	8004624 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460a:	f7fc fd8b 	bl	8001124 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d905      	bls.n	8004624 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e0ab      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
 800461c:	40021000 	.word	0x40021000
 8004620:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004624:	4b55      	ldr	r3, [pc, #340]	; (800477c <HAL_RCC_OscConfig+0x618>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1ec      	bne.n	800460a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004630:	4b52      	ldr	r3, [pc, #328]	; (800477c <HAL_RCC_OscConfig+0x618>)
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	4b52      	ldr	r3, [pc, #328]	; (8004780 <HAL_RCC_OscConfig+0x61c>)
 8004636:	4013      	ands	r3, r2
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6a11      	ldr	r1, [r2, #32]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004640:	3a01      	subs	r2, #1
 8004642:	0112      	lsls	r2, r2, #4
 8004644:	4311      	orrs	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800464a:	0212      	lsls	r2, r2, #8
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004652:	0852      	lsrs	r2, r2, #1
 8004654:	3a01      	subs	r2, #1
 8004656:	0552      	lsls	r2, r2, #21
 8004658:	4311      	orrs	r1, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800465e:	0852      	lsrs	r2, r2, #1
 8004660:	3a01      	subs	r2, #1
 8004662:	0652      	lsls	r2, r2, #25
 8004664:	4311      	orrs	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800466a:	06d2      	lsls	r2, r2, #27
 800466c:	430a      	orrs	r2, r1
 800466e:	4943      	ldr	r1, [pc, #268]	; (800477c <HAL_RCC_OscConfig+0x618>)
 8004670:	4313      	orrs	r3, r2
 8004672:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004674:	4b41      	ldr	r3, [pc, #260]	; (800477c <HAL_RCC_OscConfig+0x618>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a40      	ldr	r2, [pc, #256]	; (800477c <HAL_RCC_OscConfig+0x618>)
 800467a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004680:	4b3e      	ldr	r3, [pc, #248]	; (800477c <HAL_RCC_OscConfig+0x618>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a3d      	ldr	r2, [pc, #244]	; (800477c <HAL_RCC_OscConfig+0x618>)
 8004686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800468a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fc fd4a 	bl	8001124 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fc fd46 	bl	8001124 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e066      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a6:	4b35      	ldr	r3, [pc, #212]	; (800477c <HAL_RCC_OscConfig+0x618>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x530>
 80046b2:	e05e      	b.n	8004772 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b4:	4b31      	ldr	r3, [pc, #196]	; (800477c <HAL_RCC_OscConfig+0x618>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a30      	ldr	r2, [pc, #192]	; (800477c <HAL_RCC_OscConfig+0x618>)
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fc fd30 	bl	8001124 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fc fd2c 	bl	8001124 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e04c      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046da:	4b28      	ldr	r3, [pc, #160]	; (800477c <HAL_RCC_OscConfig+0x618>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046e6:	4b25      	ldr	r3, [pc, #148]	; (800477c <HAL_RCC_OscConfig+0x618>)
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	4924      	ldr	r1, [pc, #144]	; (800477c <HAL_RCC_OscConfig+0x618>)
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCC_OscConfig+0x620>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	60cb      	str	r3, [r1, #12]
 80046f2:	e03e      	b.n	8004772 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e039      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004700:	4b1e      	ldr	r3, [pc, #120]	; (800477c <HAL_RCC_OscConfig+0x618>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0203 	and.w	r2, r3, #3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	429a      	cmp	r2, r3
 8004712:	d12c      	bne.n	800476e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	3b01      	subs	r3, #1
 8004720:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d123      	bne.n	800476e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d11b      	bne.n	800476e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d113      	bne.n	800476e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	3b01      	subs	r3, #1
 8004754:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d109      	bne.n	800476e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d001      	beq.n	8004772 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40021000 	.word	0x40021000
 8004780:	019f800c 	.word	0x019f800c
 8004784:	feeefffc 	.word	0xfeeefffc

08004788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e11e      	b.n	80049de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047a0:	4b91      	ldr	r3, [pc, #580]	; (80049e8 <HAL_RCC_ClockConfig+0x260>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d910      	bls.n	80047d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ae:	4b8e      	ldr	r3, [pc, #568]	; (80049e8 <HAL_RCC_ClockConfig+0x260>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 020f 	bic.w	r2, r3, #15
 80047b6:	498c      	ldr	r1, [pc, #560]	; (80049e8 <HAL_RCC_ClockConfig+0x260>)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b8a      	ldr	r3, [pc, #552]	; (80049e8 <HAL_RCC_ClockConfig+0x260>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e106      	b.n	80049de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d073      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d129      	bne.n	8004838 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e4:	4b81      	ldr	r3, [pc, #516]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0f4      	b.n	80049de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047f4:	f000 f99e 	bl	8004b34 <RCC_GetSysClockFreqFromPLLSource>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4a7c      	ldr	r2, [pc, #496]	; (80049f0 <HAL_RCC_ClockConfig+0x268>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d93f      	bls.n	8004882 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004802:	4b7a      	ldr	r3, [pc, #488]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004816:	2b00      	cmp	r3, #0
 8004818:	d033      	beq.n	8004882 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800481e:	2b00      	cmp	r3, #0
 8004820:	d12f      	bne.n	8004882 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004822:	4b72      	ldr	r3, [pc, #456]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482a:	4a70      	ldr	r2, [pc, #448]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 800482c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004830:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	e024      	b.n	8004882 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d107      	bne.n	8004850 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004840:	4b6a      	ldr	r3, [pc, #424]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0c6      	b.n	80049de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004850:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0be      	b.n	80049de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004860:	f000 f8ce 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8004864:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4a61      	ldr	r2, [pc, #388]	; (80049f0 <HAL_RCC_ClockConfig+0x268>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d909      	bls.n	8004882 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800486e:	4b5f      	ldr	r3, [pc, #380]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004876:	4a5d      	ldr	r2, [pc, #372]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b5a      	ldr	r3, [pc, #360]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4957      	ldr	r1, [pc, #348]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004894:	f7fc fc46 	bl	8001124 <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fc fc42 	bl	8001124 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e095      	b.n	80049de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b4e      	ldr	r3, [pc, #312]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d023      	beq.n	8004918 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048dc:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4a42      	ldr	r2, [pc, #264]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 80048e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048f4:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048fc:	4a3b      	ldr	r2, [pc, #236]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 80048fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004902:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004904:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4936      	ldr	r1, [pc, #216]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
 8004916:	e008      	b.n	800492a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b80      	cmp	r3, #128	; 0x80
 800491c:	d105      	bne.n	800492a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800491e:	4b33      	ldr	r3, [pc, #204]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	4a32      	ldr	r2, [pc, #200]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004924:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004928:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800492a:	4b2f      	ldr	r3, [pc, #188]	; (80049e8 <HAL_RCC_ClockConfig+0x260>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d21d      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_RCC_ClockConfig+0x260>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 020f 	bic.w	r2, r3, #15
 8004940:	4929      	ldr	r1, [pc, #164]	; (80049e8 <HAL_RCC_ClockConfig+0x260>)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	4313      	orrs	r3, r2
 8004946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004948:	f7fc fbec 	bl	8001124 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494e:	e00a      	b.n	8004966 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004950:	f7fc fbe8 	bl	8001124 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e03b      	b.n	80049de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <HAL_RCC_ClockConfig+0x260>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d1ed      	bne.n	8004950 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4917      	ldr	r1, [pc, #92]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	490f      	ldr	r1, [pc, #60]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049b2:	f000 f825 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_RCC_ClockConfig+0x264>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	490c      	ldr	r1, [pc, #48]	; (80049f4 <HAL_RCC_ClockConfig+0x26c>)
 80049c4:	5ccb      	ldrb	r3, [r1, r3]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	fa22 f303 	lsr.w	r3, r2, r3
 80049ce:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <HAL_RCC_ClockConfig+0x270>)
 80049d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049d2:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_RCC_ClockConfig+0x274>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fc fb58 	bl	800108c <HAL_InitTick>
 80049dc:	4603      	mov	r3, r0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40022000 	.word	0x40022000
 80049ec:	40021000 	.word	0x40021000
 80049f0:	04c4b400 	.word	0x04c4b400
 80049f4:	080066d8 	.word	0x080066d8
 80049f8:	20000010 	.word	0x20000010
 80049fc:	20000014 	.word	0x20000014

08004a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a06:	4b2c      	ldr	r3, [pc, #176]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d102      	bne.n	8004a18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a12:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	e047      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a18:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d102      	bne.n	8004a2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a24:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	e03e      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a2a:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d136      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a36:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a40:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d10c      	bne.n	8004a6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a54:	4a1a      	ldr	r2, [pc, #104]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a5e:	68d2      	ldr	r2, [r2, #12]
 8004a60:	0a12      	lsrs	r2, r2, #8
 8004a62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	617b      	str	r3, [r7, #20]
      break;
 8004a6c:	e00c      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a6e:	4a13      	ldr	r2, [pc, #76]	; (8004abc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a78:	68d2      	ldr	r2, [r2, #12]
 8004a7a:	0a12      	lsrs	r2, r2, #8
 8004a7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a80:	fb02 f303 	mul.w	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]
      break;
 8004a86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	0e5b      	lsrs	r3, r3, #25
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	e001      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004aa8:	693b      	ldr	r3, [r7, #16]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	016e3600 	.word	0x016e3600

08004ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000010 	.word	0x20000010

08004adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ae0:	f7ff fff0 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4904      	ldr	r1, [pc, #16]	; (8004b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000
 8004b04:	080066e8 	.word	0x080066e8

08004b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b0c:	f7ff ffda 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	0adb      	lsrs	r3, r3, #11
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	4904      	ldr	r1, [pc, #16]	; (8004b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	080066e8 	.word	0x080066e8

08004b34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b3a:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b44:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	3301      	adds	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d10c      	bne.n	8004b72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b58:	4a17      	ldr	r2, [pc, #92]	; (8004bb8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b62:	68d2      	ldr	r2, [r2, #12]
 8004b64:	0a12      	lsrs	r2, r2, #8
 8004b66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	617b      	str	r3, [r7, #20]
    break;
 8004b70:	e00c      	b.n	8004b8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b72:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b7c:	68d2      	ldr	r2, [r2, #12]
 8004b7e:	0a12      	lsrs	r2, r2, #8
 8004b80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b84:	fb02 f303 	mul.w	r3, r2, r3
 8004b88:	617b      	str	r3, [r7, #20]
    break;
 8004b8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	0e5b      	lsrs	r3, r3, #25
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	3301      	adds	r3, #1
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ba6:	687b      	ldr	r3, [r7, #4]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	016e3600 	.word	0x016e3600
 8004bbc:	00f42400 	.word	0x00f42400

08004bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bc8:	2300      	movs	r3, #0
 8004bca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bcc:	2300      	movs	r3, #0
 8004bce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8098 	beq.w	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bde:	2300      	movs	r3, #0
 8004be0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004be2:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10d      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bee:	4b40      	ldr	r3, [pc, #256]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	4a3f      	ldr	r2, [pc, #252]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8004bfa:	4b3d      	ldr	r3, [pc, #244]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c06:	2301      	movs	r3, #1
 8004c08:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c0a:	4b3a      	ldr	r3, [pc, #232]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a39      	ldr	r2, [pc, #228]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c16:	f7fc fa85 	bl	8001124 <HAL_GetTick>
 8004c1a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c1c:	e009      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1e:	f7fc fa81 	bl	8001124 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d902      	bls.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	74fb      	strb	r3, [r7, #19]
        break;
 8004c30:	e005      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c32:	4b30      	ldr	r3, [pc, #192]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0ef      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c3e:	7cfb      	ldrb	r3, [r7, #19]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d159      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c44:	4b2a      	ldr	r3, [pc, #168]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01e      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d019      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c60:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c6c:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c7c:	4b1c      	ldr	r3, [pc, #112]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c8c:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d016      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9e:	f7fc fa41 	bl	8001124 <HAL_GetTick>
 8004ca2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca4:	e00b      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fc fa3d 	bl	8001124 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d902      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	74fb      	strb	r3, [r7, #19]
            break;
 8004cbc:	e006      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0ec      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	4903      	ldr	r1, [pc, #12]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ce8:	e008      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cea:	7cfb      	ldrb	r3, [r7, #19]
 8004cec:	74bb      	strb	r3, [r7, #18]
 8004cee:	e005      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf8:	7cfb      	ldrb	r3, [r7, #19]
 8004cfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cfc:	7c7b      	ldrb	r3, [r7, #17]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d105      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d02:	4ba7      	ldr	r3, [pc, #668]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	4aa6      	ldr	r2, [pc, #664]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d1a:	4ba1      	ldr	r3, [pc, #644]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	f023 0203 	bic.w	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	499d      	ldr	r1, [pc, #628]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d3c:	4b98      	ldr	r3, [pc, #608]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f023 020c 	bic.w	r2, r3, #12
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	4995      	ldr	r1, [pc, #596]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d5e:	4b90      	ldr	r3, [pc, #576]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	498c      	ldr	r1, [pc, #560]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d80:	4b87      	ldr	r3, [pc, #540]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	4984      	ldr	r1, [pc, #528]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004da2:	4b7f      	ldr	r3, [pc, #508]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	497b      	ldr	r1, [pc, #492]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dc4:	4b76      	ldr	r3, [pc, #472]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	4973      	ldr	r1, [pc, #460]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004de6:	4b6e      	ldr	r3, [pc, #440]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	496a      	ldr	r1, [pc, #424]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e08:	4b65      	ldr	r3, [pc, #404]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	4962      	ldr	r1, [pc, #392]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e2a:	4b5d      	ldr	r3, [pc, #372]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	4959      	ldr	r1, [pc, #356]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e4c:	4b54      	ldr	r3, [pc, #336]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e52:	f023 0203 	bic.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	4951      	ldr	r1, [pc, #324]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e6e:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	4948      	ldr	r1, [pc, #288]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e90:	4b43      	ldr	r3, [pc, #268]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	4940      	ldr	r1, [pc, #256]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eae:	d105      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb0:	4b3b      	ldr	r3, [pc, #236]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4a3a      	ldr	r2, [pc, #232]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d015      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ec8:	4b35      	ldr	r3, [pc, #212]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	4932      	ldr	r1, [pc, #200]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee8:	4b2d      	ldr	r3, [pc, #180]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a2c      	ldr	r2, [pc, #176]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d015      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	4924      	ldr	r1, [pc, #144]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f20:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4a1e      	ldr	r2, [pc, #120]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d015      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	4916      	ldr	r1, [pc, #88]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f56:	d105      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f58:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a10      	ldr	r2, [pc, #64]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d019      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	4908      	ldr	r1, [pc, #32]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f8e:	d109      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f90:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a02      	ldr	r2, [pc, #8]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9a:	60d3      	str	r3, [r2, #12]
 8004f9c:	e002      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d015      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fb0:	4b29      	ldr	r3, [pc, #164]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	4926      	ldr	r1, [pc, #152]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fce:	d105      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fd0:	4b21      	ldr	r3, [pc, #132]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a20      	ldr	r2, [pc, #128]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fda:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d015      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff6:	4918      	ldr	r1, [pc, #96]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005006:	d105      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005008:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a12      	ldr	r2, [pc, #72]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800500e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005012:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d015      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005020:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005026:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	490a      	ldr	r1, [pc, #40]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800503e:	d105      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800504a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800504c:	7cbb      	ldrb	r3, [r7, #18]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000

0800505c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e09d      	b.n	80051aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d108      	bne.n	8005088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507e:	d009      	beq.n	8005094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	61da      	str	r2, [r3, #28]
 8005086:	e005      	b.n	8005094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fb fee8 	bl	8000e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d4:	d902      	bls.n	80050dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	e002      	b.n	80050e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050ea:	d007      	beq.n	80050fc <HAL_SPI_Init+0xa0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050f4:	d002      	beq.n	80050fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	ea42 0103 	orr.w	r1, r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	0c1b      	lsrs	r3, r3, #16
 8005158:	f003 0204 	and.w	r2, r3, #4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005178:	ea42 0103 	orr.w	r1, r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b088      	sub	sp, #32
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_SPI_Transmit+0x22>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e15f      	b.n	8005494 <HAL_SPI_Transmit+0x2e2>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051dc:	f7fb ffa2 	bl	8001124 <HAL_GetTick>
 80051e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d002      	beq.n	80051f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
 80051f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051f6:	e148      	b.n	800548a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_SPI_Transmit+0x52>
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d102      	bne.n	800520a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005208:	e13f      	b.n	800548a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2203      	movs	r2, #3
 800520e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005254:	d10f      	bne.n	8005276 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d007      	beq.n	8005294 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800529c:	d94f      	bls.n	800533e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Transmit+0xfa>
 80052a6:	8afb      	ldrh	r3, [r7, #22]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d142      	bne.n	8005332 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	881a      	ldrh	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052d0:	e02f      	b.n	8005332 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d112      	bne.n	8005306 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	881a      	ldrh	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005304:	e015      	b.n	8005332 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005306:	f7fb ff0d 	bl	8001124 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d803      	bhi.n	800531e <HAL_SPI_Transmit+0x16c>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d102      	bne.n	8005324 <HAL_SPI_Transmit+0x172>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005330:	e0ab      	b.n	800548a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1ca      	bne.n	80052d2 <HAL_SPI_Transmit+0x120>
 800533c:	e080      	b.n	8005440 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_SPI_Transmit+0x19a>
 8005346:	8afb      	ldrh	r3, [r7, #22]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d174      	bne.n	8005436 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b01      	cmp	r3, #1
 8005354:	d912      	bls.n	800537c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	881a      	ldrh	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b02      	subs	r3, #2
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	87da      	strh	r2, [r3, #62]	; 0x3e
 800537a:	e05c      	b.n	8005436 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	7812      	ldrb	r2, [r2, #0]
 8005388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80053a2:	e048      	b.n	8005436 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d12b      	bne.n	800540a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d912      	bls.n	80053e2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	881a      	ldrh	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	1c9a      	adds	r2, r3, #2
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b02      	subs	r3, #2
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053e0:	e029      	b.n	8005436 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	7812      	ldrb	r2, [r2, #0]
 80053ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005408:	e015      	b.n	8005436 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800540a:	f7fb fe8b 	bl	8001124 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d803      	bhi.n	8005422 <HAL_SPI_Transmit+0x270>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d102      	bne.n	8005428 <HAL_SPI_Transmit+0x276>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005434:	e029      	b.n	800548a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1b1      	bne.n	80053a4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 fa5b 	bl	8005900 <SPI_EndRxTxTransaction>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e003      	b.n	800548a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005492:	7ffb      	ldrb	r3, [r7, #31]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10e      	bne.n	80054dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d009      	beq.n	80054dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
    return;
 80054da:	e0ce      	b.n	800567a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_SPI_IRQHandler+0x5e>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
    return;
 80054f8:	e0bf      	b.n	800567a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <HAL_SPI_IRQHandler+0x7e>
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d105      	bne.n	800551a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80b0 	beq.w	800567a <HAL_SPI_IRQHandler+0x1de>
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80aa 	beq.w	800567a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d023      	beq.n	8005578 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b03      	cmp	r3, #3
 800553a:	d011      	beq.n	8005560 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005540:	f043 0204 	orr.w	r2, r3, #4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	e00b      	b.n	8005578 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693b      	ldr	r3, [r7, #16]
        return;
 8005576:	e080      	b.n	800567a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d014      	beq.n	80055ac <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005586:	f043 0201 	orr.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ba:	f043 0208 	orr.w	r2, r3, #8
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d04f      	beq.n	8005678 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d104      	bne.n	8005604 <HAL_SPI_IRQHandler+0x168>
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d034      	beq.n	800566e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0203 	bic.w	r2, r2, #3
 8005612:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	2b00      	cmp	r3, #0
 800561a:	d011      	beq.n	8005640 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005620:	4a17      	ldr	r2, [pc, #92]	; (8005680 <HAL_SPI_IRQHandler+0x1e4>)
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	4618      	mov	r0, r3
 800562a:	f7fb ff61 	bl	80014f0 <HAL_DMA_Abort_IT>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005638:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005644:	2b00      	cmp	r3, #0
 8005646:	d016      	beq.n	8005676 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564c:	4a0c      	ldr	r2, [pc, #48]	; (8005680 <HAL_SPI_IRQHandler+0x1e4>)
 800564e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	4618      	mov	r0, r3
 8005656:	f7fb ff4b 	bl	80014f0 <HAL_DMA_Abort_IT>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005664:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800566c:	e003      	b.n	8005676 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f808 	bl	8005684 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005674:	e000      	b.n	8005678 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005676:	bf00      	nop
    return;
 8005678:	bf00      	nop
  }
}
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	08005699 	.word	0x08005699

08005684 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7ff ffe5 	bl	8005684 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	4613      	mov	r3, r2
 80056d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056d4:	f7fb fd26 	bl	8001124 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	4413      	add	r3, r2
 80056e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056e4:	f7fb fd1e 	bl	8001124 <HAL_GetTick>
 80056e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056ea:	4b39      	ldr	r3, [pc, #228]	; (80057d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	015b      	lsls	r3, r3, #5
 80056f0:	0d1b      	lsrs	r3, r3, #20
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	fb02 f303 	mul.w	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056fa:	e054      	b.n	80057a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d050      	beq.n	80057a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005704:	f7fb fd0e 	bl	8001124 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	429a      	cmp	r2, r3
 8005712:	d902      	bls.n	800571a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d13d      	bne.n	8005796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005732:	d111      	bne.n	8005758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573c:	d004      	beq.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005746:	d107      	bne.n	8005758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005760:	d10f      	bne.n	8005782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e017      	b.n	80057c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4013      	ands	r3, r2
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d19b      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000010 	.word	0x20000010

080057d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	; 0x28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057e6:	f7fb fc9d 	bl	8001124 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	4413      	add	r3, r2
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80057f6:	f7fb fc95 	bl	8001124 <HAL_GetTick>
 80057fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005804:	4b3d      	ldr	r3, [pc, #244]	; (80058fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	00da      	lsls	r2, r3, #3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	0d1b      	lsrs	r3, r3, #20
 8005814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005816:	fb02 f303 	mul.w	r3, r2, r3
 800581a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800581c:	e060      	b.n	80058e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005824:	d107      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005834:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d050      	beq.n	80058e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800583e:	f7fb fc71 	bl	8001124 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584a:	429a      	cmp	r2, r3
 800584c:	d902      	bls.n	8005854 <SPI_WaitFifoStateUntilTimeout+0x80>
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	d13d      	bne.n	80058d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005862:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586c:	d111      	bne.n	8005892 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005876:	d004      	beq.n	8005882 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005880:	d107      	bne.n	8005892 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589a:	d10f      	bne.n	80058bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e010      	b.n	80058f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	3b01      	subs	r3, #1
 80058de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4013      	ands	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d196      	bne.n	800581e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3728      	adds	r7, #40	; 0x28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000010 	.word	0x20000010

08005900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2200      	movs	r2, #0
 8005914:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff ff5b 	bl	80057d4 <SPI_WaitFifoStateUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005928:	f043 0220 	orr.w	r2, r3, #32
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e027      	b.n	8005984 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2200      	movs	r2, #0
 800593c:	2180      	movs	r1, #128	; 0x80
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff fec0 	bl	80056c4 <SPI_WaitFlagStateUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800594e:	f043 0220 	orr.w	r2, r3, #32
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e014      	b.n	8005984 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2200      	movs	r2, #0
 8005962:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7ff ff34 	bl	80057d4 <SPI_WaitFifoStateUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005976:	f043 0220 	orr.w	r2, r3, #32
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e000      	b.n	8005984 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e042      	b.n	8005a24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7fb fa0f 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2224      	movs	r2, #36	; 0x24
 80059ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fb24 	bl	8006024 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f825 	bl	8005a2c <UART_SetConfig>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e01b      	b.n	8005a24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fba3 	bl	8006168 <UART_CheckIdleState>
 8005a22:	4603      	mov	r3, r0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a30:	b08c      	sub	sp, #48	; 0x30
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4baa      	ldr	r3, [pc, #680]	; (8005d04 <UART_SetConfig+0x2d8>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	6812      	ldr	r2, [r2, #0]
 8005a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a9f      	ldr	r2, [pc, #636]	; (8005d08 <UART_SetConfig+0x2dc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a94:	4313      	orrs	r3, r2
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005aa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	f023 010f 	bic.w	r1, r3, #15
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a90      	ldr	r2, [pc, #576]	; (8005d0c <UART_SetConfig+0x2e0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d125      	bne.n	8005b1c <UART_SetConfig+0xf0>
 8005ad0:	4b8f      	ldr	r3, [pc, #572]	; (8005d10 <UART_SetConfig+0x2e4>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d81a      	bhi.n	8005b14 <UART_SetConfig+0xe8>
 8005ade:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <UART_SetConfig+0xb8>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005af5 	.word	0x08005af5
 8005ae8:	08005b05 	.word	0x08005b05
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afa:	e116      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005afc:	2302      	movs	r3, #2
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b02:	e112      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005b04:	2304      	movs	r3, #4
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0a:	e10e      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b12:	e10a      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	e106      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a7c      	ldr	r2, [pc, #496]	; (8005d14 <UART_SetConfig+0x2e8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d138      	bne.n	8005b98 <UART_SetConfig+0x16c>
 8005b26:	4b7a      	ldr	r3, [pc, #488]	; (8005d10 <UART_SetConfig+0x2e4>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	d82d      	bhi.n	8005b90 <UART_SetConfig+0x164>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <UART_SetConfig+0x110>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b71 	.word	0x08005b71
 8005b40:	08005b91 	.word	0x08005b91
 8005b44:	08005b91 	.word	0x08005b91
 8005b48:	08005b91 	.word	0x08005b91
 8005b4c:	08005b81 	.word	0x08005b81
 8005b50:	08005b91 	.word	0x08005b91
 8005b54:	08005b91 	.word	0x08005b91
 8005b58:	08005b91 	.word	0x08005b91
 8005b5c:	08005b79 	.word	0x08005b79
 8005b60:	08005b91 	.word	0x08005b91
 8005b64:	08005b91 	.word	0x08005b91
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005b89 	.word	0x08005b89
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b76:	e0d8      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7e:	e0d4      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b86:	e0d0      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8e:	e0cc      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b96:	e0c8      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5e      	ldr	r2, [pc, #376]	; (8005d18 <UART_SetConfig+0x2ec>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d125      	bne.n	8005bee <UART_SetConfig+0x1c2>
 8005ba2:	4b5b      	ldr	r3, [pc, #364]	; (8005d10 <UART_SetConfig+0x2e4>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bac:	2b30      	cmp	r3, #48	; 0x30
 8005bae:	d016      	beq.n	8005bde <UART_SetConfig+0x1b2>
 8005bb0:	2b30      	cmp	r3, #48	; 0x30
 8005bb2:	d818      	bhi.n	8005be6 <UART_SetConfig+0x1ba>
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d00a      	beq.n	8005bce <UART_SetConfig+0x1a2>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d814      	bhi.n	8005be6 <UART_SetConfig+0x1ba>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <UART_SetConfig+0x19a>
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d008      	beq.n	8005bd6 <UART_SetConfig+0x1aa>
 8005bc4:	e00f      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bcc:	e0ad      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd4:	e0a9      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005bd6:	2304      	movs	r3, #4
 8005bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bdc:	e0a5      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005bde:	2308      	movs	r3, #8
 8005be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be4:	e0a1      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005be6:	2310      	movs	r3, #16
 8005be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bec:	e09d      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a4a      	ldr	r2, [pc, #296]	; (8005d1c <UART_SetConfig+0x2f0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d125      	bne.n	8005c44 <UART_SetConfig+0x218>
 8005bf8:	4b45      	ldr	r3, [pc, #276]	; (8005d10 <UART_SetConfig+0x2e4>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c02:	2bc0      	cmp	r3, #192	; 0xc0
 8005c04:	d016      	beq.n	8005c34 <UART_SetConfig+0x208>
 8005c06:	2bc0      	cmp	r3, #192	; 0xc0
 8005c08:	d818      	bhi.n	8005c3c <UART_SetConfig+0x210>
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d00a      	beq.n	8005c24 <UART_SetConfig+0x1f8>
 8005c0e:	2b80      	cmp	r3, #128	; 0x80
 8005c10:	d814      	bhi.n	8005c3c <UART_SetConfig+0x210>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <UART_SetConfig+0x1f0>
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d008      	beq.n	8005c2c <UART_SetConfig+0x200>
 8005c1a:	e00f      	b.n	8005c3c <UART_SetConfig+0x210>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c22:	e082      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005c24:	2302      	movs	r3, #2
 8005c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2a:	e07e      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c32:	e07a      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3a:	e076      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c42:	e072      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a35      	ldr	r2, [pc, #212]	; (8005d20 <UART_SetConfig+0x2f4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d12a      	bne.n	8005ca4 <UART_SetConfig+0x278>
 8005c4e:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <UART_SetConfig+0x2e4>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c5c:	d01a      	beq.n	8005c94 <UART_SetConfig+0x268>
 8005c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c62:	d81b      	bhi.n	8005c9c <UART_SetConfig+0x270>
 8005c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c68:	d00c      	beq.n	8005c84 <UART_SetConfig+0x258>
 8005c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6e:	d815      	bhi.n	8005c9c <UART_SetConfig+0x270>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <UART_SetConfig+0x250>
 8005c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c78:	d008      	beq.n	8005c8c <UART_SetConfig+0x260>
 8005c7a:	e00f      	b.n	8005c9c <UART_SetConfig+0x270>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c82:	e052      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005c84:	2302      	movs	r3, #2
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8a:	e04e      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c92:	e04a      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9a:	e046      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca2:	e042      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <UART_SetConfig+0x2dc>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d13a      	bne.n	8005d24 <UART_SetConfig+0x2f8>
 8005cae:	4b18      	ldr	r3, [pc, #96]	; (8005d10 <UART_SetConfig+0x2e4>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cbc:	d01a      	beq.n	8005cf4 <UART_SetConfig+0x2c8>
 8005cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cc2:	d81b      	bhi.n	8005cfc <UART_SetConfig+0x2d0>
 8005cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc8:	d00c      	beq.n	8005ce4 <UART_SetConfig+0x2b8>
 8005cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cce:	d815      	bhi.n	8005cfc <UART_SetConfig+0x2d0>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <UART_SetConfig+0x2b0>
 8005cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd8:	d008      	beq.n	8005cec <UART_SetConfig+0x2c0>
 8005cda:	e00f      	b.n	8005cfc <UART_SetConfig+0x2d0>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ce2:	e022      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cea:	e01e      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005cec:	2304      	movs	r3, #4
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf2:	e01a      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfa:	e016      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d02:	e012      	b.n	8005d2a <UART_SetConfig+0x2fe>
 8005d04:	cfff69f3 	.word	0xcfff69f3
 8005d08:	40008000 	.word	0x40008000
 8005d0c:	40013800 	.word	0x40013800
 8005d10:	40021000 	.word	0x40021000
 8005d14:	40004400 	.word	0x40004400
 8005d18:	40004800 	.word	0x40004800
 8005d1c:	40004c00 	.word	0x40004c00
 8005d20:	40005000 	.word	0x40005000
 8005d24:	2310      	movs	r3, #16
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4aae      	ldr	r2, [pc, #696]	; (8005fe8 <UART_SetConfig+0x5bc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	f040 8097 	bne.w	8005e64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d823      	bhi.n	8005d86 <UART_SetConfig+0x35a>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <UART_SetConfig+0x318>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08005d87 	.word	0x08005d87
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d87 	.word	0x08005d87
 8005d54:	08005d77 	.word	0x08005d77
 8005d58:	08005d87 	.word	0x08005d87
 8005d5c:	08005d87 	.word	0x08005d87
 8005d60:	08005d87 	.word	0x08005d87
 8005d64:	08005d7f 	.word	0x08005d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d68:	f7fe feb8 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 8005d6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d6e:	e010      	b.n	8005d92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d70:	4b9e      	ldr	r3, [pc, #632]	; (8005fec <UART_SetConfig+0x5c0>)
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d74:	e00d      	b.n	8005d92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d76:	f7fe fe43 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8005d7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d7c:	e009      	b.n	8005d92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d84:	e005      	b.n	8005d92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8130 	beq.w	8005ffa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	4a94      	ldr	r2, [pc, #592]	; (8005ff0 <UART_SetConfig+0x5c4>)
 8005da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da4:	461a      	mov	r2, r3
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	4413      	add	r3, r2
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d305      	bcc.n	8005dca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d903      	bls.n	8005dd2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005dd0:	e113      	b.n	8005ffa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	60fa      	str	r2, [r7, #12]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	4a84      	ldr	r2, [pc, #528]	; (8005ff0 <UART_SetConfig+0x5c4>)
 8005de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2200      	movs	r2, #0
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005df4:	f7fa fa10 	bl	8000218 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	020b      	lsls	r3, r1, #8
 8005e0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e0e:	0202      	lsls	r2, r0, #8
 8005e10:	6979      	ldr	r1, [r7, #20]
 8005e12:	6849      	ldr	r1, [r1, #4]
 8005e14:	0849      	lsrs	r1, r1, #1
 8005e16:	2000      	movs	r0, #0
 8005e18:	460c      	mov	r4, r1
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	eb12 0804 	adds.w	r8, r2, r4
 8005e20:	eb43 0905 	adc.w	r9, r3, r5
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	469a      	mov	sl, r3
 8005e2c:	4693      	mov	fp, r2
 8005e2e:	4652      	mov	r2, sl
 8005e30:	465b      	mov	r3, fp
 8005e32:	4640      	mov	r0, r8
 8005e34:	4649      	mov	r1, r9
 8005e36:	f7fa f9ef 	bl	8000218 <__aeabi_uldivmod>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4613      	mov	r3, r2
 8005e40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e48:	d308      	bcc.n	8005e5c <UART_SetConfig+0x430>
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e50:	d204      	bcs.n	8005e5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6a3a      	ldr	r2, [r7, #32]
 8005e58:	60da      	str	r2, [r3, #12]
 8005e5a:	e0ce      	b.n	8005ffa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e62:	e0ca      	b.n	8005ffa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6c:	d166      	bne.n	8005f3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d827      	bhi.n	8005ec6 <UART_SetConfig+0x49a>
 8005e76:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <UART_SetConfig+0x450>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005eb1 	.word	0x08005eb1
 8005e88:	08005ec7 	.word	0x08005ec7
 8005e8c:	08005eb7 	.word	0x08005eb7
 8005e90:	08005ec7 	.word	0x08005ec7
 8005e94:	08005ec7 	.word	0x08005ec7
 8005e98:	08005ec7 	.word	0x08005ec7
 8005e9c:	08005ebf 	.word	0x08005ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea0:	f7fe fe1c 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 8005ea4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ea6:	e014      	b.n	8005ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ea8:	f7fe fe2e 	bl	8004b08 <HAL_RCC_GetPCLK2Freq>
 8005eac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005eae:	e010      	b.n	8005ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb0:	4b4e      	ldr	r3, [pc, #312]	; (8005fec <UART_SetConfig+0x5c0>)
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005eb4:	e00d      	b.n	8005ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eb6:	f7fe fda3 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8005eba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ebc:	e009      	b.n	8005ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ec4:	e005      	b.n	8005ed2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ed0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8090 	beq.w	8005ffa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	4a44      	ldr	r2, [pc, #272]	; (8005ff0 <UART_SetConfig+0x5c4>)
 8005ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eec:	005a      	lsls	r2, r3, #1
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	441a      	add	r2, r3
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2b0f      	cmp	r3, #15
 8005f04:	d916      	bls.n	8005f34 <UART_SetConfig+0x508>
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0c:	d212      	bcs.n	8005f34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f023 030f 	bic.w	r3, r3, #15
 8005f16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	085b      	lsrs	r3, r3, #1
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	8bfb      	ldrh	r3, [r7, #30]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	8bfa      	ldrh	r2, [r7, #30]
 8005f30:	60da      	str	r2, [r3, #12]
 8005f32:	e062      	b.n	8005ffa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f3a:	e05e      	b.n	8005ffa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d828      	bhi.n	8005f96 <UART_SetConfig+0x56a>
 8005f44:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <UART_SetConfig+0x520>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	08005f97 	.word	0x08005f97
 8005f5c:	08005f87 	.word	0x08005f87
 8005f60:	08005f97 	.word	0x08005f97
 8005f64:	08005f97 	.word	0x08005f97
 8005f68:	08005f97 	.word	0x08005f97
 8005f6c:	08005f8f 	.word	0x08005f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f70:	f7fe fdb4 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 8005f74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f76:	e014      	b.n	8005fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f78:	f7fe fdc6 	bl	8004b08 <HAL_RCC_GetPCLK2Freq>
 8005f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f7e:	e010      	b.n	8005fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f80:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <UART_SetConfig+0x5c0>)
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f84:	e00d      	b.n	8005fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f86:	f7fe fd3b 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8005f8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f8c:	e009      	b.n	8005fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f94:	e005      	b.n	8005fa2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d028      	beq.n	8005ffa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	4a10      	ldr	r2, [pc, #64]	; (8005ff0 <UART_SetConfig+0x5c4>)
 8005fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	441a      	add	r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	2b0f      	cmp	r3, #15
 8005fd0:	d910      	bls.n	8005ff4 <UART_SetConfig+0x5c8>
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd8:	d20c      	bcs.n	8005ff4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	e009      	b.n	8005ffa <UART_SetConfig+0x5ce>
 8005fe6:	bf00      	nop
 8005fe8:	40008000 	.word	0x40008000
 8005fec:	00f42400 	.word	0x00f42400
 8005ff0:	08006700 	.word	0x08006700
      }
      else
      {
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2201      	movs	r2, #1
 8006006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2200      	movs	r2, #0
 800600e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2200      	movs	r2, #0
 8006014:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006016:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800601a:	4618      	mov	r0, r3
 800601c:	3730      	adds	r7, #48	; 0x30
 800601e:	46bd      	mov	sp, r7
 8006020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01a      	beq.n	800613a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006122:	d10a      	bne.n	800613a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b098      	sub	sp, #96	; 0x60
 800616c:	af02      	add	r7, sp, #8
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006178:	f7fa ffd4 	bl	8001124 <HAL_GetTick>
 800617c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b08      	cmp	r3, #8
 800618a:	d12f      	bne.n	80061ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800618c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006194:	2200      	movs	r2, #0
 8006196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f88e 	bl	80062bc <UART_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d022      	beq.n	80061ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ba:	653b      	str	r3, [r7, #80]	; 0x50
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c4:	647b      	str	r3, [r7, #68]	; 0x44
 80061c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e6      	bne.n	80061a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e063      	b.n	80062b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d149      	bne.n	800628e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006202:	2200      	movs	r2, #0
 8006204:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f857 	bl	80062bc <UART_WaitOnFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d03c      	beq.n	800628e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	e853 3f00 	ldrex	r3, [r3]
 8006220:	623b      	str	r3, [r7, #32]
   return(result);
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006232:	633b      	str	r3, [r7, #48]	; 0x30
 8006234:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e6      	bne.n	8006214 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3308      	adds	r3, #8
 800624c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	60fb      	str	r3, [r7, #12]
   return(result);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	64bb      	str	r3, [r7, #72]	; 0x48
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006266:	61fa      	str	r2, [r7, #28]
 8006268:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	69b9      	ldr	r1, [r7, #24]
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	e841 2300 	strex	r3, r2, [r1]
 8006272:	617b      	str	r3, [r7, #20]
   return(result);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e5      	bne.n	8006246 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e012      	b.n	80062b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3758      	adds	r7, #88	; 0x58
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	4613      	mov	r3, r2
 80062ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062cc:	e04f      	b.n	800636e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d04b      	beq.n	800636e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d6:	f7fa ff25 	bl	8001124 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d302      	bcc.n	80062ec <UART_WaitOnFlagUntilTimeout+0x30>
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e04e      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d037      	beq.n	800636e <UART_WaitOnFlagUntilTimeout+0xb2>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b80      	cmp	r3, #128	; 0x80
 8006302:	d034      	beq.n	800636e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d031      	beq.n	800636e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b08      	cmp	r3, #8
 8006316:	d110      	bne.n	800633a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2208      	movs	r2, #8
 800631e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f838 	bl	8006396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2208      	movs	r2, #8
 800632a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e029      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006348:	d111      	bne.n	800636e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f81e 	bl	8006396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e00f      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69da      	ldr	r2, [r3, #28]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4013      	ands	r3, r2
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	429a      	cmp	r2, r3
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	79fb      	ldrb	r3, [r7, #7]
 8006388:	429a      	cmp	r2, r3
 800638a:	d0a0      	beq.n	80062ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006396:	b480      	push	{r7}
 8006398:	b095      	sub	sp, #84	; 0x54
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063bc:	643b      	str	r3, [r7, #64]	; 0x40
 80063be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e6      	bne.n	800639e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3308      	adds	r3, #8
 80063d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e3      	bne.n	80063d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d118      	bne.n	8006442 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	60bb      	str	r3, [r7, #8]
   return(result);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f023 0310 	bic.w	r3, r3, #16
 8006424:	647b      	str	r3, [r7, #68]	; 0x44
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	6979      	ldr	r1, [r7, #20]
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	613b      	str	r3, [r7, #16]
   return(result);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e6      	bne.n	8006410 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006456:	bf00      	nop
 8006458:	3754      	adds	r7, #84	; 0x54
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_UARTEx_DisableFifoMode+0x16>
 8006474:	2302      	movs	r3, #2
 8006476:	e027      	b.n	80064c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2224      	movs	r2, #36	; 0x24
 8006484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0201 	bic.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e02d      	b.n	8006548 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2224      	movs	r2, #36	; 0x24
 80064f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f84f 	bl	80065cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006564:	2302      	movs	r3, #2
 8006566:	e02d      	b.n	80065c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2224      	movs	r2, #36	; 0x24
 8006574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0201 	bic.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f811 	bl	80065cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d108      	bne.n	80065ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065ec:	e031      	b.n	8006652 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065ee:	2308      	movs	r3, #8
 80065f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065f2:	2308      	movs	r3, #8
 80065f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	0e5b      	lsrs	r3, r3, #25
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	0f5b      	lsrs	r3, r3, #29
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	7b3a      	ldrb	r2, [r7, #12]
 800661a:	4911      	ldr	r1, [pc, #68]	; (8006660 <UARTEx_SetNbDataToProcess+0x94>)
 800661c:	5c8a      	ldrb	r2, [r1, r2]
 800661e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006622:	7b3a      	ldrb	r2, [r7, #12]
 8006624:	490f      	ldr	r1, [pc, #60]	; (8006664 <UARTEx_SetNbDataToProcess+0x98>)
 8006626:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006628:	fb93 f3f2 	sdiv	r3, r3, r2
 800662c:	b29a      	uxth	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	7b7a      	ldrb	r2, [r7, #13]
 8006638:	4909      	ldr	r1, [pc, #36]	; (8006660 <UARTEx_SetNbDataToProcess+0x94>)
 800663a:	5c8a      	ldrb	r2, [r1, r2]
 800663c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006640:	7b7a      	ldrb	r2, [r7, #13]
 8006642:	4908      	ldr	r1, [pc, #32]	; (8006664 <UARTEx_SetNbDataToProcess+0x98>)
 8006644:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006646:	fb93 f3f2 	sdiv	r3, r3, r2
 800664a:	b29a      	uxth	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	08006718 	.word	0x08006718
 8006664:	08006720 	.word	0x08006720

08006668 <memset>:
 8006668:	4402      	add	r2, r0
 800666a:	4603      	mov	r3, r0
 800666c:	4293      	cmp	r3, r2
 800666e:	d100      	bne.n	8006672 <memset+0xa>
 8006670:	4770      	bx	lr
 8006672:	f803 1b01 	strb.w	r1, [r3], #1
 8006676:	e7f9      	b.n	800666c <memset+0x4>

08006678 <__libc_init_array>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	4d0d      	ldr	r5, [pc, #52]	; (80066b0 <__libc_init_array+0x38>)
 800667c:	4c0d      	ldr	r4, [pc, #52]	; (80066b4 <__libc_init_array+0x3c>)
 800667e:	1b64      	subs	r4, r4, r5
 8006680:	10a4      	asrs	r4, r4, #2
 8006682:	2600      	movs	r6, #0
 8006684:	42a6      	cmp	r6, r4
 8006686:	d109      	bne.n	800669c <__libc_init_array+0x24>
 8006688:	4d0b      	ldr	r5, [pc, #44]	; (80066b8 <__libc_init_array+0x40>)
 800668a:	4c0c      	ldr	r4, [pc, #48]	; (80066bc <__libc_init_array+0x44>)
 800668c:	f000 f818 	bl	80066c0 <_init>
 8006690:	1b64      	subs	r4, r4, r5
 8006692:	10a4      	asrs	r4, r4, #2
 8006694:	2600      	movs	r6, #0
 8006696:	42a6      	cmp	r6, r4
 8006698:	d105      	bne.n	80066a6 <__libc_init_array+0x2e>
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a0:	4798      	blx	r3
 80066a2:	3601      	adds	r6, #1
 80066a4:	e7ee      	b.n	8006684 <__libc_init_array+0xc>
 80066a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066aa:	4798      	blx	r3
 80066ac:	3601      	adds	r6, #1
 80066ae:	e7f2      	b.n	8006696 <__libc_init_array+0x1e>
 80066b0:	08006730 	.word	0x08006730
 80066b4:	08006730 	.word	0x08006730
 80066b8:	08006730 	.word	0x08006730
 80066bc:	08006734 	.word	0x08006734

080066c0 <_init>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	bf00      	nop
 80066c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c6:	bc08      	pop	{r3}
 80066c8:	469e      	mov	lr, r3
 80066ca:	4770      	bx	lr

080066cc <_fini>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr
